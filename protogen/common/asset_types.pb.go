// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.1
// source: google/ads/googleads/v15/common/asset_types.proto

package common

import (
	enums "github.com/Optable/google-ads-pb/protogen/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A YouTube asset.
type YoutubeVideoAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// YouTube video id. This is the 11 character string value used in the
	// YouTube video URL.
	YoutubeVideoId *string `protobuf:"bytes,2,opt,name=youtube_video_id,json=youtubeVideoId,proto3,oneof" json:"youtube_video_id,omitempty"`
	// YouTube video title.
	YoutubeVideoTitle string `protobuf:"bytes,3,opt,name=youtube_video_title,json=youtubeVideoTitle,proto3" json:"youtube_video_title,omitempty"`
}

func (x *YoutubeVideoAsset) Reset() {
	*x = YoutubeVideoAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YoutubeVideoAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YoutubeVideoAsset) ProtoMessage() {}

func (x *YoutubeVideoAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YoutubeVideoAsset.ProtoReflect.Descriptor instead.
func (*YoutubeVideoAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{0}
}

func (x *YoutubeVideoAsset) GetYoutubeVideoId() string {
	if x != nil && x.YoutubeVideoId != nil {
		return *x.YoutubeVideoId
	}
	return ""
}

func (x *YoutubeVideoAsset) GetYoutubeVideoTitle() string {
	if x != nil {
		return x.YoutubeVideoTitle
	}
	return ""
}

// A MediaBundle asset.
type MediaBundleAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Media bundle (ZIP file) asset data. The format of the uploaded ZIP file
	// depends on the ad field where it will be used. For more information on the
	// format, see the documentation of the ad field where you plan on using the
	// MediaBundleAsset. This field is mutate only.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *MediaBundleAsset) Reset() {
	*x = MediaBundleAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaBundleAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaBundleAsset) ProtoMessage() {}

func (x *MediaBundleAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaBundleAsset.ProtoReflect.Descriptor instead.
func (*MediaBundleAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{1}
}

func (x *MediaBundleAsset) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// An Image asset.
type ImageAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw bytes data of an image. This field is mutate only.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3,oneof" json:"data,omitempty"`
	// File size of the image asset in bytes.
	FileSize *int64 `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	// MIME type of the image asset.
	MimeType enums.MimeTypeEnum_MimeType `protobuf:"varint,3,opt,name=mime_type,json=mimeType,proto3,enum=google.ads.googleads.v15.enums.MimeTypeEnum_MimeType" json:"mime_type,omitempty"`
	// Metadata for this image at its original size.
	FullSize *ImageDimension `protobuf:"bytes,4,opt,name=full_size,json=fullSize,proto3" json:"full_size,omitempty"`
}

func (x *ImageAsset) Reset() {
	*x = ImageAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageAsset) ProtoMessage() {}

func (x *ImageAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageAsset.ProtoReflect.Descriptor instead.
func (*ImageAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{2}
}

func (x *ImageAsset) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImageAsset) GetFileSize() int64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *ImageAsset) GetMimeType() enums.MimeTypeEnum_MimeType {
	if x != nil {
		return x.MimeType
	}
	return enums.MimeTypeEnum_MimeType(0)
}

func (x *ImageAsset) GetFullSize() *ImageDimension {
	if x != nil {
		return x.FullSize
	}
	return nil
}

// Metadata for an image at a certain size, either original or resized.
type ImageDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Height of the image.
	HeightPixels *int64 `protobuf:"varint,4,opt,name=height_pixels,json=heightPixels,proto3,oneof" json:"height_pixels,omitempty"`
	// Width of the image.
	WidthPixels *int64 `protobuf:"varint,5,opt,name=width_pixels,json=widthPixels,proto3,oneof" json:"width_pixels,omitempty"`
	// A URL that returns the image with this height and width.
	Url *string `protobuf:"bytes,6,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *ImageDimension) Reset() {
	*x = ImageDimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDimension) ProtoMessage() {}

func (x *ImageDimension) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDimension.ProtoReflect.Descriptor instead.
func (*ImageDimension) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{3}
}

func (x *ImageDimension) GetHeightPixels() int64 {
	if x != nil && x.HeightPixels != nil {
		return *x.HeightPixels
	}
	return 0
}

func (x *ImageDimension) GetWidthPixels() int64 {
	if x != nil && x.WidthPixels != nil {
		return *x.WidthPixels
	}
	return 0
}

func (x *ImageDimension) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

// A Text asset.
type TextAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text content of the text asset.
	Text *string `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *TextAsset) Reset() {
	*x = TextAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextAsset) ProtoMessage() {}

func (x *TextAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextAsset.ProtoReflect.Descriptor instead.
func (*TextAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{4}
}

func (x *TextAsset) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// A Lead Form asset.
type LeadFormAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the business being advertised.
	BusinessName string `protobuf:"bytes,10,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	// Required. Pre-defined display text that encourages user to expand the form.
	CallToActionType enums.LeadFormCallToActionTypeEnum_LeadFormCallToActionType `protobuf:"varint,17,opt,name=call_to_action_type,json=callToActionType,proto3,enum=google.ads.googleads.v15.enums.LeadFormCallToActionTypeEnum_LeadFormCallToActionType" json:"call_to_action_type,omitempty"`
	// Required. Text giving a clear value proposition of what users expect once
	// they expand the form.
	CallToActionDescription string `protobuf:"bytes,18,opt,name=call_to_action_description,json=callToActionDescription,proto3" json:"call_to_action_description,omitempty"`
	// Required. Headline of the expanded form to describe what the form is asking
	// for or facilitating.
	Headline string `protobuf:"bytes,12,opt,name=headline,proto3" json:"headline,omitempty"`
	// Required. Detailed description of the expanded form to describe what the
	// form is asking for or facilitating.
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Link to a page describing the policy on how the collected data is
	// handled by the advertiser/business.
	PrivacyPolicyUrl string `protobuf:"bytes,14,opt,name=privacy_policy_url,json=privacyPolicyUrl,proto3" json:"privacy_policy_url,omitempty"`
	// Headline of text shown after form submission that describes how the
	// advertiser will follow up with the user.
	PostSubmitHeadline *string `protobuf:"bytes,15,opt,name=post_submit_headline,json=postSubmitHeadline,proto3,oneof" json:"post_submit_headline,omitempty"`
	// Detailed description shown after form submission that describes how the
	// advertiser will follow up with the user.
	PostSubmitDescription *string `protobuf:"bytes,16,opt,name=post_submit_description,json=postSubmitDescription,proto3,oneof" json:"post_submit_description,omitempty"`
	// Ordered list of input fields. This field can be updated by reordering
	// questions, but not by adding or removing questions.
	Fields []*LeadFormField `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
	// Ordered list of custom question fields. This field is subject to a limit of
	// 5 qualifying questions per form.
	CustomQuestionFields []*LeadFormCustomQuestionField `protobuf:"bytes,23,rep,name=custom_question_fields,json=customQuestionFields,proto3" json:"custom_question_fields,omitempty"`
	// Configured methods for collected lead data to be delivered to advertiser.
	// Only one method typed as WebhookDelivery can be configured.
	DeliveryMethods []*LeadFormDeliveryMethod `protobuf:"bytes,9,rep,name=delivery_methods,json=deliveryMethods,proto3" json:"delivery_methods,omitempty"`
	// Pre-defined display text that encourages user action after the form is
	// submitted.
	PostSubmitCallToActionType enums.LeadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionType `protobuf:"varint,19,opt,name=post_submit_call_to_action_type,json=postSubmitCallToActionType,proto3,enum=google.ads.googleads.v15.enums.LeadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionType" json:"post_submit_call_to_action_type,omitempty"`
	// Asset resource name of the background image. The minimum size is 600x314
	// and the aspect ratio must be 1.91:1 (+-1%).
	BackgroundImageAsset *string `protobuf:"bytes,20,opt,name=background_image_asset,json=backgroundImageAsset,proto3,oneof" json:"background_image_asset,omitempty"`
	// Chosen intent for the lead form, for example, more volume or more
	// qualified.
	DesiredIntent enums.LeadFormDesiredIntentEnum_LeadFormDesiredIntent `protobuf:"varint,21,opt,name=desired_intent,json=desiredIntent,proto3,enum=google.ads.googleads.v15.enums.LeadFormDesiredIntentEnum_LeadFormDesiredIntent" json:"desired_intent,omitempty"`
	// Custom disclosure shown along with Google disclaimer on the lead form.
	// Accessible to allowed customers only.
	CustomDisclosure *string `protobuf:"bytes,22,opt,name=custom_disclosure,json=customDisclosure,proto3,oneof" json:"custom_disclosure,omitempty"`
}

func (x *LeadFormAsset) Reset() {
	*x = LeadFormAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadFormAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadFormAsset) ProtoMessage() {}

func (x *LeadFormAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadFormAsset.ProtoReflect.Descriptor instead.
func (*LeadFormAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{5}
}

func (x *LeadFormAsset) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *LeadFormAsset) GetCallToActionType() enums.LeadFormCallToActionTypeEnum_LeadFormCallToActionType {
	if x != nil {
		return x.CallToActionType
	}
	return enums.LeadFormCallToActionTypeEnum_LeadFormCallToActionType(0)
}

func (x *LeadFormAsset) GetCallToActionDescription() string {
	if x != nil {
		return x.CallToActionDescription
	}
	return ""
}

func (x *LeadFormAsset) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *LeadFormAsset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LeadFormAsset) GetPrivacyPolicyUrl() string {
	if x != nil {
		return x.PrivacyPolicyUrl
	}
	return ""
}

func (x *LeadFormAsset) GetPostSubmitHeadline() string {
	if x != nil && x.PostSubmitHeadline != nil {
		return *x.PostSubmitHeadline
	}
	return ""
}

func (x *LeadFormAsset) GetPostSubmitDescription() string {
	if x != nil && x.PostSubmitDescription != nil {
		return *x.PostSubmitDescription
	}
	return ""
}

func (x *LeadFormAsset) GetFields() []*LeadFormField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LeadFormAsset) GetCustomQuestionFields() []*LeadFormCustomQuestionField {
	if x != nil {
		return x.CustomQuestionFields
	}
	return nil
}

func (x *LeadFormAsset) GetDeliveryMethods() []*LeadFormDeliveryMethod {
	if x != nil {
		return x.DeliveryMethods
	}
	return nil
}

func (x *LeadFormAsset) GetPostSubmitCallToActionType() enums.LeadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionType {
	if x != nil {
		return x.PostSubmitCallToActionType
	}
	return enums.LeadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionType(0)
}

func (x *LeadFormAsset) GetBackgroundImageAsset() string {
	if x != nil && x.BackgroundImageAsset != nil {
		return *x.BackgroundImageAsset
	}
	return ""
}

func (x *LeadFormAsset) GetDesiredIntent() enums.LeadFormDesiredIntentEnum_LeadFormDesiredIntent {
	if x != nil {
		return x.DesiredIntent
	}
	return enums.LeadFormDesiredIntentEnum_LeadFormDesiredIntent(0)
}

func (x *LeadFormAsset) GetCustomDisclosure() string {
	if x != nil && x.CustomDisclosure != nil {
		return *x.CustomDisclosure
	}
	return ""
}

// One input field instance within a form.
type LeadFormField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the input type, which may be a predefined type such as "full
	// name" or a pre-vetted question like "What kind of vehicle do you have?".
	InputType enums.LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType `protobuf:"varint,1,opt,name=input_type,json=inputType,proto3,enum=google.ads.googleads.v15.enums.LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType" json:"input_type,omitempty"`
	// Defines answer configuration that this form field accepts. If oneof is not
	// set, this is a free-text answer.
	//
	// Types that are assignable to Answers:
	//
	//	*LeadFormField_SingleChoiceAnswers
	//	*LeadFormField_HasLocationAnswer
	Answers isLeadFormField_Answers `protobuf_oneof:"answers"`
}

func (x *LeadFormField) Reset() {
	*x = LeadFormField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadFormField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadFormField) ProtoMessage() {}

func (x *LeadFormField) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadFormField.ProtoReflect.Descriptor instead.
func (*LeadFormField) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{6}
}

func (x *LeadFormField) GetInputType() enums.LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType {
	if x != nil {
		return x.InputType
	}
	return enums.LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType(0)
}

func (m *LeadFormField) GetAnswers() isLeadFormField_Answers {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (x *LeadFormField) GetSingleChoiceAnswers() *LeadFormSingleChoiceAnswers {
	if x, ok := x.GetAnswers().(*LeadFormField_SingleChoiceAnswers); ok {
		return x.SingleChoiceAnswers
	}
	return nil
}

func (x *LeadFormField) GetHasLocationAnswer() bool {
	if x, ok := x.GetAnswers().(*LeadFormField_HasLocationAnswer); ok {
		return x.HasLocationAnswer
	}
	return false
}

type isLeadFormField_Answers interface {
	isLeadFormField_Answers()
}

type LeadFormField_SingleChoiceAnswers struct {
	// Answer configuration for a single choice question. Can be set only for
	// pre-vetted question fields. Minimum of 2 answers required and maximum of
	// 12 allowed.
	SingleChoiceAnswers *LeadFormSingleChoiceAnswers `protobuf:"bytes,2,opt,name=single_choice_answers,json=singleChoiceAnswers,proto3,oneof"`
}

type LeadFormField_HasLocationAnswer struct {
	// Answer configuration for location question. If true, campaign/account
	// level location data (state, city, business name etc) will be rendered on
	// the Lead Form.
	// Starting V13.1, has_location_answer can only be set for "What is your
	// preferred dealership?" question, for advertisers with Location Assets
	// setup at campaign/account level.
	HasLocationAnswer bool `protobuf:"varint,3,opt,name=has_location_answer,json=hasLocationAnswer,proto3,oneof"`
}

func (*LeadFormField_SingleChoiceAnswers) isLeadFormField_Answers() {}

func (*LeadFormField_HasLocationAnswer) isLeadFormField_Answers() {}

// One custom question input field instance within a form.
type LeadFormCustomQuestionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The exact custom question field text (for example, "What kind of vehicle
	// do you have?").
	CustomQuestionText string `protobuf:"bytes,1,opt,name=custom_question_text,json=customQuestionText,proto3" json:"custom_question_text,omitempty"`
	// Defines answer configuration that this form field accepts. If
	// oneof is not set, this is a free-text answer.
	//
	// Types that are assignable to Answers:
	//
	//	*LeadFormCustomQuestionField_SingleChoiceAnswers
	//	*LeadFormCustomQuestionField_HasLocationAnswer
	Answers isLeadFormCustomQuestionField_Answers `protobuf_oneof:"answers"`
}

func (x *LeadFormCustomQuestionField) Reset() {
	*x = LeadFormCustomQuestionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadFormCustomQuestionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadFormCustomQuestionField) ProtoMessage() {}

func (x *LeadFormCustomQuestionField) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadFormCustomQuestionField.ProtoReflect.Descriptor instead.
func (*LeadFormCustomQuestionField) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{7}
}

func (x *LeadFormCustomQuestionField) GetCustomQuestionText() string {
	if x != nil {
		return x.CustomQuestionText
	}
	return ""
}

func (m *LeadFormCustomQuestionField) GetAnswers() isLeadFormCustomQuestionField_Answers {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (x *LeadFormCustomQuestionField) GetSingleChoiceAnswers() *LeadFormSingleChoiceAnswers {
	if x, ok := x.GetAnswers().(*LeadFormCustomQuestionField_SingleChoiceAnswers); ok {
		return x.SingleChoiceAnswers
	}
	return nil
}

func (x *LeadFormCustomQuestionField) GetHasLocationAnswer() bool {
	if x, ok := x.GetAnswers().(*LeadFormCustomQuestionField_HasLocationAnswer); ok {
		return x.HasLocationAnswer
	}
	return false
}

type isLeadFormCustomQuestionField_Answers interface {
	isLeadFormCustomQuestionField_Answers()
}

type LeadFormCustomQuestionField_SingleChoiceAnswers struct {
	// Answer configuration for a single choice question.
	// Minimum of 2 answers and maximum of 12 allowed.
	SingleChoiceAnswers *LeadFormSingleChoiceAnswers `protobuf:"bytes,2,opt,name=single_choice_answers,json=singleChoiceAnswers,proto3,oneof"`
}

type LeadFormCustomQuestionField_HasLocationAnswer struct {
	// Answer configuration for location question. If true, campaign/account
	// level location data (state, city, business name etc) will be rendered on
	// the Lead Form.
	// Starting V13.1, has_location_answer can only be set for "What is your
	// preferred dealership?" question, for advertisers with Location Assets
	// setup at campaign/account level.
	HasLocationAnswer bool `protobuf:"varint,3,opt,name=has_location_answer,json=hasLocationAnswer,proto3,oneof"`
}

func (*LeadFormCustomQuestionField_SingleChoiceAnswers) isLeadFormCustomQuestionField_Answers() {}

func (*LeadFormCustomQuestionField_HasLocationAnswer) isLeadFormCustomQuestionField_Answers() {}

// Defines possible answers for a single choice question, usually presented as
// a single-choice drop-down list.
type LeadFormSingleChoiceAnswers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of choices for a single question field. The order of entries defines
	// UI order. Minimum of 2 answers required and maximum of 12 allowed.
	Answers []string `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *LeadFormSingleChoiceAnswers) Reset() {
	*x = LeadFormSingleChoiceAnswers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadFormSingleChoiceAnswers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadFormSingleChoiceAnswers) ProtoMessage() {}

func (x *LeadFormSingleChoiceAnswers) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadFormSingleChoiceAnswers.ProtoReflect.Descriptor instead.
func (*LeadFormSingleChoiceAnswers) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{8}
}

func (x *LeadFormSingleChoiceAnswers) GetAnswers() []string {
	if x != nil {
		return x.Answers
	}
	return nil
}

// A configuration of how leads are delivered to the advertiser.
type LeadFormDeliveryMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Various subtypes of delivery.
	//
	// Types that are assignable to DeliveryDetails:
	//
	//	*LeadFormDeliveryMethod_Webhook
	DeliveryDetails isLeadFormDeliveryMethod_DeliveryDetails `protobuf_oneof:"delivery_details"`
}

func (x *LeadFormDeliveryMethod) Reset() {
	*x = LeadFormDeliveryMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadFormDeliveryMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadFormDeliveryMethod) ProtoMessage() {}

func (x *LeadFormDeliveryMethod) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadFormDeliveryMethod.ProtoReflect.Descriptor instead.
func (*LeadFormDeliveryMethod) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{9}
}

func (m *LeadFormDeliveryMethod) GetDeliveryDetails() isLeadFormDeliveryMethod_DeliveryDetails {
	if m != nil {
		return m.DeliveryDetails
	}
	return nil
}

func (x *LeadFormDeliveryMethod) GetWebhook() *WebhookDelivery {
	if x, ok := x.GetDeliveryDetails().(*LeadFormDeliveryMethod_Webhook); ok {
		return x.Webhook
	}
	return nil
}

type isLeadFormDeliveryMethod_DeliveryDetails interface {
	isLeadFormDeliveryMethod_DeliveryDetails()
}

type LeadFormDeliveryMethod_Webhook struct {
	// Webhook method of delivery.
	Webhook *WebhookDelivery `protobuf:"bytes,1,opt,name=webhook,proto3,oneof"`
}

func (*LeadFormDeliveryMethod_Webhook) isLeadFormDeliveryMethod_DeliveryDetails() {}

// Google notifies the advertiser of leads by making HTTP calls to an
// endpoint they specify. The requests contain JSON matching a schema that
// Google publishes as part of form ads documentation.
type WebhookDelivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Webhook url specified by advertiser to send the lead.
	AdvertiserWebhookUrl *string `protobuf:"bytes,4,opt,name=advertiser_webhook_url,json=advertiserWebhookUrl,proto3,oneof" json:"advertiser_webhook_url,omitempty"`
	// Anti-spoofing secret set by the advertiser as part of the webhook payload.
	GoogleSecret *string `protobuf:"bytes,5,opt,name=google_secret,json=googleSecret,proto3,oneof" json:"google_secret,omitempty"`
	// The schema version that this delivery instance will use.
	PayloadSchemaVersion *int64 `protobuf:"varint,6,opt,name=payload_schema_version,json=payloadSchemaVersion,proto3,oneof" json:"payload_schema_version,omitempty"`
}

func (x *WebhookDelivery) Reset() {
	*x = WebhookDelivery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookDelivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookDelivery) ProtoMessage() {}

func (x *WebhookDelivery) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookDelivery.ProtoReflect.Descriptor instead.
func (*WebhookDelivery) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{10}
}

func (x *WebhookDelivery) GetAdvertiserWebhookUrl() string {
	if x != nil && x.AdvertiserWebhookUrl != nil {
		return *x.AdvertiserWebhookUrl
	}
	return ""
}

func (x *WebhookDelivery) GetGoogleSecret() string {
	if x != nil && x.GoogleSecret != nil {
		return *x.GoogleSecret
	}
	return ""
}

func (x *WebhookDelivery) GetPayloadSchemaVersion() int64 {
	if x != nil && x.PayloadSchemaVersion != nil {
		return *x.PayloadSchemaVersion
	}
	return 0
}

// A Book on Google asset. Used to redirect user to book through Google.
// Book on Google will change the redirect url to book directly through
// Google.
type BookOnGoogleAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BookOnGoogleAsset) Reset() {
	*x = BookOnGoogleAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookOnGoogleAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookOnGoogleAsset) ProtoMessage() {}

func (x *BookOnGoogleAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookOnGoogleAsset.ProtoReflect.Descriptor instead.
func (*BookOnGoogleAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{11}
}

// A Promotion asset.
type PromotionAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A freeform description of what the promotion is targeting.
	PromotionTarget string `protobuf:"bytes,1,opt,name=promotion_target,json=promotionTarget,proto3" json:"promotion_target,omitempty"`
	// A modifier for qualification of the discount.
	DiscountModifier enums.PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier `protobuf:"varint,2,opt,name=discount_modifier,json=discountModifier,proto3,enum=google.ads.googleads.v15.enums.PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier" json:"discount_modifier,omitempty"`
	// Start date of when the promotion is eligible to be redeemed, in yyyy-MM-dd
	// format.
	RedemptionStartDate string `protobuf:"bytes,7,opt,name=redemption_start_date,json=redemptionStartDate,proto3" json:"redemption_start_date,omitempty"`
	// Last date of when the promotion is eligible to be redeemed, in yyyy-MM-dd
	// format.
	RedemptionEndDate string `protobuf:"bytes,8,opt,name=redemption_end_date,json=redemptionEndDate,proto3" json:"redemption_end_date,omitempty"`
	// The occasion the promotion was intended for.
	// If an occasion is set, the redemption window will need to fall within the
	// date range associated with the occasion.
	Occasion enums.PromotionExtensionOccasionEnum_PromotionExtensionOccasion `protobuf:"varint,9,opt,name=occasion,proto3,enum=google.ads.googleads.v15.enums.PromotionExtensionOccasionEnum_PromotionExtensionOccasion" json:"occasion,omitempty"`
	// The language of the promotion.
	// Represented as BCP 47 language tag.
	LanguageCode string `protobuf:"bytes,10,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Start date of when this asset is effective and can begin serving, in
	// yyyy-MM-dd format.
	StartDate string `protobuf:"bytes,11,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Last date of when this asset is effective and still serving, in yyyy-MM-dd
	// format.
	EndDate string `protobuf:"bytes,12,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// List of non-overlapping schedules specifying all time intervals for which
	// the asset may serve. There can be a maximum of 6 schedules per day, 42 in
	// total.
	AdScheduleTargets []*AdScheduleInfo `protobuf:"bytes,13,rep,name=ad_schedule_targets,json=adScheduleTargets,proto3" json:"ad_schedule_targets,omitempty"`
	// Discount type, can be percentage off or amount off.
	//
	// Types that are assignable to DiscountType:
	//
	//	*PromotionAsset_PercentOff
	//	*PromotionAsset_MoneyAmountOff
	DiscountType isPromotionAsset_DiscountType `protobuf_oneof:"discount_type"`
	// Promotion trigger. Can be by promotion code or promo by eligible order
	// amount.
	//
	// Types that are assignable to PromotionTrigger:
	//
	//	*PromotionAsset_PromotionCode
	//	*PromotionAsset_OrdersOverAmount
	PromotionTrigger isPromotionAsset_PromotionTrigger `protobuf_oneof:"promotion_trigger"`
}

func (x *PromotionAsset) Reset() {
	*x = PromotionAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotionAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionAsset) ProtoMessage() {}

func (x *PromotionAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionAsset.ProtoReflect.Descriptor instead.
func (*PromotionAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{12}
}

func (x *PromotionAsset) GetPromotionTarget() string {
	if x != nil {
		return x.PromotionTarget
	}
	return ""
}

func (x *PromotionAsset) GetDiscountModifier() enums.PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier {
	if x != nil {
		return x.DiscountModifier
	}
	return enums.PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier(0)
}

func (x *PromotionAsset) GetRedemptionStartDate() string {
	if x != nil {
		return x.RedemptionStartDate
	}
	return ""
}

func (x *PromotionAsset) GetRedemptionEndDate() string {
	if x != nil {
		return x.RedemptionEndDate
	}
	return ""
}

func (x *PromotionAsset) GetOccasion() enums.PromotionExtensionOccasionEnum_PromotionExtensionOccasion {
	if x != nil {
		return x.Occasion
	}
	return enums.PromotionExtensionOccasionEnum_PromotionExtensionOccasion(0)
}

func (x *PromotionAsset) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *PromotionAsset) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *PromotionAsset) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *PromotionAsset) GetAdScheduleTargets() []*AdScheduleInfo {
	if x != nil {
		return x.AdScheduleTargets
	}
	return nil
}

func (m *PromotionAsset) GetDiscountType() isPromotionAsset_DiscountType {
	if m != nil {
		return m.DiscountType
	}
	return nil
}

func (x *PromotionAsset) GetPercentOff() int64 {
	if x, ok := x.GetDiscountType().(*PromotionAsset_PercentOff); ok {
		return x.PercentOff
	}
	return 0
}

func (x *PromotionAsset) GetMoneyAmountOff() *Money {
	if x, ok := x.GetDiscountType().(*PromotionAsset_MoneyAmountOff); ok {
		return x.MoneyAmountOff
	}
	return nil
}

func (m *PromotionAsset) GetPromotionTrigger() isPromotionAsset_PromotionTrigger {
	if m != nil {
		return m.PromotionTrigger
	}
	return nil
}

func (x *PromotionAsset) GetPromotionCode() string {
	if x, ok := x.GetPromotionTrigger().(*PromotionAsset_PromotionCode); ok {
		return x.PromotionCode
	}
	return ""
}

func (x *PromotionAsset) GetOrdersOverAmount() *Money {
	if x, ok := x.GetPromotionTrigger().(*PromotionAsset_OrdersOverAmount); ok {
		return x.OrdersOverAmount
	}
	return nil
}

type isPromotionAsset_DiscountType interface {
	isPromotionAsset_DiscountType()
}

type PromotionAsset_PercentOff struct {
	// Percentage off discount in the promotion. 1,000,000 = 100%.
	// Either this or money_amount_off is required.
	PercentOff int64 `protobuf:"varint,3,opt,name=percent_off,json=percentOff,proto3,oneof"`
}

type PromotionAsset_MoneyAmountOff struct {
	// Money amount off for discount in the promotion.
	// Either this or percent_off is required.
	MoneyAmountOff *Money `protobuf:"bytes,4,opt,name=money_amount_off,json=moneyAmountOff,proto3,oneof"`
}

func (*PromotionAsset_PercentOff) isPromotionAsset_DiscountType() {}

func (*PromotionAsset_MoneyAmountOff) isPromotionAsset_DiscountType() {}

type isPromotionAsset_PromotionTrigger interface {
	isPromotionAsset_PromotionTrigger()
}

type PromotionAsset_PromotionCode struct {
	// A code the user should use in order to be eligible for the promotion.
	PromotionCode string `protobuf:"bytes,5,opt,name=promotion_code,json=promotionCode,proto3,oneof"`
}

type PromotionAsset_OrdersOverAmount struct {
	// The amount the total order needs to be for the user to be eligible for
	// the promotion.
	OrdersOverAmount *Money `protobuf:"bytes,6,opt,name=orders_over_amount,json=ordersOverAmount,proto3,oneof"`
}

func (*PromotionAsset_PromotionCode) isPromotionAsset_PromotionTrigger() {}

func (*PromotionAsset_OrdersOverAmount) isPromotionAsset_PromotionTrigger() {}

// A Callout asset.
type CalloutAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The callout text.
	// The length of this string should be between 1 and 25, inclusive.
	CalloutText string `protobuf:"bytes,1,opt,name=callout_text,json=calloutText,proto3" json:"callout_text,omitempty"`
	// Start date of when this asset is effective and can begin serving, in
	// yyyy-MM-dd format.
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Last date of when this asset is effective and still serving, in yyyy-MM-dd
	// format.
	EndDate string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// List of non-overlapping schedules specifying all time intervals for which
	// the asset may serve. There can be a maximum of 6 schedules per day, 42 in
	// total.
	AdScheduleTargets []*AdScheduleInfo `protobuf:"bytes,4,rep,name=ad_schedule_targets,json=adScheduleTargets,proto3" json:"ad_schedule_targets,omitempty"`
}

func (x *CalloutAsset) Reset() {
	*x = CalloutAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalloutAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalloutAsset) ProtoMessage() {}

func (x *CalloutAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalloutAsset.ProtoReflect.Descriptor instead.
func (*CalloutAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{13}
}

func (x *CalloutAsset) GetCalloutText() string {
	if x != nil {
		return x.CalloutText
	}
	return ""
}

func (x *CalloutAsset) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CalloutAsset) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CalloutAsset) GetAdScheduleTargets() []*AdScheduleInfo {
	if x != nil {
		return x.AdScheduleTargets
	}
	return nil
}

// A Structured Snippet asset.
type StructuredSnippetAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The header of the snippet.
	// This string should be one of the predefined values at
	// https://developers.google.com/google-ads/api/reference/data/structured-snippet-headers
	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Required. The values in the snippet.
	// The size of this collection should be between 3 and 10, inclusive.
	// The length of each value should be between 1 and 25 characters, inclusive.
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StructuredSnippetAsset) Reset() {
	*x = StructuredSnippetAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredSnippetAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredSnippetAsset) ProtoMessage() {}

func (x *StructuredSnippetAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredSnippetAsset.ProtoReflect.Descriptor instead.
func (*StructuredSnippetAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{14}
}

func (x *StructuredSnippetAsset) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *StructuredSnippetAsset) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A Sitelink asset.
type SitelinkAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. URL display text for the sitelink.
	// The length of this string should be between 1 and 25, inclusive.
	LinkText string `protobuf:"bytes,1,opt,name=link_text,json=linkText,proto3" json:"link_text,omitempty"`
	// First line of the description for the sitelink.
	// If set, the length should be between 1 and 35, inclusive, and description2
	// must also be set.
	Description1 string `protobuf:"bytes,2,opt,name=description1,proto3" json:"description1,omitempty"`
	// Second line of the description for the sitelink.
	// If set, the length should be between 1 and 35, inclusive, and description1
	// must also be set.
	Description2 string `protobuf:"bytes,3,opt,name=description2,proto3" json:"description2,omitempty"`
	// Start date of when this asset is effective and can begin serving, in
	// yyyy-MM-dd format.
	StartDate string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Last date of when this asset is effective and still serving, in yyyy-MM-dd
	// format.
	EndDate string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// List of non-overlapping schedules specifying all time intervals for which
	// the asset may serve. There can be a maximum of 6 schedules per day, 42 in
	// total.
	AdScheduleTargets []*AdScheduleInfo `protobuf:"bytes,6,rep,name=ad_schedule_targets,json=adScheduleTargets,proto3" json:"ad_schedule_targets,omitempty"`
}

func (x *SitelinkAsset) Reset() {
	*x = SitelinkAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SitelinkAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SitelinkAsset) ProtoMessage() {}

func (x *SitelinkAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SitelinkAsset.ProtoReflect.Descriptor instead.
func (*SitelinkAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{15}
}

func (x *SitelinkAsset) GetLinkText() string {
	if x != nil {
		return x.LinkText
	}
	return ""
}

func (x *SitelinkAsset) GetDescription1() string {
	if x != nil {
		return x.Description1
	}
	return ""
}

func (x *SitelinkAsset) GetDescription2() string {
	if x != nil {
		return x.Description2
	}
	return ""
}

func (x *SitelinkAsset) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SitelinkAsset) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SitelinkAsset) GetAdScheduleTargets() []*AdScheduleInfo {
	if x != nil {
		return x.AdScheduleTargets
	}
	return nil
}

// A Page Feed asset.
type PageFeedAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The webpage that advertisers want to target.
	PageUrl string `protobuf:"bytes,1,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
	// Labels used to group the page urls.
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *PageFeedAsset) Reset() {
	*x = PageFeedAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageFeedAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageFeedAsset) ProtoMessage() {}

func (x *PageFeedAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageFeedAsset.ProtoReflect.Descriptor instead.
func (*PageFeedAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{16}
}

func (x *PageFeedAsset) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *PageFeedAsset) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// A Dynamic Education asset.
type DynamicEducationAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Program ID which can be any sequence of letters and digits, and
	// must be unique and match the values of remarketing tag. Required.
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	// Location ID which can be any sequence of letters and digits and must be
	// unique.
	LocationId string `protobuf:"bytes,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Required. Program name, for example, Nursing. Required.
	ProgramName string `protobuf:"bytes,3,opt,name=program_name,json=programName,proto3" json:"program_name,omitempty"`
	// Subject of study, for example, Health.
	Subject string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	// Program description, for example, Nursing Certification.
	ProgramDescription string `protobuf:"bytes,5,opt,name=program_description,json=programDescription,proto3" json:"program_description,omitempty"`
	// School name, for example, Mountain View School of Nursing.
	SchoolName string `protobuf:"bytes,6,opt,name=school_name,json=schoolName,proto3" json:"school_name,omitempty"`
	// School address which can be specified in one of the following formats.
	// (1) City, state, code, country, for example, Mountain View, CA, USA.
	// (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
	// (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// Contextual keywords, for example, Nursing certification, Health, Mountain
	// View.
	ContextualKeywords []string `protobuf:"bytes,8,rep,name=contextual_keywords,json=contextualKeywords,proto3" json:"contextual_keywords,omitempty"`
	// Android deep link, for example,
	// android-app://com.example.android/http/example.com/gizmos?1234.
	AndroidAppLink string `protobuf:"bytes,9,opt,name=android_app_link,json=androidAppLink,proto3" json:"android_app_link,omitempty"`
	// Similar program IDs.
	SimilarProgramIds []string `protobuf:"bytes,10,rep,name=similar_program_ids,json=similarProgramIds,proto3" json:"similar_program_ids,omitempty"`
	// iOS deep link, for example, exampleApp://content/page.
	IosAppLink string `protobuf:"bytes,11,opt,name=ios_app_link,json=iosAppLink,proto3" json:"ios_app_link,omitempty"`
	// iOS app store ID. This is used to check if the user has the app installed
	// on their device before deep linking. If this field is set, then the
	// ios_app_link field must also be present.
	IosAppStoreId int64 `protobuf:"varint,12,opt,name=ios_app_store_id,json=iosAppStoreId,proto3" json:"ios_app_store_id,omitempty"`
	// Thumbnail image url, for example, http://www.example.com/thumbnail.png. The
	// thumbnail image will not be uploaded as image asset.
	ThumbnailImageUrl string `protobuf:"bytes,13,opt,name=thumbnail_image_url,json=thumbnailImageUrl,proto3" json:"thumbnail_image_url,omitempty"`
	// Image url, for example, http://www.example.com/image.png. The image will
	// not be uploaded as image asset.
	ImageUrl string `protobuf:"bytes,14,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *DynamicEducationAsset) Reset() {
	*x = DynamicEducationAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicEducationAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicEducationAsset) ProtoMessage() {}

func (x *DynamicEducationAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicEducationAsset.ProtoReflect.Descriptor instead.
func (*DynamicEducationAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{17}
}

func (x *DynamicEducationAsset) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *DynamicEducationAsset) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *DynamicEducationAsset) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *DynamicEducationAsset) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *DynamicEducationAsset) GetProgramDescription() string {
	if x != nil {
		return x.ProgramDescription
	}
	return ""
}

func (x *DynamicEducationAsset) GetSchoolName() string {
	if x != nil {
		return x.SchoolName
	}
	return ""
}

func (x *DynamicEducationAsset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DynamicEducationAsset) GetContextualKeywords() []string {
	if x != nil {
		return x.ContextualKeywords
	}
	return nil
}

func (x *DynamicEducationAsset) GetAndroidAppLink() string {
	if x != nil {
		return x.AndroidAppLink
	}
	return ""
}

func (x *DynamicEducationAsset) GetSimilarProgramIds() []string {
	if x != nil {
		return x.SimilarProgramIds
	}
	return nil
}

func (x *DynamicEducationAsset) GetIosAppLink() string {
	if x != nil {
		return x.IosAppLink
	}
	return ""
}

func (x *DynamicEducationAsset) GetIosAppStoreId() int64 {
	if x != nil {
		return x.IosAppStoreId
	}
	return 0
}

func (x *DynamicEducationAsset) GetThumbnailImageUrl() string {
	if x != nil {
		return x.ThumbnailImageUrl
	}
	return ""
}

func (x *DynamicEducationAsset) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

// An asset representing a mobile app.
type MobileAppAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A string that uniquely identifies a mobile application. It should
	// just contain the platform native id, like "com.android.ebay" for Android or
	// "12345689" for iOS.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Required. The application store that distributes this specific app.
	AppStore enums.MobileAppVendorEnum_MobileAppVendor `protobuf:"varint,2,opt,name=app_store,json=appStore,proto3,enum=google.ads.googleads.v15.enums.MobileAppVendorEnum_MobileAppVendor" json:"app_store,omitempty"`
	// Required. The visible text displayed when the link is rendered in an ad.
	// The length of this string should be between 1 and 25, inclusive.
	LinkText string `protobuf:"bytes,3,opt,name=link_text,json=linkText,proto3" json:"link_text,omitempty"`
	// Start date of when this asset is effective and can begin serving, in
	// yyyy-MM-dd format.
	StartDate string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Last date of when this asset is effective and still serving, in yyyy-MM-dd
	// format.
	EndDate string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *MobileAppAsset) Reset() {
	*x = MobileAppAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobileAppAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobileAppAsset) ProtoMessage() {}

func (x *MobileAppAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobileAppAsset.ProtoReflect.Descriptor instead.
func (*MobileAppAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{18}
}

func (x *MobileAppAsset) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MobileAppAsset) GetAppStore() enums.MobileAppVendorEnum_MobileAppVendor {
	if x != nil {
		return x.AppStore
	}
	return enums.MobileAppVendorEnum_MobileAppVendor(0)
}

func (x *MobileAppAsset) GetLinkText() string {
	if x != nil {
		return x.LinkText
	}
	return ""
}

func (x *MobileAppAsset) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MobileAppAsset) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// An asset representing a hotel callout.
type HotelCalloutAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The text of the hotel callout asset.
	// The length of this string should be between 1 and 25, inclusive.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Required. The language of the hotel callout.
	// Represented as BCP 47 language tag.
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
}

func (x *HotelCalloutAsset) Reset() {
	*x = HotelCalloutAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotelCalloutAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotelCalloutAsset) ProtoMessage() {}

func (x *HotelCalloutAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotelCalloutAsset.ProtoReflect.Descriptor instead.
func (*HotelCalloutAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{19}
}

func (x *HotelCalloutAsset) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *HotelCalloutAsset) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

// A Call asset.
type CallAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Two-letter country code of the phone number. Examples: 'US',
	// 'us'.
	CountryCode string `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Required. The advertiser's raw phone number. Examples: '1234567890',
	// '(123)456-7890'
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Indicates whether this CallAsset should use its own call conversion
	// setting, follow the account level setting, or disable call conversion.
	CallConversionReportingState enums.CallConversionReportingStateEnum_CallConversionReportingState `protobuf:"varint,3,opt,name=call_conversion_reporting_state,json=callConversionReportingState,proto3,enum=google.ads.googleads.v15.enums.CallConversionReportingStateEnum_CallConversionReportingState" json:"call_conversion_reporting_state,omitempty"`
	// The conversion action to attribute a call conversion to. If not set, the
	// default conversion action is used. This field only has effect if
	// call_conversion_reporting_state is set to
	// USE_RESOURCE_LEVEL_CALL_CONVERSION_ACTION.
	CallConversionAction string `protobuf:"bytes,4,opt,name=call_conversion_action,json=callConversionAction,proto3" json:"call_conversion_action,omitempty"`
	// List of non-overlapping schedules specifying all time intervals for which
	// the asset may serve. There can be a maximum of 6 schedules per day, 42 in
	// total.
	AdScheduleTargets []*AdScheduleInfo `protobuf:"bytes,5,rep,name=ad_schedule_targets,json=adScheduleTargets,proto3" json:"ad_schedule_targets,omitempty"`
}

func (x *CallAsset) Reset() {
	*x = CallAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAsset) ProtoMessage() {}

func (x *CallAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAsset.ProtoReflect.Descriptor instead.
func (*CallAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{20}
}

func (x *CallAsset) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CallAsset) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CallAsset) GetCallConversionReportingState() enums.CallConversionReportingStateEnum_CallConversionReportingState {
	if x != nil {
		return x.CallConversionReportingState
	}
	return enums.CallConversionReportingStateEnum_CallConversionReportingState(0)
}

func (x *CallAsset) GetCallConversionAction() string {
	if x != nil {
		return x.CallConversionAction
	}
	return ""
}

func (x *CallAsset) GetAdScheduleTargets() []*AdScheduleInfo {
	if x != nil {
		return x.AdScheduleTargets
	}
	return nil
}

// An asset representing a list of price offers.
type PriceAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The type of the price asset.
	Type enums.PriceExtensionTypeEnum_PriceExtensionType `protobuf:"varint,1,opt,name=type,proto3,enum=google.ads.googleads.v15.enums.PriceExtensionTypeEnum_PriceExtensionType" json:"type,omitempty"`
	// The price qualifier of the price asset.
	PriceQualifier enums.PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier `protobuf:"varint,2,opt,name=price_qualifier,json=priceQualifier,proto3,enum=google.ads.googleads.v15.enums.PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier" json:"price_qualifier,omitempty"`
	// Required. The language of the price asset.
	// Represented as BCP 47 language tag.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// The price offerings of the price asset.
	// The size of this collection should be between 3 and 8, inclusive.
	PriceOfferings []*PriceOffering `protobuf:"bytes,4,rep,name=price_offerings,json=priceOfferings,proto3" json:"price_offerings,omitempty"`
}

func (x *PriceAsset) Reset() {
	*x = PriceAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceAsset) ProtoMessage() {}

func (x *PriceAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceAsset.ProtoReflect.Descriptor instead.
func (*PriceAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{21}
}

func (x *PriceAsset) GetType() enums.PriceExtensionTypeEnum_PriceExtensionType {
	if x != nil {
		return x.Type
	}
	return enums.PriceExtensionTypeEnum_PriceExtensionType(0)
}

func (x *PriceAsset) GetPriceQualifier() enums.PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier {
	if x != nil {
		return x.PriceQualifier
	}
	return enums.PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier(0)
}

func (x *PriceAsset) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *PriceAsset) GetPriceOfferings() []*PriceOffering {
	if x != nil {
		return x.PriceOfferings
	}
	return nil
}

// A single price offering within a PriceAsset.
type PriceOffering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The header of the price offering.
	// The length of this string should be between 1 and 25, inclusive.
	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Required. The description of the price offering.
	// The length of this string should be between 1 and 25, inclusive.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The price value of the price offering.
	Price *Money `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	// The price unit of the price offering.
	Unit enums.PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit `protobuf:"varint,4,opt,name=unit,proto3,enum=google.ads.googleads.v15.enums.PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit" json:"unit,omitempty"`
	// Required. The final URL after all cross domain redirects.
	FinalUrl string `protobuf:"bytes,5,opt,name=final_url,json=finalUrl,proto3" json:"final_url,omitempty"`
	// The final mobile URL after all cross domain redirects.
	FinalMobileUrl string `protobuf:"bytes,6,opt,name=final_mobile_url,json=finalMobileUrl,proto3" json:"final_mobile_url,omitempty"`
}

func (x *PriceOffering) Reset() {
	*x = PriceOffering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceOffering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceOffering) ProtoMessage() {}

func (x *PriceOffering) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceOffering.ProtoReflect.Descriptor instead.
func (*PriceOffering) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{22}
}

func (x *PriceOffering) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *PriceOffering) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PriceOffering) GetPrice() *Money {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *PriceOffering) GetUnit() enums.PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit {
	if x != nil {
		return x.Unit
	}
	return enums.PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit(0)
}

func (x *PriceOffering) GetFinalUrl() string {
	if x != nil {
		return x.FinalUrl
	}
	return ""
}

func (x *PriceOffering) GetFinalMobileUrl() string {
	if x != nil {
		return x.FinalMobileUrl
	}
	return ""
}

// A call to action asset.
type CallToActionAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Call to action.
	CallToAction enums.CallToActionTypeEnum_CallToActionType `protobuf:"varint,1,opt,name=call_to_action,json=callToAction,proto3,enum=google.ads.googleads.v15.enums.CallToActionTypeEnum_CallToActionType" json:"call_to_action,omitempty"`
}

func (x *CallToActionAsset) Reset() {
	*x = CallToActionAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallToActionAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallToActionAsset) ProtoMessage() {}

func (x *CallToActionAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallToActionAsset.ProtoReflect.Descriptor instead.
func (*CallToActionAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{23}
}

func (x *CallToActionAsset) GetCallToAction() enums.CallToActionTypeEnum_CallToActionType {
	if x != nil {
		return x.CallToAction
	}
	return enums.CallToActionTypeEnum_CallToActionType(0)
}

// A dynamic real estate asset.
type DynamicRealEstateAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Listing ID which can be any sequence of letters and digits, and
	// must be unique and match the values of remarketing tag. Required.
	ListingId string `protobuf:"bytes,1,opt,name=listing_id,json=listingId,proto3" json:"listing_id,omitempty"`
	// Required. Listing name, for example, Boulevard Bungalow. Required.
	ListingName string `protobuf:"bytes,2,opt,name=listing_name,json=listingName,proto3" json:"listing_name,omitempty"`
	// City name, for example, Mountain View, California.
	CityName string `protobuf:"bytes,3,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	// Description, for example, 3 beds, 2 baths, 1568 sq. ft.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Address which can be specified in one of the following formats.
	// (1) City, state, code, country, for example, Mountain View, CA, USA.
	// (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
	// (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Price which can be number followed by the alphabetic currency code,
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 200,000.00
	// USD.
	Price string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// Image URL, for example, http://www.example.com/image.png. The image will
	// not be uploaded as image asset.
	ImageUrl string `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Property type, for example, House.
	PropertyType string `protobuf:"bytes,8,opt,name=property_type,json=propertyType,proto3" json:"property_type,omitempty"`
	// Listing type, for example, For sale.
	ListingType string `protobuf:"bytes,9,opt,name=listing_type,json=listingType,proto3" json:"listing_type,omitempty"`
	// Contextual keywords, for example, For sale; Houses for sale.
	ContextualKeywords []string `protobuf:"bytes,10,rep,name=contextual_keywords,json=contextualKeywords,proto3" json:"contextual_keywords,omitempty"`
	// Formatted price which can be any characters. If set, this attribute will be
	// used instead of 'price', for example, Starting at $200,000.00.
	FormattedPrice string `protobuf:"bytes,11,opt,name=formatted_price,json=formattedPrice,proto3" json:"formatted_price,omitempty"`
	// Android deep link, for example,
	// android-app://com.example.android/http/example.com/gizmos?1234.
	AndroidAppLink string `protobuf:"bytes,12,opt,name=android_app_link,json=androidAppLink,proto3" json:"android_app_link,omitempty"`
	// iOS deep link, for example, exampleApp://content/page.
	IosAppLink string `protobuf:"bytes,13,opt,name=ios_app_link,json=iosAppLink,proto3" json:"ios_app_link,omitempty"`
	// iOS app store ID. This is used to check if the user has the app installed
	// on their device before deep linking. If this field is set, then the
	// ios_app_link field must also be present.
	IosAppStoreId int64 `protobuf:"varint,14,opt,name=ios_app_store_id,json=iosAppStoreId,proto3" json:"ios_app_store_id,omitempty"`
	// Similar listing IDs.
	SimilarListingIds []string `protobuf:"bytes,15,rep,name=similar_listing_ids,json=similarListingIds,proto3" json:"similar_listing_ids,omitempty"`
}

func (x *DynamicRealEstateAsset) Reset() {
	*x = DynamicRealEstateAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicRealEstateAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicRealEstateAsset) ProtoMessage() {}

func (x *DynamicRealEstateAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicRealEstateAsset.ProtoReflect.Descriptor instead.
func (*DynamicRealEstateAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{24}
}

func (x *DynamicRealEstateAsset) GetListingId() string {
	if x != nil {
		return x.ListingId
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetListingName() string {
	if x != nil {
		return x.ListingName
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetPropertyType() string {
	if x != nil {
		return x.PropertyType
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetListingType() string {
	if x != nil {
		return x.ListingType
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetContextualKeywords() []string {
	if x != nil {
		return x.ContextualKeywords
	}
	return nil
}

func (x *DynamicRealEstateAsset) GetFormattedPrice() string {
	if x != nil {
		return x.FormattedPrice
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetAndroidAppLink() string {
	if x != nil {
		return x.AndroidAppLink
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetIosAppLink() string {
	if x != nil {
		return x.IosAppLink
	}
	return ""
}

func (x *DynamicRealEstateAsset) GetIosAppStoreId() int64 {
	if x != nil {
		return x.IosAppStoreId
	}
	return 0
}

func (x *DynamicRealEstateAsset) GetSimilarListingIds() []string {
	if x != nil {
		return x.SimilarListingIds
	}
	return nil
}

// A dynamic custom asset.
type DynamicCustomAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ID which can be any sequence of letters and digits, and must be
	// unique and match the values of remarketing tag, for example, sedan.
	// Required.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID2 which can be any sequence of letters and digits, for example, red. ID
	// sequence (ID + ID2) must be unique.
	Id2 string `protobuf:"bytes,2,opt,name=id2,proto3" json:"id2,omitempty"`
	// Required. Item title, for example, Mid-size sedan. Required.
	ItemTitle string `protobuf:"bytes,3,opt,name=item_title,json=itemTitle,proto3" json:"item_title,omitempty"`
	// Item subtitle, for example, At your Mountain View dealership.
	ItemSubtitle string `protobuf:"bytes,4,opt,name=item_subtitle,json=itemSubtitle,proto3" json:"item_subtitle,omitempty"`
	// Item description, for example, Best selling mid-size car.
	ItemDescription string `protobuf:"bytes,5,opt,name=item_description,json=itemDescription,proto3" json:"item_description,omitempty"`
	// Item address which can be specified in one of the following formats.
	// (1) City, state, code, country, for example, Mountain View, CA, USA.
	// (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
	// (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403
	ItemAddress string `protobuf:"bytes,6,opt,name=item_address,json=itemAddress,proto3" json:"item_address,omitempty"`
	// Item category, for example, Sedans.
	ItemCategory string `protobuf:"bytes,7,opt,name=item_category,json=itemCategory,proto3" json:"item_category,omitempty"`
	// Price which can be number followed by the alphabetic currency code,
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 20,000.00 USD.
	Price string `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`
	// Sale price which can be number followed by the alphabetic currency code,
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 15,000.00 USD.
	// Must be less than the 'price' field.
	SalePrice string `protobuf:"bytes,9,opt,name=sale_price,json=salePrice,proto3" json:"sale_price,omitempty"`
	// Formatted price which can be any characters. If set, this attribute will be
	// used instead of 'price', for example, Starting at $20,000.00.
	FormattedPrice string `protobuf:"bytes,10,opt,name=formatted_price,json=formattedPrice,proto3" json:"formatted_price,omitempty"`
	// Formatted sale price which can be any characters. If set, this attribute
	// will be used instead of 'sale price', for example, On sale for $15,000.00.
	FormattedSalePrice string `protobuf:"bytes,11,opt,name=formatted_sale_price,json=formattedSalePrice,proto3" json:"formatted_sale_price,omitempty"`
	// Image URL, for example, http://www.example.com/image.png. The image will
	// not be uploaded as image asset.
	ImageUrl string `protobuf:"bytes,12,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Contextual keywords, for example, Sedans, 4 door sedans.
	ContextualKeywords []string `protobuf:"bytes,13,rep,name=contextual_keywords,json=contextualKeywords,proto3" json:"contextual_keywords,omitempty"`
	// Android deep link, for example,
	// android-app://com.example.android/http/example.com/gizmos?1234.
	AndroidAppLink string `protobuf:"bytes,14,opt,name=android_app_link,json=androidAppLink,proto3" json:"android_app_link,omitempty"`
	// iOS deep link, for example, exampleApp://content/page.
	IosAppLink string `protobuf:"bytes,16,opt,name=ios_app_link,json=iosAppLink,proto3" json:"ios_app_link,omitempty"`
	// iOS app store ID. This is used to check if the user has the app installed
	// on their device before deep linking. If this field is set, then the
	// ios_app_link field must also be present.
	IosAppStoreId int64 `protobuf:"varint,17,opt,name=ios_app_store_id,json=iosAppStoreId,proto3" json:"ios_app_store_id,omitempty"`
	// Similar IDs.
	SimilarIds []string `protobuf:"bytes,15,rep,name=similar_ids,json=similarIds,proto3" json:"similar_ids,omitempty"`
}

func (x *DynamicCustomAsset) Reset() {
	*x = DynamicCustomAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicCustomAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicCustomAsset) ProtoMessage() {}

func (x *DynamicCustomAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicCustomAsset.ProtoReflect.Descriptor instead.
func (*DynamicCustomAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{25}
}

func (x *DynamicCustomAsset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DynamicCustomAsset) GetId2() string {
	if x != nil {
		return x.Id2
	}
	return ""
}

func (x *DynamicCustomAsset) GetItemTitle() string {
	if x != nil {
		return x.ItemTitle
	}
	return ""
}

func (x *DynamicCustomAsset) GetItemSubtitle() string {
	if x != nil {
		return x.ItemSubtitle
	}
	return ""
}

func (x *DynamicCustomAsset) GetItemDescription() string {
	if x != nil {
		return x.ItemDescription
	}
	return ""
}

func (x *DynamicCustomAsset) GetItemAddress() string {
	if x != nil {
		return x.ItemAddress
	}
	return ""
}

func (x *DynamicCustomAsset) GetItemCategory() string {
	if x != nil {
		return x.ItemCategory
	}
	return ""
}

func (x *DynamicCustomAsset) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *DynamicCustomAsset) GetSalePrice() string {
	if x != nil {
		return x.SalePrice
	}
	return ""
}

func (x *DynamicCustomAsset) GetFormattedPrice() string {
	if x != nil {
		return x.FormattedPrice
	}
	return ""
}

func (x *DynamicCustomAsset) GetFormattedSalePrice() string {
	if x != nil {
		return x.FormattedSalePrice
	}
	return ""
}

func (x *DynamicCustomAsset) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DynamicCustomAsset) GetContextualKeywords() []string {
	if x != nil {
		return x.ContextualKeywords
	}
	return nil
}

func (x *DynamicCustomAsset) GetAndroidAppLink() string {
	if x != nil {
		return x.AndroidAppLink
	}
	return ""
}

func (x *DynamicCustomAsset) GetIosAppLink() string {
	if x != nil {
		return x.IosAppLink
	}
	return ""
}

func (x *DynamicCustomAsset) GetIosAppStoreId() int64 {
	if x != nil {
		return x.IosAppStoreId
	}
	return 0
}

func (x *DynamicCustomAsset) GetSimilarIds() []string {
	if x != nil {
		return x.SimilarIds
	}
	return nil
}

// A dynamic hotels and rentals asset.
type DynamicHotelsAndRentalsAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Property ID which can be any sequence of letters and digits, and
	// must be unique and match the values of remarketing tag. Required.
	PropertyId string `protobuf:"bytes,1,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
	// Required. Property name, for example, Mountain View Hotel. Required.
	PropertyName string `protobuf:"bytes,2,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	// Image URL, for example, http://www.example.com/image.png. The image will
	// not be uploaded as image asset.
	ImageUrl string `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Destination name, for example, Downtown Mountain View.
	DestinationName string `protobuf:"bytes,4,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	// Description, for example, Close to SJC Airport.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Price which can be number followed by the alphabetic currency code,
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 100.00 USD.
	Price string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 80.00 USD.
	// Must be less than the 'price' field.
	SalePrice string `protobuf:"bytes,7,opt,name=sale_price,json=salePrice,proto3" json:"sale_price,omitempty"`
	// Star rating. Must be a number between 1 to 5, inclusive.
	StarRating int64 `protobuf:"varint,8,opt,name=star_rating,json=starRating,proto3" json:"star_rating,omitempty"`
	// Category, for example, Hotel suite.
	Category string `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	// Contextual keywords, for example, Mountain View "Hotels", South Bay hotels.
	ContextualKeywords []string `protobuf:"bytes,10,rep,name=contextual_keywords,json=contextualKeywords,proto3" json:"contextual_keywords,omitempty"`
	// Address which can be specified in one of the following formats.
	// (1) City, state, code, country, for example, Mountain View, CA, USA.
	// (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
	// (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403
	Address string `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	// Android deep link, for example,
	// android-app://com.example.android/http/example.com/gizmos?1234.
	AndroidAppLink string `protobuf:"bytes,12,opt,name=android_app_link,json=androidAppLink,proto3" json:"android_app_link,omitempty"`
	// iOS deep link, for example, exampleApp://content/page.
	IosAppLink string `protobuf:"bytes,13,opt,name=ios_app_link,json=iosAppLink,proto3" json:"ios_app_link,omitempty"`
	// iOS app store ID. This is used to check if the user has the app installed
	// on their device before deep linking. If this field is set, then the
	// ios_app_link field must also be present.
	IosAppStoreId int64 `protobuf:"varint,14,opt,name=ios_app_store_id,json=iosAppStoreId,proto3" json:"ios_app_store_id,omitempty"`
	// Formatted price which can be any characters. If set, this attribute will be
	// used instead of 'price', for example, Starting at $100.00.
	FormattedPrice string `protobuf:"bytes,15,opt,name=formatted_price,json=formattedPrice,proto3" json:"formatted_price,omitempty"`
	// Formatted sale price which can be any characters. If set, this attribute
	// will be used instead of 'sale price', for example, On sale for $80.00.
	FormattedSalePrice string `protobuf:"bytes,16,opt,name=formatted_sale_price,json=formattedSalePrice,proto3" json:"formatted_sale_price,omitempty"`
	// Similar property IDs.
	SimilarPropertyIds []string `protobuf:"bytes,17,rep,name=similar_property_ids,json=similarPropertyIds,proto3" json:"similar_property_ids,omitempty"`
}

func (x *DynamicHotelsAndRentalsAsset) Reset() {
	*x = DynamicHotelsAndRentalsAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicHotelsAndRentalsAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicHotelsAndRentalsAsset) ProtoMessage() {}

func (x *DynamicHotelsAndRentalsAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicHotelsAndRentalsAsset.ProtoReflect.Descriptor instead.
func (*DynamicHotelsAndRentalsAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{26}
}

func (x *DynamicHotelsAndRentalsAsset) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetSalePrice() string {
	if x != nil {
		return x.SalePrice
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetStarRating() int64 {
	if x != nil {
		return x.StarRating
	}
	return 0
}

func (x *DynamicHotelsAndRentalsAsset) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetContextualKeywords() []string {
	if x != nil {
		return x.ContextualKeywords
	}
	return nil
}

func (x *DynamicHotelsAndRentalsAsset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetAndroidAppLink() string {
	if x != nil {
		return x.AndroidAppLink
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetIosAppLink() string {
	if x != nil {
		return x.IosAppLink
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetIosAppStoreId() int64 {
	if x != nil {
		return x.IosAppStoreId
	}
	return 0
}

func (x *DynamicHotelsAndRentalsAsset) GetFormattedPrice() string {
	if x != nil {
		return x.FormattedPrice
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetFormattedSalePrice() string {
	if x != nil {
		return x.FormattedSalePrice
	}
	return ""
}

func (x *DynamicHotelsAndRentalsAsset) GetSimilarPropertyIds() []string {
	if x != nil {
		return x.SimilarPropertyIds
	}
	return nil
}

// A dynamic flights asset.
type DynamicFlightsAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Destination ID which can be any sequence of letters and digits,
	// and must be unique and match the values of remarketing tag. Required.
	DestinationId string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// Origin ID which can be any sequence of letters and digits. The ID sequence
	// (destination ID + origin ID) must be unique.
	OriginId string `protobuf:"bytes,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	// Required. Flight description, for example, Book your ticket. Required.
	FlightDescription string `protobuf:"bytes,3,opt,name=flight_description,json=flightDescription,proto3" json:"flight_description,omitempty"`
	// Image URL, for example, http://www.example.com/image.png. The image will
	// not be uploaded as image asset.
	ImageUrl string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Destination name, for example, Paris.
	DestinationName string `protobuf:"bytes,5,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	// Origin name, for example, London.
	OriginName string `protobuf:"bytes,6,opt,name=origin_name,json=originName,proto3" json:"origin_name,omitempty"`
	// Flight price which can be number followed by the alphabetic currency code,
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 100.00 USD.
	FlightPrice string `protobuf:"bytes,7,opt,name=flight_price,json=flightPrice,proto3" json:"flight_price,omitempty"`
	// Flight sale price which can be number followed by the alphabetic currency
	// code, ISO 4217 standard. Use '.' as the decimal mark, for example, 80.00
	// USD. Must be less than the 'flight_price' field.
	FlightSalePrice string `protobuf:"bytes,8,opt,name=flight_sale_price,json=flightSalePrice,proto3" json:"flight_sale_price,omitempty"`
	// Formatted price which can be any characters. If set, this attribute will be
	// used instead of 'price', for example, Starting at $100.00.
	FormattedPrice string `protobuf:"bytes,9,opt,name=formatted_price,json=formattedPrice,proto3" json:"formatted_price,omitempty"`
	// Formatted sale price which can be any characters. If set, this attribute
	// will be used instead of 'sale price', for example, On sale for $80.00.
	FormattedSalePrice string `protobuf:"bytes,10,opt,name=formatted_sale_price,json=formattedSalePrice,proto3" json:"formatted_sale_price,omitempty"`
	// Android deep link, for example,
	// android-app://com.example.android/http/example.com/gizmos?1234.
	AndroidAppLink string `protobuf:"bytes,11,opt,name=android_app_link,json=androidAppLink,proto3" json:"android_app_link,omitempty"`
	// iOS deep link, for example, exampleApp://content/page.
	IosAppLink string `protobuf:"bytes,12,opt,name=ios_app_link,json=iosAppLink,proto3" json:"ios_app_link,omitempty"`
	// iOS app store ID. This is used to check if the user has the app installed
	// on their device before deep linking. If this field is set, then the
	// ios_app_link field must also be present.
	IosAppStoreId int64 `protobuf:"varint,13,opt,name=ios_app_store_id,json=iosAppStoreId,proto3" json:"ios_app_store_id,omitempty"`
	// Similar destination IDs, for example, PAR,LON.
	SimilarDestinationIds []string `protobuf:"bytes,14,rep,name=similar_destination_ids,json=similarDestinationIds,proto3" json:"similar_destination_ids,omitempty"`
	// A custom field which can be multiple key to values mapping separated by
	// delimiters (",", "|" and ":"), in the forms of
	// "<KEY_1>: <VALUE_1>, <VALUE_2>, ... ,<VALUE_N> | <KEY_2>: <VALUE_1>, ...
	// ,<VALUE_N> | ... | <KEY_N>: <VALUE_1>, ... ,<VALUE_N>" for example, wifi:
	// most | aircraft: 320, 77W | flights: 42 | legroom: 32".
	CustomMapping string `protobuf:"bytes,15,opt,name=custom_mapping,json=customMapping,proto3" json:"custom_mapping,omitempty"`
}

func (x *DynamicFlightsAsset) Reset() {
	*x = DynamicFlightsAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicFlightsAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFlightsAsset) ProtoMessage() {}

func (x *DynamicFlightsAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicFlightsAsset.ProtoReflect.Descriptor instead.
func (*DynamicFlightsAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{27}
}

func (x *DynamicFlightsAsset) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *DynamicFlightsAsset) GetOriginId() string {
	if x != nil {
		return x.OriginId
	}
	return ""
}

func (x *DynamicFlightsAsset) GetFlightDescription() string {
	if x != nil {
		return x.FlightDescription
	}
	return ""
}

func (x *DynamicFlightsAsset) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DynamicFlightsAsset) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

func (x *DynamicFlightsAsset) GetOriginName() string {
	if x != nil {
		return x.OriginName
	}
	return ""
}

func (x *DynamicFlightsAsset) GetFlightPrice() string {
	if x != nil {
		return x.FlightPrice
	}
	return ""
}

func (x *DynamicFlightsAsset) GetFlightSalePrice() string {
	if x != nil {
		return x.FlightSalePrice
	}
	return ""
}

func (x *DynamicFlightsAsset) GetFormattedPrice() string {
	if x != nil {
		return x.FormattedPrice
	}
	return ""
}

func (x *DynamicFlightsAsset) GetFormattedSalePrice() string {
	if x != nil {
		return x.FormattedSalePrice
	}
	return ""
}

func (x *DynamicFlightsAsset) GetAndroidAppLink() string {
	if x != nil {
		return x.AndroidAppLink
	}
	return ""
}

func (x *DynamicFlightsAsset) GetIosAppLink() string {
	if x != nil {
		return x.IosAppLink
	}
	return ""
}

func (x *DynamicFlightsAsset) GetIosAppStoreId() int64 {
	if x != nil {
		return x.IosAppStoreId
	}
	return 0
}

func (x *DynamicFlightsAsset) GetSimilarDestinationIds() []string {
	if x != nil {
		return x.SimilarDestinationIds
	}
	return nil
}

func (x *DynamicFlightsAsset) GetCustomMapping() string {
	if x != nil {
		return x.CustomMapping
	}
	return ""
}

// A Discovery Carousel Card asset.
type DiscoveryCarouselCardAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset resource name of the associated 1.91:1 marketing image. This and/or
	// square marketing image asset is required.
	MarketingImageAsset string `protobuf:"bytes,1,opt,name=marketing_image_asset,json=marketingImageAsset,proto3" json:"marketing_image_asset,omitempty"`
	// Asset resource name of the associated square marketing image. This
	// and/or a marketing image asset is required.
	SquareMarketingImageAsset string `protobuf:"bytes,2,opt,name=square_marketing_image_asset,json=squareMarketingImageAsset,proto3" json:"square_marketing_image_asset,omitempty"`
	// Asset resource name of the associated 4:5 portrait marketing image.
	PortraitMarketingImageAsset string `protobuf:"bytes,3,opt,name=portrait_marketing_image_asset,json=portraitMarketingImageAsset,proto3" json:"portrait_marketing_image_asset,omitempty"`
	// Required. Headline of the carousel card.
	Headline string `protobuf:"bytes,4,opt,name=headline,proto3" json:"headline,omitempty"`
	// Call to action text.
	CallToActionText string `protobuf:"bytes,5,opt,name=call_to_action_text,json=callToActionText,proto3" json:"call_to_action_text,omitempty"`
}

func (x *DiscoveryCarouselCardAsset) Reset() {
	*x = DiscoveryCarouselCardAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryCarouselCardAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryCarouselCardAsset) ProtoMessage() {}

func (x *DiscoveryCarouselCardAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryCarouselCardAsset.ProtoReflect.Descriptor instead.
func (*DiscoveryCarouselCardAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{28}
}

func (x *DiscoveryCarouselCardAsset) GetMarketingImageAsset() string {
	if x != nil {
		return x.MarketingImageAsset
	}
	return ""
}

func (x *DiscoveryCarouselCardAsset) GetSquareMarketingImageAsset() string {
	if x != nil {
		return x.SquareMarketingImageAsset
	}
	return ""
}

func (x *DiscoveryCarouselCardAsset) GetPortraitMarketingImageAsset() string {
	if x != nil {
		return x.PortraitMarketingImageAsset
	}
	return ""
}

func (x *DiscoveryCarouselCardAsset) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *DiscoveryCarouselCardAsset) GetCallToActionText() string {
	if x != nil {
		return x.CallToActionText
	}
	return ""
}

// A dynamic travel asset.
type DynamicTravelAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Destination ID which can be any sequence of letters and digits,
	// and must be unique and match the values of remarketing tag. Required.
	DestinationId string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// Origin ID which can be any sequence of letters and digits. The ID sequence
	// (destination ID + origin ID) must be unique.
	OriginId string `protobuf:"bytes,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	// Required. Title, for example, Book your train ticket. Required.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Destination name, for example, Paris.
	DestinationName string `protobuf:"bytes,4,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	// Destination address which can be specified in one of the following formats.
	// (1) City, state, code, country, for example, Mountain View, CA, USA.
	// (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
	// (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403.
	DestinationAddress string `protobuf:"bytes,5,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	// Origin name, for example, London.
	OriginName string `protobuf:"bytes,6,opt,name=origin_name,json=originName,proto3" json:"origin_name,omitempty"`
	// Price which can be a number followed by the alphabetic currency code,
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 100.00 USD.
	Price string `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	// Sale price which can be a number followed by the alphabetic currency
	// code, ISO 4217 standard. Use '.' as the decimal mark, for example, 80.00
	// USD. Must be less than the 'price' field.
	SalePrice string `protobuf:"bytes,8,opt,name=sale_price,json=salePrice,proto3" json:"sale_price,omitempty"`
	// Formatted price which can be any characters. If set, this attribute will be
	// used instead of 'price', for example, Starting at $100.00.
	FormattedPrice string `protobuf:"bytes,9,opt,name=formatted_price,json=formattedPrice,proto3" json:"formatted_price,omitempty"`
	// Formatted sale price which can be any characters. If set, this attribute
	// will be used instead of 'sale price', for example, On sale for $80.00.
	FormattedSalePrice string `protobuf:"bytes,10,opt,name=formatted_sale_price,json=formattedSalePrice,proto3" json:"formatted_sale_price,omitempty"`
	// Category, for example, Express.
	Category string `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	// Contextual keywords, for example, Paris trains.
	ContextualKeywords []string `protobuf:"bytes,12,rep,name=contextual_keywords,json=contextualKeywords,proto3" json:"contextual_keywords,omitempty"`
	// Similar destination IDs, for example, NYC.
	SimilarDestinationIds []string `protobuf:"bytes,13,rep,name=similar_destination_ids,json=similarDestinationIds,proto3" json:"similar_destination_ids,omitempty"`
	// Image URL, for example, http://www.example.com/image.png. The image will
	// not be uploaded as image asset.
	ImageUrl string `protobuf:"bytes,14,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Android deep link, for example,
	// android-app://com.example.android/http/example.com/gizmos?1234.
	AndroidAppLink string `protobuf:"bytes,15,opt,name=android_app_link,json=androidAppLink,proto3" json:"android_app_link,omitempty"`
	// iOS deep link, for example, exampleApp://content/page.
	IosAppLink string `protobuf:"bytes,16,opt,name=ios_app_link,json=iosAppLink,proto3" json:"ios_app_link,omitempty"`
	// iOS app store ID. This is used to check if the user has the app installed
	// on their device before deep linking. If this field is set, then the
	// ios_app_link field must also be present.
	IosAppStoreId int64 `protobuf:"varint,17,opt,name=ios_app_store_id,json=iosAppStoreId,proto3" json:"ios_app_store_id,omitempty"`
}

func (x *DynamicTravelAsset) Reset() {
	*x = DynamicTravelAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicTravelAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicTravelAsset) ProtoMessage() {}

func (x *DynamicTravelAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicTravelAsset.ProtoReflect.Descriptor instead.
func (*DynamicTravelAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{29}
}

func (x *DynamicTravelAsset) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *DynamicTravelAsset) GetOriginId() string {
	if x != nil {
		return x.OriginId
	}
	return ""
}

func (x *DynamicTravelAsset) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DynamicTravelAsset) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

func (x *DynamicTravelAsset) GetDestinationAddress() string {
	if x != nil {
		return x.DestinationAddress
	}
	return ""
}

func (x *DynamicTravelAsset) GetOriginName() string {
	if x != nil {
		return x.OriginName
	}
	return ""
}

func (x *DynamicTravelAsset) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *DynamicTravelAsset) GetSalePrice() string {
	if x != nil {
		return x.SalePrice
	}
	return ""
}

func (x *DynamicTravelAsset) GetFormattedPrice() string {
	if x != nil {
		return x.FormattedPrice
	}
	return ""
}

func (x *DynamicTravelAsset) GetFormattedSalePrice() string {
	if x != nil {
		return x.FormattedSalePrice
	}
	return ""
}

func (x *DynamicTravelAsset) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DynamicTravelAsset) GetContextualKeywords() []string {
	if x != nil {
		return x.ContextualKeywords
	}
	return nil
}

func (x *DynamicTravelAsset) GetSimilarDestinationIds() []string {
	if x != nil {
		return x.SimilarDestinationIds
	}
	return nil
}

func (x *DynamicTravelAsset) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DynamicTravelAsset) GetAndroidAppLink() string {
	if x != nil {
		return x.AndroidAppLink
	}
	return ""
}

func (x *DynamicTravelAsset) GetIosAppLink() string {
	if x != nil {
		return x.IosAppLink
	}
	return ""
}

func (x *DynamicTravelAsset) GetIosAppStoreId() int64 {
	if x != nil {
		return x.IosAppStoreId
	}
	return 0
}

// A dynamic local asset.
type DynamicLocalAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Deal ID which can be any sequence of letters and digits, and must
	// be unique and match the values of remarketing tag. Required.
	DealId string `protobuf:"bytes,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	// Required. Deal name, for example, 50% off at Mountain View Grocers.
	// Required.
	DealName string `protobuf:"bytes,2,opt,name=deal_name,json=dealName,proto3" json:"deal_name,omitempty"`
	// Subtitle, for example, Groceries.
	Subtitle string `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// Description, for example, Save on your weekly bill.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Price which can be a number followed by the alphabetic currency code,
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 100.00 USD.
	Price string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	// Sale price which can be number followed by the alphabetic currency code,
	// ISO 4217 standard. Use '.' as the decimal mark, for example, 80.00 USD.
	// Must be less than the 'price' field.
	SalePrice string `protobuf:"bytes,6,opt,name=sale_price,json=salePrice,proto3" json:"sale_price,omitempty"`
	// Image URL, for example, http://www.example.com/image.png. The image will
	// not be uploaded as image asset.
	ImageUrl string `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Address which can be specified in one of the following formats.
	// (1) City, state, code, country, for example, Mountain View, CA, USA.
	// (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
	// (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403.
	Address string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	// Category, for example, Food.
	Category string `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	// Contextual keywords, for example, Save groceries coupons.
	ContextualKeywords []string `protobuf:"bytes,10,rep,name=contextual_keywords,json=contextualKeywords,proto3" json:"contextual_keywords,omitempty"`
	// Formatted price which can be any characters. If set, this attribute will be
	// used instead of 'price', for example, Starting at $100.00.
	FormattedPrice string `protobuf:"bytes,11,opt,name=formatted_price,json=formattedPrice,proto3" json:"formatted_price,omitempty"`
	// Formatted sale price which can be any characters. If set, this attribute
	// will be used instead of 'sale price', for example, On sale for $80.00.
	FormattedSalePrice string `protobuf:"bytes,12,opt,name=formatted_sale_price,json=formattedSalePrice,proto3" json:"formatted_sale_price,omitempty"`
	// Android deep link, for example,
	// android-app://com.example.android/http/example.com/gizmos?1234.
	AndroidAppLink string `protobuf:"bytes,13,opt,name=android_app_link,json=androidAppLink,proto3" json:"android_app_link,omitempty"`
	// Similar deal IDs, for example, 1275.
	SimilarDealIds []string `protobuf:"bytes,14,rep,name=similar_deal_ids,json=similarDealIds,proto3" json:"similar_deal_ids,omitempty"`
	// iOS deep link, for example, exampleApp://content/page.
	IosAppLink string `protobuf:"bytes,15,opt,name=ios_app_link,json=iosAppLink,proto3" json:"ios_app_link,omitempty"`
	// iOS app store ID. This is used to check if the user has the app installed
	// on their device before deep linking. If this field is set, then the
	// ios_app_link field must also be present.
	IosAppStoreId int64 `protobuf:"varint,16,opt,name=ios_app_store_id,json=iosAppStoreId,proto3" json:"ios_app_store_id,omitempty"`
}

func (x *DynamicLocalAsset) Reset() {
	*x = DynamicLocalAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicLocalAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicLocalAsset) ProtoMessage() {}

func (x *DynamicLocalAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicLocalAsset.ProtoReflect.Descriptor instead.
func (*DynamicLocalAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{30}
}

func (x *DynamicLocalAsset) GetDealId() string {
	if x != nil {
		return x.DealId
	}
	return ""
}

func (x *DynamicLocalAsset) GetDealName() string {
	if x != nil {
		return x.DealName
	}
	return ""
}

func (x *DynamicLocalAsset) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *DynamicLocalAsset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DynamicLocalAsset) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *DynamicLocalAsset) GetSalePrice() string {
	if x != nil {
		return x.SalePrice
	}
	return ""
}

func (x *DynamicLocalAsset) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DynamicLocalAsset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DynamicLocalAsset) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DynamicLocalAsset) GetContextualKeywords() []string {
	if x != nil {
		return x.ContextualKeywords
	}
	return nil
}

func (x *DynamicLocalAsset) GetFormattedPrice() string {
	if x != nil {
		return x.FormattedPrice
	}
	return ""
}

func (x *DynamicLocalAsset) GetFormattedSalePrice() string {
	if x != nil {
		return x.FormattedSalePrice
	}
	return ""
}

func (x *DynamicLocalAsset) GetAndroidAppLink() string {
	if x != nil {
		return x.AndroidAppLink
	}
	return ""
}

func (x *DynamicLocalAsset) GetSimilarDealIds() []string {
	if x != nil {
		return x.SimilarDealIds
	}
	return nil
}

func (x *DynamicLocalAsset) GetIosAppLink() string {
	if x != nil {
		return x.IosAppLink
	}
	return ""
}

func (x *DynamicLocalAsset) GetIosAppStoreId() int64 {
	if x != nil {
		return x.IosAppStoreId
	}
	return 0
}

// A dynamic jobs asset.
type DynamicJobsAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Job ID which can be any sequence of letters and digits, and must
	// be unique and match the values of remarketing tag. Required.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Location ID which can be any sequence of letters and digits. The ID
	// sequence (job ID + location ID) must be unique.
	LocationId string `protobuf:"bytes,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Required. Job title, for example, Software engineer. Required.
	JobTitle string `protobuf:"bytes,3,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	// Job subtitle, for example, Level II.
	JobSubtitle string `protobuf:"bytes,4,opt,name=job_subtitle,json=jobSubtitle,proto3" json:"job_subtitle,omitempty"`
	// Description, for example, Apply your technical skills.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Image URL, for example, http://www.example.com/image.png. The image will
	// not be uploaded as image asset.
	ImageUrl string `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Job category, for example, Technical.
	JobCategory string `protobuf:"bytes,7,opt,name=job_category,json=jobCategory,proto3" json:"job_category,omitempty"`
	// Contextual keywords, for example, Software engineering job.
	ContextualKeywords []string `protobuf:"bytes,8,rep,name=contextual_keywords,json=contextualKeywords,proto3" json:"contextual_keywords,omitempty"`
	// Address which can be specified in one of the following formats.
	// (1) City, state, code, country, for example, Mountain View, CA, USA.
	// (2) Full address, for example, 123 Boulevard St, Mountain View, CA 94043.
	// (3) Latitude-longitude in the DDD format, for example, 41.40338, 2.17403.
	Address string `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	// Salary, for example, $100,000.
	Salary string `protobuf:"bytes,10,opt,name=salary,proto3" json:"salary,omitempty"`
	// Android deep link, for example,
	// android-app://com.example.android/http/example.com/gizmos?1234.
	AndroidAppLink string `protobuf:"bytes,11,opt,name=android_app_link,json=androidAppLink,proto3" json:"android_app_link,omitempty"`
	// Similar job IDs, for example, 1275.
	SimilarJobIds []string `protobuf:"bytes,12,rep,name=similar_job_ids,json=similarJobIds,proto3" json:"similar_job_ids,omitempty"`
	// iOS deep link, for example, exampleApp://content/page.
	IosAppLink string `protobuf:"bytes,13,opt,name=ios_app_link,json=iosAppLink,proto3" json:"ios_app_link,omitempty"`
	// iOS app store ID. This is used to check if the user has the app installed
	// on their device before deep linking. If this field is set, then the
	// ios_app_link field must also be present.
	IosAppStoreId int64 `protobuf:"varint,14,opt,name=ios_app_store_id,json=iosAppStoreId,proto3" json:"ios_app_store_id,omitempty"`
}

func (x *DynamicJobsAsset) Reset() {
	*x = DynamicJobsAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicJobsAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicJobsAsset) ProtoMessage() {}

func (x *DynamicJobsAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicJobsAsset.ProtoReflect.Descriptor instead.
func (*DynamicJobsAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{31}
}

func (x *DynamicJobsAsset) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *DynamicJobsAsset) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *DynamicJobsAsset) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *DynamicJobsAsset) GetJobSubtitle() string {
	if x != nil {
		return x.JobSubtitle
	}
	return ""
}

func (x *DynamicJobsAsset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DynamicJobsAsset) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DynamicJobsAsset) GetJobCategory() string {
	if x != nil {
		return x.JobCategory
	}
	return ""
}

func (x *DynamicJobsAsset) GetContextualKeywords() []string {
	if x != nil {
		return x.ContextualKeywords
	}
	return nil
}

func (x *DynamicJobsAsset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DynamicJobsAsset) GetSalary() string {
	if x != nil {
		return x.Salary
	}
	return ""
}

func (x *DynamicJobsAsset) GetAndroidAppLink() string {
	if x != nil {
		return x.AndroidAppLink
	}
	return ""
}

func (x *DynamicJobsAsset) GetSimilarJobIds() []string {
	if x != nil {
		return x.SimilarJobIds
	}
	return nil
}

func (x *DynamicJobsAsset) GetIosAppLink() string {
	if x != nil {
		return x.IosAppLink
	}
	return ""
}

func (x *DynamicJobsAsset) GetIosAppStoreId() int64 {
	if x != nil {
		return x.IosAppStoreId
	}
	return 0
}

// A location asset.
type LocationAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Place IDs uniquely identify a place in the Google Places database and on
	// Google Maps.
	// This field is unique for a given customer ID and asset type. See
	// https://developers.google.com/places/web-service/place-id to learn more
	// about Place ID.
	PlaceId string `protobuf:"bytes,1,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	// The list of business locations for the customer.
	// This will only be returned if the Location Asset is syncing from the
	// Business Profile account. It is possible to have multiple Business Profile
	// listings under the same account that point to the same Place ID.
	BusinessProfileLocations []*BusinessProfileLocation `protobuf:"bytes,2,rep,name=business_profile_locations,json=businessProfileLocations,proto3" json:"business_profile_locations,omitempty"`
	// The type of location ownership.
	// If the type is BUSINESS_OWNER, it will be served as a location extension.
	// If the type is AFFILIATE, it will be served as an affiliate location.
	LocationOwnershipType enums.LocationOwnershipTypeEnum_LocationOwnershipType `protobuf:"varint,3,opt,name=location_ownership_type,json=locationOwnershipType,proto3,enum=google.ads.googleads.v15.enums.LocationOwnershipTypeEnum_LocationOwnershipType" json:"location_ownership_type,omitempty"`
}

func (x *LocationAsset) Reset() {
	*x = LocationAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationAsset) ProtoMessage() {}

func (x *LocationAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationAsset.ProtoReflect.Descriptor instead.
func (*LocationAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{32}
}

func (x *LocationAsset) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *LocationAsset) GetBusinessProfileLocations() []*BusinessProfileLocation {
	if x != nil {
		return x.BusinessProfileLocations
	}
	return nil
}

func (x *LocationAsset) GetLocationOwnershipType() enums.LocationOwnershipTypeEnum_LocationOwnershipType {
	if x != nil {
		return x.LocationOwnershipType
	}
	return enums.LocationOwnershipTypeEnum_LocationOwnershipType(0)
}

// Business Profile location data synced from the linked Business Profile
// account.
type BusinessProfileLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Advertiser specified label for the location on the Business Profile
	// account. This is synced from the Business Profile account.
	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// Business Profile store code of this location. This is synced from the
	// Business Profile account.
	StoreCode string `protobuf:"bytes,2,opt,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
	// Listing ID of this Business Profile location. This is synced from the
	// linked Business Profile account.
	ListingId int64 `protobuf:"varint,3,opt,name=listing_id,json=listingId,proto3" json:"listing_id,omitempty"`
}

func (x *BusinessProfileLocation) Reset() {
	*x = BusinessProfileLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessProfileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessProfileLocation) ProtoMessage() {}

func (x *BusinessProfileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessProfileLocation.ProtoReflect.Descriptor instead.
func (*BusinessProfileLocation) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{33}
}

func (x *BusinessProfileLocation) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *BusinessProfileLocation) GetStoreCode() string {
	if x != nil {
		return x.StoreCode
	}
	return ""
}

func (x *BusinessProfileLocation) GetListingId() int64 {
	if x != nil {
		return x.ListingId
	}
	return 0
}

// A hotel property asset.
type HotelPropertyAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Place IDs uniquely identify a place in the Google Places database and on
	// Google Maps. See https://developers.google.com/places/web-service/place-id
	// to learn more.
	PlaceId string `protobuf:"bytes,1,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	// Address of the hotel. Read-only.
	HotelAddress string `protobuf:"bytes,2,opt,name=hotel_address,json=hotelAddress,proto3" json:"hotel_address,omitempty"`
	// Name of the hotel. Read-only.
	HotelName string `protobuf:"bytes,3,opt,name=hotel_name,json=hotelName,proto3" json:"hotel_name,omitempty"`
}

func (x *HotelPropertyAsset) Reset() {
	*x = HotelPropertyAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotelPropertyAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotelPropertyAsset) ProtoMessage() {}

func (x *HotelPropertyAsset) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotelPropertyAsset.ProtoReflect.Descriptor instead.
func (*HotelPropertyAsset) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP(), []int{34}
}

func (x *HotelPropertyAsset) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *HotelPropertyAsset) GetHotelAddress() string {
	if x != nil {
		return x.HotelAddress
	}
	return ""
}

func (x *HotelPropertyAsset) GetHotelName() string {
	if x != nil {
		return x.HotelName
	}
	return ""
}

var File_google_ads_googleads_v15_common_asset_types_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v15_common_asset_types_proto_rawDesc = []byte{
	0x0a, 0x31, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x65, 0x61, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x4e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6d,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x79, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x79, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x22, 0x34, 0x0a,
	0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x80, 0x02, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4c, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0c, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70, 0x69, 0x78,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x69,
	0x78, 0x65, 0x6c, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70,
	0x69, 0x78, 0x65, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x2d, 0x0a,
	0x09, 0x54, 0x65, 0x78, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x92, 0x0a, 0x0a,
	0x0d, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x28,
	0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x13, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x6c,
	0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x63,
	0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x15, 0x70, 0x6f, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x72, 0x0a,
	0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x14, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x62, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x1f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x50, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x70, 0x6f, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x76, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x22, 0xba, 0x02, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x78, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x72, 0x0a,
	0x15, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x13, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x11, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x80,
	0x02, 0x0a, 0x1b, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x72, 0x0a, 0x15, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x11, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x22, 0x37, 0x0a, 0x1b, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x7a, 0x0a, 0x16, 0x4c, 0x65,
	0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x14, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x92, 0x07, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x08, 0x6f, 0x63, 0x63, 0x61, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x63, 0x63,
	0x61, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x63, 0x63, 0x61,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a,
	0x13, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66,
	0x66, 0x12, 0x52, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x66, 0x66, 0x12, 0x27, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56,
	0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x48, 0x01, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xd1, 0x01, 0x0a,
	0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a,
	0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x5f, 0x0a, 0x13, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x22, 0x52, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x0d, 0x53, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x6e,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x61, 0x64,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x0d, 0x50,
	0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0xad, 0x04, 0x0a, 0x15, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27,
	0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41,
	0x70, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x48, 0x6f, 0x74, 0x65, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc9,
	0x03, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xa4, 0x01, 0x0a,
	0x1f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x1c, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x13, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xfc, 0x02, 0x0a, 0x0a, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x57, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x0d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x6b, 0x0a,
	0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x04, 0x0a, 0x16, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x45, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6f, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x10, 0x69,
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x73, 0x22, 0xeb, 0x04, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x32, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x74,
	0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41,
	0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f,
	0x73, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x97, 0x05, 0x0a, 0x1c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x48, 0x6f,
	0x74, 0x65, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x41,
	0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65,
	0x64, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0xf9, 0x04, 0x0a,
	0x13, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x12, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x27, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xa6, 0x02, 0x0a, 0x1a, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x1e,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x9c, 0x05, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70,
	0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73,
	0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x22, 0xc4, 0x04, 0x0a, 0x11, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x64, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x53,
	0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27,
	0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0xf6, 0x03, 0x0a, 0x10, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4a, 0x6f, 0x62, 0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6a, 0x6f, 0x62,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x4a,
	0x6f, 0x62, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x73,
	0x41, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x22, 0xac, 0x02, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x76, 0x0a,
	0x1a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6f, 0x0a, 0x17, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x22, 0x73, 0x0a, 0x12, 0x48, 0x6f, 0x74, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x74, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0xef, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x0f, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x1f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31, 0x35, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xca,
	0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x35, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0xea, 0x02, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a,
	0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x35, 0x3a,
	0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_googleads_v15_common_asset_types_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v15_common_asset_types_proto_rawDescData = file_google_ads_googleads_v15_common_asset_types_proto_rawDesc
)

func file_google_ads_googleads_v15_common_asset_types_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v15_common_asset_types_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v15_common_asset_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v15_common_asset_types_proto_rawDescData)
	})
	return file_google_ads_googleads_v15_common_asset_types_proto_rawDescData
}

var file_google_ads_googleads_v15_common_asset_types_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_google_ads_googleads_v15_common_asset_types_proto_goTypes = []interface{}{
	(*YoutubeVideoAsset)(nil),            // 0: google.ads.googleads.v15.common.YoutubeVideoAsset
	(*MediaBundleAsset)(nil),             // 1: google.ads.googleads.v15.common.MediaBundleAsset
	(*ImageAsset)(nil),                   // 2: google.ads.googleads.v15.common.ImageAsset
	(*ImageDimension)(nil),               // 3: google.ads.googleads.v15.common.ImageDimension
	(*TextAsset)(nil),                    // 4: google.ads.googleads.v15.common.TextAsset
	(*LeadFormAsset)(nil),                // 5: google.ads.googleads.v15.common.LeadFormAsset
	(*LeadFormField)(nil),                // 6: google.ads.googleads.v15.common.LeadFormField
	(*LeadFormCustomQuestionField)(nil),  // 7: google.ads.googleads.v15.common.LeadFormCustomQuestionField
	(*LeadFormSingleChoiceAnswers)(nil),  // 8: google.ads.googleads.v15.common.LeadFormSingleChoiceAnswers
	(*LeadFormDeliveryMethod)(nil),       // 9: google.ads.googleads.v15.common.LeadFormDeliveryMethod
	(*WebhookDelivery)(nil),              // 10: google.ads.googleads.v15.common.WebhookDelivery
	(*BookOnGoogleAsset)(nil),            // 11: google.ads.googleads.v15.common.BookOnGoogleAsset
	(*PromotionAsset)(nil),               // 12: google.ads.googleads.v15.common.PromotionAsset
	(*CalloutAsset)(nil),                 // 13: google.ads.googleads.v15.common.CalloutAsset
	(*StructuredSnippetAsset)(nil),       // 14: google.ads.googleads.v15.common.StructuredSnippetAsset
	(*SitelinkAsset)(nil),                // 15: google.ads.googleads.v15.common.SitelinkAsset
	(*PageFeedAsset)(nil),                // 16: google.ads.googleads.v15.common.PageFeedAsset
	(*DynamicEducationAsset)(nil),        // 17: google.ads.googleads.v15.common.DynamicEducationAsset
	(*MobileAppAsset)(nil),               // 18: google.ads.googleads.v15.common.MobileAppAsset
	(*HotelCalloutAsset)(nil),            // 19: google.ads.googleads.v15.common.HotelCalloutAsset
	(*CallAsset)(nil),                    // 20: google.ads.googleads.v15.common.CallAsset
	(*PriceAsset)(nil),                   // 21: google.ads.googleads.v15.common.PriceAsset
	(*PriceOffering)(nil),                // 22: google.ads.googleads.v15.common.PriceOffering
	(*CallToActionAsset)(nil),            // 23: google.ads.googleads.v15.common.CallToActionAsset
	(*DynamicRealEstateAsset)(nil),       // 24: google.ads.googleads.v15.common.DynamicRealEstateAsset
	(*DynamicCustomAsset)(nil),           // 25: google.ads.googleads.v15.common.DynamicCustomAsset
	(*DynamicHotelsAndRentalsAsset)(nil), // 26: google.ads.googleads.v15.common.DynamicHotelsAndRentalsAsset
	(*DynamicFlightsAsset)(nil),          // 27: google.ads.googleads.v15.common.DynamicFlightsAsset
	(*DiscoveryCarouselCardAsset)(nil),   // 28: google.ads.googleads.v15.common.DiscoveryCarouselCardAsset
	(*DynamicTravelAsset)(nil),           // 29: google.ads.googleads.v15.common.DynamicTravelAsset
	(*DynamicLocalAsset)(nil),            // 30: google.ads.googleads.v15.common.DynamicLocalAsset
	(*DynamicJobsAsset)(nil),             // 31: google.ads.googleads.v15.common.DynamicJobsAsset
	(*LocationAsset)(nil),                // 32: google.ads.googleads.v15.common.LocationAsset
	(*BusinessProfileLocation)(nil),      // 33: google.ads.googleads.v15.common.BusinessProfileLocation
	(*HotelPropertyAsset)(nil),           // 34: google.ads.googleads.v15.common.HotelPropertyAsset
	(enums.MimeTypeEnum_MimeType)(0),     // 35: google.ads.googleads.v15.enums.MimeTypeEnum.MimeType
	(enums.LeadFormCallToActionTypeEnum_LeadFormCallToActionType)(0),                     // 36: google.ads.googleads.v15.enums.LeadFormCallToActionTypeEnum.LeadFormCallToActionType
	(enums.LeadFormPostSubmitCallToActionTypeEnum_LeadFormPostSubmitCallToActionType)(0), // 37: google.ads.googleads.v15.enums.LeadFormPostSubmitCallToActionTypeEnum.LeadFormPostSubmitCallToActionType
	(enums.LeadFormDesiredIntentEnum_LeadFormDesiredIntent)(0),                           // 38: google.ads.googleads.v15.enums.LeadFormDesiredIntentEnum.LeadFormDesiredIntent
	(enums.LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType)(0),                 // 39: google.ads.googleads.v15.enums.LeadFormFieldUserInputTypeEnum.LeadFormFieldUserInputType
	(enums.PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier)(0), // 40: google.ads.googleads.v15.enums.PromotionExtensionDiscountModifierEnum.PromotionExtensionDiscountModifier
	(enums.PromotionExtensionOccasionEnum_PromotionExtensionOccasion)(0),                 // 41: google.ads.googleads.v15.enums.PromotionExtensionOccasionEnum.PromotionExtensionOccasion
	(*AdScheduleInfo)(nil), // 42: google.ads.googleads.v15.common.AdScheduleInfo
	(*Money)(nil),          // 43: google.ads.googleads.v15.common.Money
	(enums.MobileAppVendorEnum_MobileAppVendor)(0),                           // 44: google.ads.googleads.v15.enums.MobileAppVendorEnum.MobileAppVendor
	(enums.CallConversionReportingStateEnum_CallConversionReportingState)(0), // 45: google.ads.googleads.v15.enums.CallConversionReportingStateEnum.CallConversionReportingState
	(enums.PriceExtensionTypeEnum_PriceExtensionType)(0),                     // 46: google.ads.googleads.v15.enums.PriceExtensionTypeEnum.PriceExtensionType
	(enums.PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier)(0), // 47: google.ads.googleads.v15.enums.PriceExtensionPriceQualifierEnum.PriceExtensionPriceQualifier
	(enums.PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit)(0),           // 48: google.ads.googleads.v15.enums.PriceExtensionPriceUnitEnum.PriceExtensionPriceUnit
	(enums.CallToActionTypeEnum_CallToActionType)(0),                         // 49: google.ads.googleads.v15.enums.CallToActionTypeEnum.CallToActionType
	(enums.LocationOwnershipTypeEnum_LocationOwnershipType)(0),               // 50: google.ads.googleads.v15.enums.LocationOwnershipTypeEnum.LocationOwnershipType
}
var file_google_ads_googleads_v15_common_asset_types_proto_depIdxs = []int32{
	35, // 0: google.ads.googleads.v15.common.ImageAsset.mime_type:type_name -> google.ads.googleads.v15.enums.MimeTypeEnum.MimeType
	3,  // 1: google.ads.googleads.v15.common.ImageAsset.full_size:type_name -> google.ads.googleads.v15.common.ImageDimension
	36, // 2: google.ads.googleads.v15.common.LeadFormAsset.call_to_action_type:type_name -> google.ads.googleads.v15.enums.LeadFormCallToActionTypeEnum.LeadFormCallToActionType
	6,  // 3: google.ads.googleads.v15.common.LeadFormAsset.fields:type_name -> google.ads.googleads.v15.common.LeadFormField
	7,  // 4: google.ads.googleads.v15.common.LeadFormAsset.custom_question_fields:type_name -> google.ads.googleads.v15.common.LeadFormCustomQuestionField
	9,  // 5: google.ads.googleads.v15.common.LeadFormAsset.delivery_methods:type_name -> google.ads.googleads.v15.common.LeadFormDeliveryMethod
	37, // 6: google.ads.googleads.v15.common.LeadFormAsset.post_submit_call_to_action_type:type_name -> google.ads.googleads.v15.enums.LeadFormPostSubmitCallToActionTypeEnum.LeadFormPostSubmitCallToActionType
	38, // 7: google.ads.googleads.v15.common.LeadFormAsset.desired_intent:type_name -> google.ads.googleads.v15.enums.LeadFormDesiredIntentEnum.LeadFormDesiredIntent
	39, // 8: google.ads.googleads.v15.common.LeadFormField.input_type:type_name -> google.ads.googleads.v15.enums.LeadFormFieldUserInputTypeEnum.LeadFormFieldUserInputType
	8,  // 9: google.ads.googleads.v15.common.LeadFormField.single_choice_answers:type_name -> google.ads.googleads.v15.common.LeadFormSingleChoiceAnswers
	8,  // 10: google.ads.googleads.v15.common.LeadFormCustomQuestionField.single_choice_answers:type_name -> google.ads.googleads.v15.common.LeadFormSingleChoiceAnswers
	10, // 11: google.ads.googleads.v15.common.LeadFormDeliveryMethod.webhook:type_name -> google.ads.googleads.v15.common.WebhookDelivery
	40, // 12: google.ads.googleads.v15.common.PromotionAsset.discount_modifier:type_name -> google.ads.googleads.v15.enums.PromotionExtensionDiscountModifierEnum.PromotionExtensionDiscountModifier
	41, // 13: google.ads.googleads.v15.common.PromotionAsset.occasion:type_name -> google.ads.googleads.v15.enums.PromotionExtensionOccasionEnum.PromotionExtensionOccasion
	42, // 14: google.ads.googleads.v15.common.PromotionAsset.ad_schedule_targets:type_name -> google.ads.googleads.v15.common.AdScheduleInfo
	43, // 15: google.ads.googleads.v15.common.PromotionAsset.money_amount_off:type_name -> google.ads.googleads.v15.common.Money
	43, // 16: google.ads.googleads.v15.common.PromotionAsset.orders_over_amount:type_name -> google.ads.googleads.v15.common.Money
	42, // 17: google.ads.googleads.v15.common.CalloutAsset.ad_schedule_targets:type_name -> google.ads.googleads.v15.common.AdScheduleInfo
	42, // 18: google.ads.googleads.v15.common.SitelinkAsset.ad_schedule_targets:type_name -> google.ads.googleads.v15.common.AdScheduleInfo
	44, // 19: google.ads.googleads.v15.common.MobileAppAsset.app_store:type_name -> google.ads.googleads.v15.enums.MobileAppVendorEnum.MobileAppVendor
	45, // 20: google.ads.googleads.v15.common.CallAsset.call_conversion_reporting_state:type_name -> google.ads.googleads.v15.enums.CallConversionReportingStateEnum.CallConversionReportingState
	42, // 21: google.ads.googleads.v15.common.CallAsset.ad_schedule_targets:type_name -> google.ads.googleads.v15.common.AdScheduleInfo
	46, // 22: google.ads.googleads.v15.common.PriceAsset.type:type_name -> google.ads.googleads.v15.enums.PriceExtensionTypeEnum.PriceExtensionType
	47, // 23: google.ads.googleads.v15.common.PriceAsset.price_qualifier:type_name -> google.ads.googleads.v15.enums.PriceExtensionPriceQualifierEnum.PriceExtensionPriceQualifier
	22, // 24: google.ads.googleads.v15.common.PriceAsset.price_offerings:type_name -> google.ads.googleads.v15.common.PriceOffering
	43, // 25: google.ads.googleads.v15.common.PriceOffering.price:type_name -> google.ads.googleads.v15.common.Money
	48, // 26: google.ads.googleads.v15.common.PriceOffering.unit:type_name -> google.ads.googleads.v15.enums.PriceExtensionPriceUnitEnum.PriceExtensionPriceUnit
	49, // 27: google.ads.googleads.v15.common.CallToActionAsset.call_to_action:type_name -> google.ads.googleads.v15.enums.CallToActionTypeEnum.CallToActionType
	33, // 28: google.ads.googleads.v15.common.LocationAsset.business_profile_locations:type_name -> google.ads.googleads.v15.common.BusinessProfileLocation
	50, // 29: google.ads.googleads.v15.common.LocationAsset.location_ownership_type:type_name -> google.ads.googleads.v15.enums.LocationOwnershipTypeEnum.LocationOwnershipType
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v15_common_asset_types_proto_init() }
func file_google_ads_googleads_v15_common_asset_types_proto_init() {
	if File_google_ads_googleads_v15_common_asset_types_proto != nil {
		return
	}
	file_google_ads_googleads_v15_common_criteria_proto_init()
	file_google_ads_googleads_v15_common_feed_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YoutubeVideoAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaBundleAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadFormAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadFormField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadFormCustomQuestionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadFormSingleChoiceAnswers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadFormDeliveryMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookDelivery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookOnGoogleAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotionAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalloutAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredSnippetAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SitelinkAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageFeedAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicEducationAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobileAppAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotelCalloutAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceOffering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallToActionAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicRealEstateAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicCustomAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicHotelsAndRentalsAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicFlightsAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveryCarouselCardAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicTravelAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicLocalAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicJobsAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessProfileLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotelPropertyAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*LeadFormField_SingleChoiceAnswers)(nil),
		(*LeadFormField_HasLocationAnswer)(nil),
	}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*LeadFormCustomQuestionField_SingleChoiceAnswers)(nil),
		(*LeadFormCustomQuestionField_HasLocationAnswer)(nil),
	}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*LeadFormDeliveryMethod_Webhook)(nil),
	}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_common_asset_types_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*PromotionAsset_PercentOff)(nil),
		(*PromotionAsset_MoneyAmountOff)(nil),
		(*PromotionAsset_PromotionCode)(nil),
		(*PromotionAsset_OrdersOverAmount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v15_common_asset_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v15_common_asset_types_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v15_common_asset_types_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v15_common_asset_types_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v15_common_asset_types_proto = out.File
	file_google_ads_googleads_v15_common_asset_types_proto_rawDesc = nil
	file_google_ads_googleads_v15_common_asset_types_proto_goTypes = nil
	file_google_ads_googleads_v15_common_asset_types_proto_depIdxs = nil
}
