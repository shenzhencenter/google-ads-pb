// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.1
// source: google/ads/googleads/v15/services/audience_insights_service.proto

package services

import (
	common "github.com/Optable/google-ads-pb/protogen/common"
	enums "github.com/Optable/google-ads-pb/protogen/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [AudienceInsightsService.GenerateInsightsFinderReport][google.ads.googleads.v15.services.AudienceInsightsService.GenerateInsightsFinderReport].
type GenerateInsightsFinderReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. A baseline audience for this report, typically all people in a
	// region.
	BaselineAudience *BasicInsightsAudience `protobuf:"bytes,2,opt,name=baseline_audience,json=baselineAudience,proto3" json:"baseline_audience,omitempty"`
	// Required. The specific audience of interest for this report.  The insights
	// in the report will be based on attributes more prevalent in this audience
	// than in the report's baseline audience.
	SpecificAudience *BasicInsightsAudience `protobuf:"bytes,3,opt,name=specific_audience,json=specificAudience,proto3" json:"specific_audience,omitempty"`
	// The name of the customer being planned for.  This is a user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,4,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
}

func (x *GenerateInsightsFinderReportRequest) Reset() {
	*x = GenerateInsightsFinderReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateInsightsFinderReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateInsightsFinderReportRequest) ProtoMessage() {}

func (x *GenerateInsightsFinderReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateInsightsFinderReportRequest.ProtoReflect.Descriptor instead.
func (*GenerateInsightsFinderReportRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateInsightsFinderReportRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateInsightsFinderReportRequest) GetBaselineAudience() *BasicInsightsAudience {
	if x != nil {
		return x.BaselineAudience
	}
	return nil
}

func (x *GenerateInsightsFinderReportRequest) GetSpecificAudience() *BasicInsightsAudience {
	if x != nil {
		return x.SpecificAudience
	}
	return nil
}

func (x *GenerateInsightsFinderReportRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

// The response message for
// [AudienceInsightsService.GenerateInsightsFinderReport][google.ads.googleads.v15.services.AudienceInsightsService.GenerateInsightsFinderReport],
// containing the shareable URL for the report.
type GenerateInsightsFinderReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An HTTPS URL providing a deep link into the Insights Finder UI with the
	// report inputs filled in according to the request.
	SavedReportUrl string `protobuf:"bytes,1,opt,name=saved_report_url,json=savedReportUrl,proto3" json:"saved_report_url,omitempty"`
}

func (x *GenerateInsightsFinderReportResponse) Reset() {
	*x = GenerateInsightsFinderReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateInsightsFinderReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateInsightsFinderReportResponse) ProtoMessage() {}

func (x *GenerateInsightsFinderReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateInsightsFinderReportResponse.ProtoReflect.Descriptor instead.
func (*GenerateInsightsFinderReportResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateInsightsFinderReportResponse) GetSavedReportUrl() string {
	if x != nil {
		return x.SavedReportUrl
	}
	return ""
}

// Request message for
// [AudienceInsightsService.GenerateAudienceCompositionInsights][google.ads.googleads.v15.services.AudienceInsightsService.GenerateAudienceCompositionInsights].
type GenerateAudienceCompositionInsightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. The audience of interest for which insights are being requested.
	Audience *InsightsAudience `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
	// The baseline audience to which the audience of interest is being
	// compared.
	BaselineAudience *InsightsAudience `protobuf:"bytes,6,opt,name=baseline_audience,json=baselineAudience,proto3" json:"baseline_audience,omitempty"`
	// The one-month range of historical data to use for insights, in the format
	// "yyyy-mm". If unset, insights will be returned for the last thirty days of
	// data.
	DataMonth string `protobuf:"bytes,3,opt,name=data_month,json=dataMonth,proto3" json:"data_month,omitempty"`
	// Required. The audience dimensions for which composition insights should be
	// returned.
	Dimensions []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,4,rep,packed,name=dimensions,proto3,enum=google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimensions,omitempty"`
	// The name of the customer being planned for.  This is a user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,5,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
}

func (x *GenerateAudienceCompositionInsightsRequest) Reset() {
	*x = GenerateAudienceCompositionInsightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAudienceCompositionInsightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAudienceCompositionInsightsRequest) ProtoMessage() {}

func (x *GenerateAudienceCompositionInsightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAudienceCompositionInsightsRequest.ProtoReflect.Descriptor instead.
func (*GenerateAudienceCompositionInsightsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{2}
}

func (x *GenerateAudienceCompositionInsightsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateAudienceCompositionInsightsRequest) GetAudience() *InsightsAudience {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *GenerateAudienceCompositionInsightsRequest) GetBaselineAudience() *InsightsAudience {
	if x != nil {
		return x.BaselineAudience
	}
	return nil
}

func (x *GenerateAudienceCompositionInsightsRequest) GetDataMonth() string {
	if x != nil {
		return x.DataMonth
	}
	return ""
}

func (x *GenerateAudienceCompositionInsightsRequest) GetDimensions() []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GenerateAudienceCompositionInsightsRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

// Response message for
// [AudienceInsightsService.GenerateAudienceCompositionInsights][google.ads.googleads.v15.services.AudienceInsightsService.GenerateAudienceCompositionInsights].
type GenerateAudienceCompositionInsightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contents of the insights report, organized into sections.
	// Each section is associated with one of the AudienceInsightsDimension values
	// in the request. There may be more than one section per dimension.
	Sections []*AudienceCompositionSection `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
}

func (x *GenerateAudienceCompositionInsightsResponse) Reset() {
	*x = GenerateAudienceCompositionInsightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAudienceCompositionInsightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAudienceCompositionInsightsResponse) ProtoMessage() {}

func (x *GenerateAudienceCompositionInsightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAudienceCompositionInsightsResponse.ProtoReflect.Descriptor instead.
func (*GenerateAudienceCompositionInsightsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateAudienceCompositionInsightsResponse) GetSections() []*AudienceCompositionSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

// Request message for
// [AudienceInsightsService.GenerateSuggestedTargetingInsights][google.ads.googleads.v15.services.AudienceInsightsService.GenerateSuggestedTargetingInsights].
type GenerateSuggestedTargetingInsightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. The audience of interest for which insights are being requested.
	Audience *InsightsAudience `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
	// Optional. The baseline audience.  The default, if unspecified, is all
	// people in the same country as the audience of interest.
	BaselineAudience *InsightsAudience `protobuf:"bytes,3,opt,name=baseline_audience,json=baselineAudience,proto3" json:"baseline_audience,omitempty"`
	// Optional. The one-month range of historical data to use for insights, in
	// the format "yyyy-mm". If unset, insights will be returned for the last
	// thirty days of data.
	DataMonth string `protobuf:"bytes,4,opt,name=data_month,json=dataMonth,proto3" json:"data_month,omitempty"`
	// Optional. The name of the customer being planned for.  This is a
	// user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,5,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
}

func (x *GenerateSuggestedTargetingInsightsRequest) Reset() {
	*x = GenerateSuggestedTargetingInsightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSuggestedTargetingInsightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSuggestedTargetingInsightsRequest) ProtoMessage() {}

func (x *GenerateSuggestedTargetingInsightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSuggestedTargetingInsightsRequest.ProtoReflect.Descriptor instead.
func (*GenerateSuggestedTargetingInsightsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetAudience() *InsightsAudience {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetBaselineAudience() *InsightsAudience {
	if x != nil {
		return x.BaselineAudience
	}
	return nil
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetDataMonth() string {
	if x != nil {
		return x.DataMonth
	}
	return ""
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

// Response message for
// [AudienceInsightsService.GenerateSuggestedTargetingInsights][google.ads.googleads.v15.services.AudienceInsightsService.GenerateSuggestedTargetingInsights].
type GenerateSuggestedTargetingInsightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Suggested insights for targetable audiences.
	Suggestions []*TargetingSuggestionMetrics `protobuf:"bytes,1,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
}

func (x *GenerateSuggestedTargetingInsightsResponse) Reset() {
	*x = GenerateSuggestedTargetingInsightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSuggestedTargetingInsightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSuggestedTargetingInsightsResponse) ProtoMessage() {}

func (x *GenerateSuggestedTargetingInsightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSuggestedTargetingInsightsResponse.ProtoReflect.Descriptor instead.
func (*GenerateSuggestedTargetingInsightsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateSuggestedTargetingInsightsResponse) GetSuggestions() []*TargetingSuggestionMetrics {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

// A suggested targetable audience relevant to the requested audience.
type TargetingSuggestionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Suggested location targeting.  These attributes all have dimension
	// GEO_TARGET_COUNTRY or SUB_COUNTRY_LOCATION
	Locations []*AudienceInsightsAttributeMetadata `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	// Suggested age targeting; may be empty indicating no age targeting.
	AgeRanges []*common.AgeRangeInfo `protobuf:"bytes,2,rep,name=age_ranges,json=ageRanges,proto3" json:"age_ranges,omitempty"`
	// Suggested gender targeting.  If present, this attribute has dimension
	// GENDER.
	Gender *common.GenderInfo `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	// Suggested audience segments to target.  These attributes all have dimension
	// AFFINITY_USER_INTEREST or IN_MARKET_USER_INTEREST
	UserInterests []*AudienceInsightsAttributeMetadata `protobuf:"bytes,4,rep,name=user_interests,json=userInterests,proto3" json:"user_interests,omitempty"`
	// The fraction (from 0 to 1 inclusive) of the requested audience that can be
	// reached using the suggested targeting.
	Coverage float64 `protobuf:"fixed64,5,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// The ratio of coverage to the coverage of the baseline audience or zero if
	// this ratio is undefined or is not meaningful.
	Index float64 `protobuf:"fixed64,6,opt,name=index,proto3" json:"index,omitempty"`
	// The approximate estimated number of people that can be reached on YouTube
	// using this targeting.
	PotentialYoutubeReach int64 `protobuf:"varint,7,opt,name=potential_youtube_reach,json=potentialYoutubeReach,proto3" json:"potential_youtube_reach,omitempty"`
}

func (x *TargetingSuggestionMetrics) Reset() {
	*x = TargetingSuggestionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetingSuggestionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetingSuggestionMetrics) ProtoMessage() {}

func (x *TargetingSuggestionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetingSuggestionMetrics.ProtoReflect.Descriptor instead.
func (*TargetingSuggestionMetrics) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{6}
}

func (x *TargetingSuggestionMetrics) GetLocations() []*AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetAgeRanges() []*common.AgeRangeInfo {
	if x != nil {
		return x.AgeRanges
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetGender() *common.GenderInfo {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetUserInterests() []*AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.UserInterests
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetCoverage() float64 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

func (x *TargetingSuggestionMetrics) GetIndex() float64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TargetingSuggestionMetrics) GetPotentialYoutubeReach() int64 {
	if x != nil {
		return x.PotentialYoutubeReach
	}
	return 0
}

// Request message for
// [AudienceInsightsService.ListAudienceInsightsAttributes][google.ads.googleads.v15.services.AudienceInsightsService.ListAudienceInsightsAttributes].
type ListAudienceInsightsAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. The types of attributes to be returned.
	Dimensions []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,2,rep,packed,name=dimensions,proto3,enum=google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimensions,omitempty"`
	// Required. A free text query.  If the requested dimensions include
	// Attributes CATEGORY or KNOWLEDGE_GRAPH, then the attributes returned for
	// those dimensions will match or be related to this string.  For other
	// dimensions, this field is ignored and all available attributes are
	// returned.
	QueryText string `protobuf:"bytes,3,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	// The name of the customer being planned for.  This is a user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,4,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
	// If SUB_COUNTRY_LOCATION attributes are one of the requested dimensions and
	// this field is present, then the SUB_COUNTRY_LOCATION attributes returned
	// will be located in these countries. If this field is absent, then location
	// attributes are not filtered by country. Setting this field when
	// SUB_COUNTRY_LOCATION attributes are not requested will return an error.
	LocationCountryFilters []*common.LocationInfo `protobuf:"bytes,5,rep,name=location_country_filters,json=locationCountryFilters,proto3" json:"location_country_filters,omitempty"`
}

func (x *ListAudienceInsightsAttributesRequest) Reset() {
	*x = ListAudienceInsightsAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAudienceInsightsAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAudienceInsightsAttributesRequest) ProtoMessage() {}

func (x *ListAudienceInsightsAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAudienceInsightsAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListAudienceInsightsAttributesRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListAudienceInsightsAttributesRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ListAudienceInsightsAttributesRequest) GetDimensions() []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ListAudienceInsightsAttributesRequest) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *ListAudienceInsightsAttributesRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

func (x *ListAudienceInsightsAttributesRequest) GetLocationCountryFilters() []*common.LocationInfo {
	if x != nil {
		return x.LocationCountryFilters
	}
	return nil
}

// Response message for
// [AudienceInsightsService.ListAudienceInsightsAttributes][google.ads.googleads.v15.services.AudienceInsightsService.ListAudienceInsightsAttributes].
type ListAudienceInsightsAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attributes matching the search query.
	Attributes []*AudienceInsightsAttributeMetadata `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ListAudienceInsightsAttributesResponse) Reset() {
	*x = ListAudienceInsightsAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAudienceInsightsAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAudienceInsightsAttributesResponse) ProtoMessage() {}

func (x *ListAudienceInsightsAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAudienceInsightsAttributesResponse.ProtoReflect.Descriptor instead.
func (*ListAudienceInsightsAttributesResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListAudienceInsightsAttributesResponse) GetAttributes() []*AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Request message for
// [AudienceInsightsService.ListInsightsEligibleDates][google.ads.googleads.v15.services.AudienceInsightsService.ListInsightsEligibleDates].
type ListInsightsEligibleDatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListInsightsEligibleDatesRequest) Reset() {
	*x = ListInsightsEligibleDatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInsightsEligibleDatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInsightsEligibleDatesRequest) ProtoMessage() {}

func (x *ListInsightsEligibleDatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInsightsEligibleDatesRequest.ProtoReflect.Descriptor instead.
func (*ListInsightsEligibleDatesRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{9}
}

// Response message for
// [AudienceInsightsService.ListInsightsEligibleDates][google.ads.googleads.v15.services.AudienceInsightsService.ListInsightsEligibleDates].
type ListInsightsEligibleDatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The months for which AudienceInsights data is currently
	// available, each represented as a string in the form "YYYY-MM".
	DataMonths []string `protobuf:"bytes,1,rep,name=data_months,json=dataMonths,proto3" json:"data_months,omitempty"`
	// The actual dates covered by the "last 30 days" date range that will be used
	// implicitly for
	// [AudienceInsightsService.GenerateAudienceCompositionInsights][google.ads.googleads.v15.services.AudienceInsightsService.GenerateAudienceCompositionInsights]
	// requests that have no data_month set.
	LastThirtyDays *common.DateRange `protobuf:"bytes,2,opt,name=last_thirty_days,json=lastThirtyDays,proto3" json:"last_thirty_days,omitempty"`
}

func (x *ListInsightsEligibleDatesResponse) Reset() {
	*x = ListInsightsEligibleDatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInsightsEligibleDatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInsightsEligibleDatesResponse) ProtoMessage() {}

func (x *ListInsightsEligibleDatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInsightsEligibleDatesResponse.ProtoReflect.Descriptor instead.
func (*ListInsightsEligibleDatesResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListInsightsEligibleDatesResponse) GetDataMonths() []string {
	if x != nil {
		return x.DataMonths
	}
	return nil
}

func (x *ListInsightsEligibleDatesResponse) GetLastThirtyDays() *common.DateRange {
	if x != nil {
		return x.LastThirtyDays
	}
	return nil
}

// An audience attribute that can be used to request insights about the
// audience.
type AudienceInsightsAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An audience attribute.
	//
	// Types that are assignable to Attribute:
	//
	//	*AudienceInsightsAttribute_AgeRange
	//	*AudienceInsightsAttribute_Gender
	//	*AudienceInsightsAttribute_Location
	//	*AudienceInsightsAttribute_UserInterest
	//	*AudienceInsightsAttribute_Entity
	//	*AudienceInsightsAttribute_Category
	//	*AudienceInsightsAttribute_DynamicLineup
	//	*AudienceInsightsAttribute_ParentalStatus
	//	*AudienceInsightsAttribute_IncomeRange
	//	*AudienceInsightsAttribute_YoutubeChannel
	Attribute isAudienceInsightsAttribute_Attribute `protobuf_oneof:"attribute"`
}

func (x *AudienceInsightsAttribute) Reset() {
	*x = AudienceInsightsAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsAttribute) ProtoMessage() {}

func (x *AudienceInsightsAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsAttribute.ProtoReflect.Descriptor instead.
func (*AudienceInsightsAttribute) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{11}
}

func (m *AudienceInsightsAttribute) GetAttribute() isAudienceInsightsAttribute_Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetAgeRange() *common.AgeRangeInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_AgeRange); ok {
		return x.AgeRange
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetGender() *common.GenderInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_Gender); ok {
		return x.Gender
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetLocation() *common.LocationInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_Location); ok {
		return x.Location
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetUserInterest() *common.UserInterestInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_UserInterest); ok {
		return x.UserInterest
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetEntity() *AudienceInsightsEntity {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_Entity); ok {
		return x.Entity
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetCategory() *AudienceInsightsCategory {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_Category); ok {
		return x.Category
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetDynamicLineup() *AudienceInsightsDynamicLineup {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_DynamicLineup); ok {
		return x.DynamicLineup
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetParentalStatus() *common.ParentalStatusInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_ParentalStatus); ok {
		return x.ParentalStatus
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetIncomeRange() *common.IncomeRangeInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_IncomeRange); ok {
		return x.IncomeRange
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetYoutubeChannel() *common.YouTubeChannelInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_YoutubeChannel); ok {
		return x.YoutubeChannel
	}
	return nil
}

type isAudienceInsightsAttribute_Attribute interface {
	isAudienceInsightsAttribute_Attribute()
}

type AudienceInsightsAttribute_AgeRange struct {
	// An audience attribute defined by an age range.
	AgeRange *common.AgeRangeInfo `protobuf:"bytes,1,opt,name=age_range,json=ageRange,proto3,oneof"`
}

type AudienceInsightsAttribute_Gender struct {
	// An audience attribute defined by a gender.
	Gender *common.GenderInfo `protobuf:"bytes,2,opt,name=gender,proto3,oneof"`
}

type AudienceInsightsAttribute_Location struct {
	// An audience attribute defined by a geographic location.
	Location *common.LocationInfo `protobuf:"bytes,3,opt,name=location,proto3,oneof"`
}

type AudienceInsightsAttribute_UserInterest struct {
	// An Affinity or In-Market audience.
	UserInterest *common.UserInterestInfo `protobuf:"bytes,4,opt,name=user_interest,json=userInterest,proto3,oneof"`
}

type AudienceInsightsAttribute_Entity struct {
	// An audience attribute defined by interest in a topic represented by a
	// Knowledge Graph entity.
	Entity *AudienceInsightsEntity `protobuf:"bytes,5,opt,name=entity,proto3,oneof"`
}

type AudienceInsightsAttribute_Category struct {
	// An audience attribute defined by interest in a Product & Service
	// category.
	Category *AudienceInsightsCategory `protobuf:"bytes,6,opt,name=category,proto3,oneof"`
}

type AudienceInsightsAttribute_DynamicLineup struct {
	// A YouTube Dynamic Lineup
	DynamicLineup *AudienceInsightsDynamicLineup `protobuf:"bytes,7,opt,name=dynamic_lineup,json=dynamicLineup,proto3,oneof"`
}

type AudienceInsightsAttribute_ParentalStatus struct {
	// A Parental Status value (parent, or not a parent).
	ParentalStatus *common.ParentalStatusInfo `protobuf:"bytes,8,opt,name=parental_status,json=parentalStatus,proto3,oneof"`
}

type AudienceInsightsAttribute_IncomeRange struct {
	// A household income percentile range.
	IncomeRange *common.IncomeRangeInfo `protobuf:"bytes,9,opt,name=income_range,json=incomeRange,proto3,oneof"`
}

type AudienceInsightsAttribute_YoutubeChannel struct {
	// A YouTube channel.
	YoutubeChannel *common.YouTubeChannelInfo `protobuf:"bytes,10,opt,name=youtube_channel,json=youtubeChannel,proto3,oneof"`
}

func (*AudienceInsightsAttribute_AgeRange) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_Gender) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_Location) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_UserInterest) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_Entity) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_Category) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_DynamicLineup) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_ParentalStatus) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_IncomeRange) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_YoutubeChannel) isAudienceInsightsAttribute_Attribute() {}

// An entity or category representing a topic that defines an audience.
type AudienceInsightsTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An entity or category attribute.
	//
	// Types that are assignable to Topic:
	//
	//	*AudienceInsightsTopic_Entity
	//	*AudienceInsightsTopic_Category
	Topic isAudienceInsightsTopic_Topic `protobuf_oneof:"topic"`
}

func (x *AudienceInsightsTopic) Reset() {
	*x = AudienceInsightsTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsTopic) ProtoMessage() {}

func (x *AudienceInsightsTopic) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsTopic.ProtoReflect.Descriptor instead.
func (*AudienceInsightsTopic) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{12}
}

func (m *AudienceInsightsTopic) GetTopic() isAudienceInsightsTopic_Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (x *AudienceInsightsTopic) GetEntity() *AudienceInsightsEntity {
	if x, ok := x.GetTopic().(*AudienceInsightsTopic_Entity); ok {
		return x.Entity
	}
	return nil
}

func (x *AudienceInsightsTopic) GetCategory() *AudienceInsightsCategory {
	if x, ok := x.GetTopic().(*AudienceInsightsTopic_Category); ok {
		return x.Category
	}
	return nil
}

type isAudienceInsightsTopic_Topic interface {
	isAudienceInsightsTopic_Topic()
}

type AudienceInsightsTopic_Entity struct {
	// A Knowledge Graph entity
	Entity *AudienceInsightsEntity `protobuf:"bytes,1,opt,name=entity,proto3,oneof"`
}

type AudienceInsightsTopic_Category struct {
	// A Product & Service category
	Category *AudienceInsightsCategory `protobuf:"bytes,2,opt,name=category,proto3,oneof"`
}

func (*AudienceInsightsTopic_Entity) isAudienceInsightsTopic_Topic() {}

func (*AudienceInsightsTopic_Category) isAudienceInsightsTopic_Topic() {}

// A Knowledge Graph entity, represented by its machine id.
type AudienceInsightsEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The machine id (mid) of the Knowledge Graph entity.
	KnowledgeGraphMachineId string `protobuf:"bytes,1,opt,name=knowledge_graph_machine_id,json=knowledgeGraphMachineId,proto3" json:"knowledge_graph_machine_id,omitempty"`
}

func (x *AudienceInsightsEntity) Reset() {
	*x = AudienceInsightsEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsEntity) ProtoMessage() {}

func (x *AudienceInsightsEntity) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsEntity.ProtoReflect.Descriptor instead.
func (*AudienceInsightsEntity) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{13}
}

func (x *AudienceInsightsEntity) GetKnowledgeGraphMachineId() string {
	if x != nil {
		return x.KnowledgeGraphMachineId
	}
	return ""
}

// A Product and Service category.
type AudienceInsightsCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The criterion id of the category.
	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *AudienceInsightsCategory) Reset() {
	*x = AudienceInsightsCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsCategory) ProtoMessage() {}

func (x *AudienceInsightsCategory) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsCategory.ProtoReflect.Descriptor instead.
func (*AudienceInsightsCategory) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{14}
}

func (x *AudienceInsightsCategory) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

// A YouTube Dynamic Lineup.
type AudienceInsightsDynamicLineup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The numeric ID of the dynamic lineup.
	DynamicLineupId string `protobuf:"bytes,1,opt,name=dynamic_lineup_id,json=dynamicLineupId,proto3" json:"dynamic_lineup_id,omitempty"`
}

func (x *AudienceInsightsDynamicLineup) Reset() {
	*x = AudienceInsightsDynamicLineup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsDynamicLineup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsDynamicLineup) ProtoMessage() {}

func (x *AudienceInsightsDynamicLineup) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsDynamicLineup.ProtoReflect.Descriptor instead.
func (*AudienceInsightsDynamicLineup) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{15}
}

func (x *AudienceInsightsDynamicLineup) GetDynamicLineupId() string {
	if x != nil {
		return x.DynamicLineupId
	}
	return ""
}

// A description of an audience used for requesting insights.
type BasicInsightsAudience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The countries for this audience.
	CountryLocation []*common.LocationInfo `protobuf:"bytes,1,rep,name=country_location,json=countryLocation,proto3" json:"country_location,omitempty"`
	// Sub-country geographic location attributes.  If present, each of these
	// must be contained in one of the countries in this audience.
	SubCountryLocations []*common.LocationInfo `protobuf:"bytes,2,rep,name=sub_country_locations,json=subCountryLocations,proto3" json:"sub_country_locations,omitempty"`
	// Gender for the audience.  If absent, the audience does not restrict by
	// gender.
	Gender *common.GenderInfo `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	// Age ranges for the audience.  If absent, the audience represents all people
	// over 18 that match the other attributes.
	AgeRanges []*common.AgeRangeInfo `protobuf:"bytes,4,rep,name=age_ranges,json=ageRanges,proto3" json:"age_ranges,omitempty"`
	// User interests defining this audience.  Affinity and In-Market audiences
	// are supported.
	UserInterests []*common.UserInterestInfo `protobuf:"bytes,5,rep,name=user_interests,json=userInterests,proto3" json:"user_interests,omitempty"`
	// Topics, represented by Knowledge Graph entities and/or Product & Service
	// categories, that this audience is interested in.
	Topics []*AudienceInsightsTopic `protobuf:"bytes,6,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *BasicInsightsAudience) Reset() {
	*x = BasicInsightsAudience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInsightsAudience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInsightsAudience) ProtoMessage() {}

func (x *BasicInsightsAudience) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInsightsAudience.ProtoReflect.Descriptor instead.
func (*BasicInsightsAudience) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{16}
}

func (x *BasicInsightsAudience) GetCountryLocation() []*common.LocationInfo {
	if x != nil {
		return x.CountryLocation
	}
	return nil
}

func (x *BasicInsightsAudience) GetSubCountryLocations() []*common.LocationInfo {
	if x != nil {
		return x.SubCountryLocations
	}
	return nil
}

func (x *BasicInsightsAudience) GetGender() *common.GenderInfo {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *BasicInsightsAudience) GetAgeRanges() []*common.AgeRangeInfo {
	if x != nil {
		return x.AgeRanges
	}
	return nil
}

func (x *BasicInsightsAudience) GetUserInterests() []*common.UserInterestInfo {
	if x != nil {
		return x.UserInterests
	}
	return nil
}

func (x *BasicInsightsAudience) GetTopics() []*AudienceInsightsTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

// An audience attribute, with metadata about it, returned in response to a
// search.
type AudienceInsightsAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the attribute.
	Dimension enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,1,opt,name=dimension,proto3,enum=google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimension,omitempty"`
	// The attribute itself.
	Attribute *AudienceInsightsAttribute `protobuf:"bytes,2,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// The human-readable name of the attribute.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A relevance score for this attribute, between 0 and 1.
	Score float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
	// A string that supplements the display_name to identify the attribute.
	// If the dimension is TOPIC, this is a brief description of the
	// Knowledge Graph entity, such as "American singer-songwriter".
	// If the dimension is CATEGORY, this is the complete path to the category in
	// The Product & Service taxonomy, for example
	// "/Apparel/Clothing/Outerwear".
	DisplayInfo string `protobuf:"bytes,5,opt,name=display_info,json=displayInfo,proto3" json:"display_info,omitempty"`
	// Metadata specific to the dimension of this attribute.
	//
	// Types that are assignable to DimensionMetadata:
	//
	//	*AudienceInsightsAttributeMetadata_YoutubeChannelMetadata
	//	*AudienceInsightsAttributeMetadata_DynamicAttributeMetadata
	//	*AudienceInsightsAttributeMetadata_LocationAttributeMetadata
	DimensionMetadata isAudienceInsightsAttributeMetadata_DimensionMetadata `protobuf_oneof:"dimension_metadata"`
}

func (x *AudienceInsightsAttributeMetadata) Reset() {
	*x = AudienceInsightsAttributeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsAttributeMetadata) ProtoMessage() {}

func (x *AudienceInsightsAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsAttributeMetadata.ProtoReflect.Descriptor instead.
func (*AudienceInsightsAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{17}
}

func (x *AudienceInsightsAttributeMetadata) GetDimension() enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimension
	}
	return enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension(0)
}

func (x *AudienceInsightsAttributeMetadata) GetAttribute() *AudienceInsightsAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *AudienceInsightsAttributeMetadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AudienceInsightsAttributeMetadata) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *AudienceInsightsAttributeMetadata) GetDisplayInfo() string {
	if x != nil {
		return x.DisplayInfo
	}
	return ""
}

func (m *AudienceInsightsAttributeMetadata) GetDimensionMetadata() isAudienceInsightsAttributeMetadata_DimensionMetadata {
	if m != nil {
		return m.DimensionMetadata
	}
	return nil
}

func (x *AudienceInsightsAttributeMetadata) GetYoutubeChannelMetadata() *YouTubeChannelAttributeMetadata {
	if x, ok := x.GetDimensionMetadata().(*AudienceInsightsAttributeMetadata_YoutubeChannelMetadata); ok {
		return x.YoutubeChannelMetadata
	}
	return nil
}

func (x *AudienceInsightsAttributeMetadata) GetDynamicAttributeMetadata() *DynamicLineupAttributeMetadata {
	if x, ok := x.GetDimensionMetadata().(*AudienceInsightsAttributeMetadata_DynamicAttributeMetadata); ok {
		return x.DynamicAttributeMetadata
	}
	return nil
}

func (x *AudienceInsightsAttributeMetadata) GetLocationAttributeMetadata() *LocationAttributeMetadata {
	if x, ok := x.GetDimensionMetadata().(*AudienceInsightsAttributeMetadata_LocationAttributeMetadata); ok {
		return x.LocationAttributeMetadata
	}
	return nil
}

type isAudienceInsightsAttributeMetadata_DimensionMetadata interface {
	isAudienceInsightsAttributeMetadata_DimensionMetadata()
}

type AudienceInsightsAttributeMetadata_YoutubeChannelMetadata struct {
	// Special metadata for a YouTube channel.
	YoutubeChannelMetadata *YouTubeChannelAttributeMetadata `protobuf:"bytes,6,opt,name=youtube_channel_metadata,json=youtubeChannelMetadata,proto3,oneof"`
}

type AudienceInsightsAttributeMetadata_DynamicAttributeMetadata struct {
	// Special metadata for a YouTube Dynamic Lineup.
	DynamicAttributeMetadata *DynamicLineupAttributeMetadata `protobuf:"bytes,7,opt,name=dynamic_attribute_metadata,json=dynamicAttributeMetadata,proto3,oneof"`
}

type AudienceInsightsAttributeMetadata_LocationAttributeMetadata struct {
	// Special metadata for a Location.
	LocationAttributeMetadata *LocationAttributeMetadata `protobuf:"bytes,8,opt,name=location_attribute_metadata,json=locationAttributeMetadata,proto3,oneof"`
}

func (*AudienceInsightsAttributeMetadata_YoutubeChannelMetadata) isAudienceInsightsAttributeMetadata_DimensionMetadata() {
}

func (*AudienceInsightsAttributeMetadata_DynamicAttributeMetadata) isAudienceInsightsAttributeMetadata_DimensionMetadata() {
}

func (*AudienceInsightsAttributeMetadata_LocationAttributeMetadata) isAudienceInsightsAttributeMetadata_DimensionMetadata() {
}

// Metadata associated with a YouTube channel attribute.
type YouTubeChannelAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The approximate number of subscribers to the YouTube channel.
	SubscriberCount int64 `protobuf:"varint,1,opt,name=subscriber_count,json=subscriberCount,proto3" json:"subscriber_count,omitempty"`
}

func (x *YouTubeChannelAttributeMetadata) Reset() {
	*x = YouTubeChannelAttributeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YouTubeChannelAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YouTubeChannelAttributeMetadata) ProtoMessage() {}

func (x *YouTubeChannelAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YouTubeChannelAttributeMetadata.ProtoReflect.Descriptor instead.
func (*YouTubeChannelAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{18}
}

func (x *YouTubeChannelAttributeMetadata) GetSubscriberCount() int64 {
	if x != nil {
		return x.SubscriberCount
	}
	return 0
}

// Metadata associated with a Dynamic Lineup attribute.
type DynamicLineupAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The national market associated with the lineup.
	InventoryCountry *common.LocationInfo `protobuf:"bytes,1,opt,name=inventory_country,json=inventoryCountry,proto3" json:"inventory_country,omitempty"`
	// The median number of impressions per month on this lineup.
	MedianMonthlyInventory *int64 `protobuf:"varint,2,opt,name=median_monthly_inventory,json=medianMonthlyInventory,proto3,oneof" json:"median_monthly_inventory,omitempty"`
	// The lower end of a range containing the number of channels in the lineup.
	ChannelCountLowerBound *int64 `protobuf:"varint,3,opt,name=channel_count_lower_bound,json=channelCountLowerBound,proto3,oneof" json:"channel_count_lower_bound,omitempty"`
	// The upper end of a range containing the number of channels in the lineup.
	ChannelCountUpperBound *int64 `protobuf:"varint,4,opt,name=channel_count_upper_bound,json=channelCountUpperBound,proto3,oneof" json:"channel_count_upper_bound,omitempty"`
	// Examples of channels that are included in the lineup.
	SampleChannels []*DynamicLineupAttributeMetadata_SampleChannel `protobuf:"bytes,5,rep,name=sample_channels,json=sampleChannels,proto3" json:"sample_channels,omitempty"`
}

func (x *DynamicLineupAttributeMetadata) Reset() {
	*x = DynamicLineupAttributeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicLineupAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicLineupAttributeMetadata) ProtoMessage() {}

func (x *DynamicLineupAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicLineupAttributeMetadata.ProtoReflect.Descriptor instead.
func (*DynamicLineupAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{19}
}

func (x *DynamicLineupAttributeMetadata) GetInventoryCountry() *common.LocationInfo {
	if x != nil {
		return x.InventoryCountry
	}
	return nil
}

func (x *DynamicLineupAttributeMetadata) GetMedianMonthlyInventory() int64 {
	if x != nil && x.MedianMonthlyInventory != nil {
		return *x.MedianMonthlyInventory
	}
	return 0
}

func (x *DynamicLineupAttributeMetadata) GetChannelCountLowerBound() int64 {
	if x != nil && x.ChannelCountLowerBound != nil {
		return *x.ChannelCountLowerBound
	}
	return 0
}

func (x *DynamicLineupAttributeMetadata) GetChannelCountUpperBound() int64 {
	if x != nil && x.ChannelCountUpperBound != nil {
		return *x.ChannelCountUpperBound
	}
	return 0
}

func (x *DynamicLineupAttributeMetadata) GetSampleChannels() []*DynamicLineupAttributeMetadata_SampleChannel {
	if x != nil {
		return x.SampleChannels
	}
	return nil
}

// Metadata associated with a Location attribute.
type LocationAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The country location of the sub country location.
	CountryLocation *common.LocationInfo `protobuf:"bytes,1,opt,name=country_location,json=countryLocation,proto3" json:"country_location,omitempty"`
}

func (x *LocationAttributeMetadata) Reset() {
	*x = LocationAttributeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationAttributeMetadata) ProtoMessage() {}

func (x *LocationAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationAttributeMetadata.ProtoReflect.Descriptor instead.
func (*LocationAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{20}
}

func (x *LocationAttributeMetadata) GetCountryLocation() *common.LocationInfo {
	if x != nil {
		return x.CountryLocation
	}
	return nil
}

// A set of users, defined by various characteristics, for which insights can
// be requested in AudienceInsightsService.
type InsightsAudience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The countries for the audience.
	CountryLocations []*common.LocationInfo `protobuf:"bytes,1,rep,name=country_locations,json=countryLocations,proto3" json:"country_locations,omitempty"`
	// Sub-country geographic location attributes.  If present, each of these
	// must be contained in one of the countries in this audience.  If absent, the
	// audience is geographically to the country_locations and no further.
	SubCountryLocations []*common.LocationInfo `protobuf:"bytes,2,rep,name=sub_country_locations,json=subCountryLocations,proto3" json:"sub_country_locations,omitempty"`
	// Gender for the audience.  If absent, the audience does not restrict by
	// gender.
	Gender *common.GenderInfo `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	// Age ranges for the audience.  If absent, the audience represents all people
	// over 18 that match the other attributes.
	AgeRanges []*common.AgeRangeInfo `protobuf:"bytes,4,rep,name=age_ranges,json=ageRanges,proto3" json:"age_ranges,omitempty"`
	// Parental status for the audience.  If absent, the audience does not
	// restrict by parental status.
	ParentalStatus *common.ParentalStatusInfo `protobuf:"bytes,5,opt,name=parental_status,json=parentalStatus,proto3" json:"parental_status,omitempty"`
	// Household income percentile ranges for the audience.  If absent, the
	// audience does not restrict by household income range.
	IncomeRanges []*common.IncomeRangeInfo `protobuf:"bytes,6,rep,name=income_ranges,json=incomeRanges,proto3" json:"income_ranges,omitempty"`
	// Dynamic lineups representing the YouTube content viewed by the audience.
	DynamicLineups []*AudienceInsightsDynamicLineup `protobuf:"bytes,7,rep,name=dynamic_lineups,json=dynamicLineups,proto3" json:"dynamic_lineups,omitempty"`
	// A combination of entity, category and user interest attributes defining the
	// audience. The combination has a logical AND-of-ORs structure: Attributes
	// within each InsightsAudienceAttributeGroup are combined with OR, and
	// the combinations themselves are combined together with AND.  For example,
	// the expression (Entity OR Affinity) AND (In-Market OR Category) can be
	// formed using two InsightsAudienceAttributeGroups with two Attributes
	// each.
	TopicAudienceCombinations []*InsightsAudienceAttributeGroup `protobuf:"bytes,8,rep,name=topic_audience_combinations,json=topicAudienceCombinations,proto3" json:"topic_audience_combinations,omitempty"`
}

func (x *InsightsAudience) Reset() {
	*x = InsightsAudience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsightsAudience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightsAudience) ProtoMessage() {}

func (x *InsightsAudience) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightsAudience.ProtoReflect.Descriptor instead.
func (*InsightsAudience) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{21}
}

func (x *InsightsAudience) GetCountryLocations() []*common.LocationInfo {
	if x != nil {
		return x.CountryLocations
	}
	return nil
}

func (x *InsightsAudience) GetSubCountryLocations() []*common.LocationInfo {
	if x != nil {
		return x.SubCountryLocations
	}
	return nil
}

func (x *InsightsAudience) GetGender() *common.GenderInfo {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *InsightsAudience) GetAgeRanges() []*common.AgeRangeInfo {
	if x != nil {
		return x.AgeRanges
	}
	return nil
}

func (x *InsightsAudience) GetParentalStatus() *common.ParentalStatusInfo {
	if x != nil {
		return x.ParentalStatus
	}
	return nil
}

func (x *InsightsAudience) GetIncomeRanges() []*common.IncomeRangeInfo {
	if x != nil {
		return x.IncomeRanges
	}
	return nil
}

func (x *InsightsAudience) GetDynamicLineups() []*AudienceInsightsDynamicLineup {
	if x != nil {
		return x.DynamicLineups
	}
	return nil
}

func (x *InsightsAudience) GetTopicAudienceCombinations() []*InsightsAudienceAttributeGroup {
	if x != nil {
		return x.TopicAudienceCombinations
	}
	return nil
}

// A list of AudienceInsightsAttributes.
type InsightsAudienceAttributeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A collection of audience attributes to be combined with logical
	// OR. Attributes need not all be the same dimension.  Only Knowledge Graph
	// entities, Product & Service Categories, and Affinity and In-Market
	// audiences are supported in this context.
	Attributes []*AudienceInsightsAttribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *InsightsAudienceAttributeGroup) Reset() {
	*x = InsightsAudienceAttributeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsightsAudienceAttributeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightsAudienceAttributeGroup) ProtoMessage() {}

func (x *InsightsAudienceAttributeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightsAudienceAttributeGroup.ProtoReflect.Descriptor instead.
func (*InsightsAudienceAttributeGroup) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{22}
}

func (x *InsightsAudienceAttributeGroup) GetAttributes() []*AudienceInsightsAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// A collection of related attributes of the same type in an audience
// composition insights report.
type AudienceCompositionSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the attributes in this section.
	Dimension enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,1,opt,name=dimension,proto3,enum=google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimension,omitempty"`
	// The most relevant segments for this audience.  If dimension is GENDER,
	// AGE_RANGE or PARENTAL_STATUS, then this list of attributes is exhaustive.
	TopAttributes []*AudienceCompositionAttribute `protobuf:"bytes,3,rep,name=top_attributes,json=topAttributes,proto3" json:"top_attributes,omitempty"`
	// Additional attributes for this audience, grouped into clusters.  Only
	// populated if dimension is YOUTUBE_CHANNEL.
	ClusteredAttributes []*AudienceCompositionAttributeCluster `protobuf:"bytes,4,rep,name=clustered_attributes,json=clusteredAttributes,proto3" json:"clustered_attributes,omitempty"`
}

func (x *AudienceCompositionSection) Reset() {
	*x = AudienceCompositionSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceCompositionSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceCompositionSection) ProtoMessage() {}

func (x *AudienceCompositionSection) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceCompositionSection.ProtoReflect.Descriptor instead.
func (*AudienceCompositionSection) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{23}
}

func (x *AudienceCompositionSection) GetDimension() enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimension
	}
	return enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension(0)
}

func (x *AudienceCompositionSection) GetTopAttributes() []*AudienceCompositionAttribute {
	if x != nil {
		return x.TopAttributes
	}
	return nil
}

func (x *AudienceCompositionSection) GetClusteredAttributes() []*AudienceCompositionAttributeCluster {
	if x != nil {
		return x.ClusteredAttributes
	}
	return nil
}

// A collection of related attributes, with metadata and metrics, in an audience
// composition insights report.
type AudienceCompositionAttributeCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this cluster of attributes
	ClusterDisplayName string `protobuf:"bytes,1,opt,name=cluster_display_name,json=clusterDisplayName,proto3" json:"cluster_display_name,omitempty"`
	// If the dimension associated with this cluster is YOUTUBE_CHANNEL, then
	// cluster_metrics are metrics associated with the cluster as a whole.
	// For other dimensions, this field is unset.
	ClusterMetrics *AudienceCompositionMetrics `protobuf:"bytes,3,opt,name=cluster_metrics,json=clusterMetrics,proto3" json:"cluster_metrics,omitempty"`
	// The individual attributes that make up this cluster, with metadata and
	// metrics.
	Attributes []*AudienceCompositionAttribute `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *AudienceCompositionAttributeCluster) Reset() {
	*x = AudienceCompositionAttributeCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceCompositionAttributeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceCompositionAttributeCluster) ProtoMessage() {}

func (x *AudienceCompositionAttributeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceCompositionAttributeCluster.ProtoReflect.Descriptor instead.
func (*AudienceCompositionAttributeCluster) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{24}
}

func (x *AudienceCompositionAttributeCluster) GetClusterDisplayName() string {
	if x != nil {
		return x.ClusterDisplayName
	}
	return ""
}

func (x *AudienceCompositionAttributeCluster) GetClusterMetrics() *AudienceCompositionMetrics {
	if x != nil {
		return x.ClusterMetrics
	}
	return nil
}

func (x *AudienceCompositionAttributeCluster) GetAttributes() []*AudienceCompositionAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// The share and index metrics associated with an attribute in an audience
// composition insights report.
type AudienceCompositionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fraction (from 0 to 1 inclusive) of the baseline audience that match
	// the attribute.
	BaselineAudienceShare float64 `protobuf:"fixed64,1,opt,name=baseline_audience_share,json=baselineAudienceShare,proto3" json:"baseline_audience_share,omitempty"`
	// The fraction (from 0 to 1 inclusive) of the specific audience that match
	// the attribute.
	AudienceShare float64 `protobuf:"fixed64,2,opt,name=audience_share,json=audienceShare,proto3" json:"audience_share,omitempty"`
	// The ratio of audience_share to baseline_audience_share, or zero if this
	// ratio is undefined or is not meaningful.
	Index float64 `protobuf:"fixed64,3,opt,name=index,proto3" json:"index,omitempty"`
	// A relevance score from 0 to 1 inclusive.
	Score float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *AudienceCompositionMetrics) Reset() {
	*x = AudienceCompositionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceCompositionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceCompositionMetrics) ProtoMessage() {}

func (x *AudienceCompositionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceCompositionMetrics.ProtoReflect.Descriptor instead.
func (*AudienceCompositionMetrics) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{25}
}

func (x *AudienceCompositionMetrics) GetBaselineAudienceShare() float64 {
	if x != nil {
		return x.BaselineAudienceShare
	}
	return 0
}

func (x *AudienceCompositionMetrics) GetAudienceShare() float64 {
	if x != nil {
		return x.AudienceShare
	}
	return 0
}

func (x *AudienceCompositionMetrics) GetIndex() float64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AudienceCompositionMetrics) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// An audience attribute with metadata and metrics.
type AudienceCompositionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The attribute with its metadata.
	AttributeMetadata *AudienceInsightsAttributeMetadata `protobuf:"bytes,1,opt,name=attribute_metadata,json=attributeMetadata,proto3" json:"attribute_metadata,omitempty"`
	// Share and index metrics for the attribute.
	Metrics *AudienceCompositionMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *AudienceCompositionAttribute) Reset() {
	*x = AudienceCompositionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceCompositionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceCompositionAttribute) ProtoMessage() {}

func (x *AudienceCompositionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceCompositionAttribute.ProtoReflect.Descriptor instead.
func (*AudienceCompositionAttribute) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{26}
}

func (x *AudienceCompositionAttribute) GetAttributeMetadata() *AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.AttributeMetadata
	}
	return nil
}

func (x *AudienceCompositionAttribute) GetMetrics() *AudienceCompositionMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// A YouTube channel returned as an example of the content in a lineup.
type DynamicLineupAttributeMetadata_SampleChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A YouTube channel.
	YoutubeChannel *common.YouTubeChannelInfo `protobuf:"bytes,1,opt,name=youtube_channel,json=youtubeChannel,proto3" json:"youtube_channel,omitempty"`
	// The name of the sample channel.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Metadata for the sample channel.
	YoutubeChannelMetadata *YouTubeChannelAttributeMetadata `protobuf:"bytes,3,opt,name=youtube_channel_metadata,json=youtubeChannelMetadata,proto3" json:"youtube_channel_metadata,omitempty"`
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) Reset() {
	*x = DynamicLineupAttributeMetadata_SampleChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicLineupAttributeMetadata_SampleChannel) ProtoMessage() {}

func (x *DynamicLineupAttributeMetadata_SampleChannel) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicLineupAttributeMetadata_SampleChannel.ProtoReflect.Descriptor instead.
func (*DynamicLineupAttributeMetadata_SampleChannel) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP(), []int{19, 0}
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) GetYoutubeChannel() *common.YouTubeChannelInfo {
	if x != nil {
		return x.YoutubeChannel
	}
	return nil
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) GetYoutubeChannelMetadata() *YouTubeChannelAttributeMetadata {
	if x != nil {
		return x.YoutubeChannelMetadata
	}
	return nil
}

var File_google_ads_googleads_v15_services_audience_insights_service_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDesc = []byte{
	0x0a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02,
	0x0a, 0x23, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x11, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x50, 0x0a, 0x24, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xdf, 0x03,
	0x0a, 0x2a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x54, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x7c, 0x0a, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x57, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x88, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x29, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x3b, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x8d, 0x01, 0x0a,
	0x2a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0b, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xea, 0x03, 0x0a,
	0x1a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x62, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4c, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x6b, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x59, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x22, 0x90, 0x03, 0x0a, 0x25, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x57, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x67, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8e, 0x01, 0x0a,
	0x26, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x22, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x9a, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x68, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x68, 0x69, 0x72, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x22, 0x96,
	0x07, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x08, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x59, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x69, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x5a, 0x0a, 0x16, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x18, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1d, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x64, 0x22, 0x98, 0x04, 0x0a, 0x15, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x13, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0xec, 0x05, 0x0a, 0x21, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x75, 0x0a, 0x09, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7e, 0x0a, 0x18, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x16, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x18, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7e,
	0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x14,
	0x0a, 0x12, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x1f, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x9f, 0x06, 0x0a, 0x1e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x3d, 0x0a, 0x18, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x78, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x8e, 0x02, 0x0a, 0x0d, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x5c, 0x0a, 0x0f,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7c, 0x0a,
	0x18, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x16, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x75, 0x0a, 0x19, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x06, 0x0a, 0x10,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x61, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x13, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x19, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1e,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x61,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xf6, 0x02, 0x0a, 0x1a, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x75, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x0d, 0x74, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x79, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x23, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5f, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa7, 0x01,
	0x0a, 0x1a, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x32, 0xfa, 0x0b, 0x0a, 0x17, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xa9, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0xda, 0x41, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x2c, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01,
	0x2a, 0x22, 0x3b, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xa5,
	0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0xda, 0x41, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22, 0x3f, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x35,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0xb5, 0x02, 0x0a, 0x23,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6f, 0xda, 0x41, 0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x2c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2c, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x22,
	0x42, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0xa6, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x4c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0xda, 0x41, 0x14, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x01, 0x2a, 0x22, 0x41, 0x2f, 0x76, 0x31, 0x35, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x45, 0xca, 0x41,
	0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x64, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x42, 0x88, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x1c, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02,
	0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31, 0x35, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0xca, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x35, 0x5c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xea, 0x02, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a,
	0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x35, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescData = file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDesc
)

func file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescData)
	})
	return file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDescData
}

var file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_google_ads_googleads_v15_services_audience_insights_service_proto_goTypes = []interface{}{
	(*GenerateInsightsFinderReportRequest)(nil),                        // 0: google.ads.googleads.v15.services.GenerateInsightsFinderReportRequest
	(*GenerateInsightsFinderReportResponse)(nil),                       // 1: google.ads.googleads.v15.services.GenerateInsightsFinderReportResponse
	(*GenerateAudienceCompositionInsightsRequest)(nil),                 // 2: google.ads.googleads.v15.services.GenerateAudienceCompositionInsightsRequest
	(*GenerateAudienceCompositionInsightsResponse)(nil),                // 3: google.ads.googleads.v15.services.GenerateAudienceCompositionInsightsResponse
	(*GenerateSuggestedTargetingInsightsRequest)(nil),                  // 4: google.ads.googleads.v15.services.GenerateSuggestedTargetingInsightsRequest
	(*GenerateSuggestedTargetingInsightsResponse)(nil),                 // 5: google.ads.googleads.v15.services.GenerateSuggestedTargetingInsightsResponse
	(*TargetingSuggestionMetrics)(nil),                                 // 6: google.ads.googleads.v15.services.TargetingSuggestionMetrics
	(*ListAudienceInsightsAttributesRequest)(nil),                      // 7: google.ads.googleads.v15.services.ListAudienceInsightsAttributesRequest
	(*ListAudienceInsightsAttributesResponse)(nil),                     // 8: google.ads.googleads.v15.services.ListAudienceInsightsAttributesResponse
	(*ListInsightsEligibleDatesRequest)(nil),                           // 9: google.ads.googleads.v15.services.ListInsightsEligibleDatesRequest
	(*ListInsightsEligibleDatesResponse)(nil),                          // 10: google.ads.googleads.v15.services.ListInsightsEligibleDatesResponse
	(*AudienceInsightsAttribute)(nil),                                  // 11: google.ads.googleads.v15.services.AudienceInsightsAttribute
	(*AudienceInsightsTopic)(nil),                                      // 12: google.ads.googleads.v15.services.AudienceInsightsTopic
	(*AudienceInsightsEntity)(nil),                                     // 13: google.ads.googleads.v15.services.AudienceInsightsEntity
	(*AudienceInsightsCategory)(nil),                                   // 14: google.ads.googleads.v15.services.AudienceInsightsCategory
	(*AudienceInsightsDynamicLineup)(nil),                              // 15: google.ads.googleads.v15.services.AudienceInsightsDynamicLineup
	(*BasicInsightsAudience)(nil),                                      // 16: google.ads.googleads.v15.services.BasicInsightsAudience
	(*AudienceInsightsAttributeMetadata)(nil),                          // 17: google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata
	(*YouTubeChannelAttributeMetadata)(nil),                            // 18: google.ads.googleads.v15.services.YouTubeChannelAttributeMetadata
	(*DynamicLineupAttributeMetadata)(nil),                             // 19: google.ads.googleads.v15.services.DynamicLineupAttributeMetadata
	(*LocationAttributeMetadata)(nil),                                  // 20: google.ads.googleads.v15.services.LocationAttributeMetadata
	(*InsightsAudience)(nil),                                           // 21: google.ads.googleads.v15.services.InsightsAudience
	(*InsightsAudienceAttributeGroup)(nil),                             // 22: google.ads.googleads.v15.services.InsightsAudienceAttributeGroup
	(*AudienceCompositionSection)(nil),                                 // 23: google.ads.googleads.v15.services.AudienceCompositionSection
	(*AudienceCompositionAttributeCluster)(nil),                        // 24: google.ads.googleads.v15.services.AudienceCompositionAttributeCluster
	(*AudienceCompositionMetrics)(nil),                                 // 25: google.ads.googleads.v15.services.AudienceCompositionMetrics
	(*AudienceCompositionAttribute)(nil),                               // 26: google.ads.googleads.v15.services.AudienceCompositionAttribute
	(*DynamicLineupAttributeMetadata_SampleChannel)(nil),               // 27: google.ads.googleads.v15.services.DynamicLineupAttributeMetadata.SampleChannel
	(enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension)(0), // 28: google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	(*common.AgeRangeInfo)(nil),                                        // 29: google.ads.googleads.v15.common.AgeRangeInfo
	(*common.GenderInfo)(nil),                                          // 30: google.ads.googleads.v15.common.GenderInfo
	(*common.LocationInfo)(nil),                                        // 31: google.ads.googleads.v15.common.LocationInfo
	(*common.DateRange)(nil),                                           // 32: google.ads.googleads.v15.common.DateRange
	(*common.UserInterestInfo)(nil),                                    // 33: google.ads.googleads.v15.common.UserInterestInfo
	(*common.ParentalStatusInfo)(nil),                                  // 34: google.ads.googleads.v15.common.ParentalStatusInfo
	(*common.IncomeRangeInfo)(nil),                                     // 35: google.ads.googleads.v15.common.IncomeRangeInfo
	(*common.YouTubeChannelInfo)(nil),                                  // 36: google.ads.googleads.v15.common.YouTubeChannelInfo
}
var file_google_ads_googleads_v15_services_audience_insights_service_proto_depIdxs = []int32{
	16, // 0: google.ads.googleads.v15.services.GenerateInsightsFinderReportRequest.baseline_audience:type_name -> google.ads.googleads.v15.services.BasicInsightsAudience
	16, // 1: google.ads.googleads.v15.services.GenerateInsightsFinderReportRequest.specific_audience:type_name -> google.ads.googleads.v15.services.BasicInsightsAudience
	21, // 2: google.ads.googleads.v15.services.GenerateAudienceCompositionInsightsRequest.audience:type_name -> google.ads.googleads.v15.services.InsightsAudience
	21, // 3: google.ads.googleads.v15.services.GenerateAudienceCompositionInsightsRequest.baseline_audience:type_name -> google.ads.googleads.v15.services.InsightsAudience
	28, // 4: google.ads.googleads.v15.services.GenerateAudienceCompositionInsightsRequest.dimensions:type_name -> google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	23, // 5: google.ads.googleads.v15.services.GenerateAudienceCompositionInsightsResponse.sections:type_name -> google.ads.googleads.v15.services.AudienceCompositionSection
	21, // 6: google.ads.googleads.v15.services.GenerateSuggestedTargetingInsightsRequest.audience:type_name -> google.ads.googleads.v15.services.InsightsAudience
	21, // 7: google.ads.googleads.v15.services.GenerateSuggestedTargetingInsightsRequest.baseline_audience:type_name -> google.ads.googleads.v15.services.InsightsAudience
	6,  // 8: google.ads.googleads.v15.services.GenerateSuggestedTargetingInsightsResponse.suggestions:type_name -> google.ads.googleads.v15.services.TargetingSuggestionMetrics
	17, // 9: google.ads.googleads.v15.services.TargetingSuggestionMetrics.locations:type_name -> google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata
	29, // 10: google.ads.googleads.v15.services.TargetingSuggestionMetrics.age_ranges:type_name -> google.ads.googleads.v15.common.AgeRangeInfo
	30, // 11: google.ads.googleads.v15.services.TargetingSuggestionMetrics.gender:type_name -> google.ads.googleads.v15.common.GenderInfo
	17, // 12: google.ads.googleads.v15.services.TargetingSuggestionMetrics.user_interests:type_name -> google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata
	28, // 13: google.ads.googleads.v15.services.ListAudienceInsightsAttributesRequest.dimensions:type_name -> google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	31, // 14: google.ads.googleads.v15.services.ListAudienceInsightsAttributesRequest.location_country_filters:type_name -> google.ads.googleads.v15.common.LocationInfo
	17, // 15: google.ads.googleads.v15.services.ListAudienceInsightsAttributesResponse.attributes:type_name -> google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata
	32, // 16: google.ads.googleads.v15.services.ListInsightsEligibleDatesResponse.last_thirty_days:type_name -> google.ads.googleads.v15.common.DateRange
	29, // 17: google.ads.googleads.v15.services.AudienceInsightsAttribute.age_range:type_name -> google.ads.googleads.v15.common.AgeRangeInfo
	30, // 18: google.ads.googleads.v15.services.AudienceInsightsAttribute.gender:type_name -> google.ads.googleads.v15.common.GenderInfo
	31, // 19: google.ads.googleads.v15.services.AudienceInsightsAttribute.location:type_name -> google.ads.googleads.v15.common.LocationInfo
	33, // 20: google.ads.googleads.v15.services.AudienceInsightsAttribute.user_interest:type_name -> google.ads.googleads.v15.common.UserInterestInfo
	13, // 21: google.ads.googleads.v15.services.AudienceInsightsAttribute.entity:type_name -> google.ads.googleads.v15.services.AudienceInsightsEntity
	14, // 22: google.ads.googleads.v15.services.AudienceInsightsAttribute.category:type_name -> google.ads.googleads.v15.services.AudienceInsightsCategory
	15, // 23: google.ads.googleads.v15.services.AudienceInsightsAttribute.dynamic_lineup:type_name -> google.ads.googleads.v15.services.AudienceInsightsDynamicLineup
	34, // 24: google.ads.googleads.v15.services.AudienceInsightsAttribute.parental_status:type_name -> google.ads.googleads.v15.common.ParentalStatusInfo
	35, // 25: google.ads.googleads.v15.services.AudienceInsightsAttribute.income_range:type_name -> google.ads.googleads.v15.common.IncomeRangeInfo
	36, // 26: google.ads.googleads.v15.services.AudienceInsightsAttribute.youtube_channel:type_name -> google.ads.googleads.v15.common.YouTubeChannelInfo
	13, // 27: google.ads.googleads.v15.services.AudienceInsightsTopic.entity:type_name -> google.ads.googleads.v15.services.AudienceInsightsEntity
	14, // 28: google.ads.googleads.v15.services.AudienceInsightsTopic.category:type_name -> google.ads.googleads.v15.services.AudienceInsightsCategory
	31, // 29: google.ads.googleads.v15.services.BasicInsightsAudience.country_location:type_name -> google.ads.googleads.v15.common.LocationInfo
	31, // 30: google.ads.googleads.v15.services.BasicInsightsAudience.sub_country_locations:type_name -> google.ads.googleads.v15.common.LocationInfo
	30, // 31: google.ads.googleads.v15.services.BasicInsightsAudience.gender:type_name -> google.ads.googleads.v15.common.GenderInfo
	29, // 32: google.ads.googleads.v15.services.BasicInsightsAudience.age_ranges:type_name -> google.ads.googleads.v15.common.AgeRangeInfo
	33, // 33: google.ads.googleads.v15.services.BasicInsightsAudience.user_interests:type_name -> google.ads.googleads.v15.common.UserInterestInfo
	12, // 34: google.ads.googleads.v15.services.BasicInsightsAudience.topics:type_name -> google.ads.googleads.v15.services.AudienceInsightsTopic
	28, // 35: google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata.dimension:type_name -> google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	11, // 36: google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata.attribute:type_name -> google.ads.googleads.v15.services.AudienceInsightsAttribute
	18, // 37: google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata.youtube_channel_metadata:type_name -> google.ads.googleads.v15.services.YouTubeChannelAttributeMetadata
	19, // 38: google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata.dynamic_attribute_metadata:type_name -> google.ads.googleads.v15.services.DynamicLineupAttributeMetadata
	20, // 39: google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata.location_attribute_metadata:type_name -> google.ads.googleads.v15.services.LocationAttributeMetadata
	31, // 40: google.ads.googleads.v15.services.DynamicLineupAttributeMetadata.inventory_country:type_name -> google.ads.googleads.v15.common.LocationInfo
	27, // 41: google.ads.googleads.v15.services.DynamicLineupAttributeMetadata.sample_channels:type_name -> google.ads.googleads.v15.services.DynamicLineupAttributeMetadata.SampleChannel
	31, // 42: google.ads.googleads.v15.services.LocationAttributeMetadata.country_location:type_name -> google.ads.googleads.v15.common.LocationInfo
	31, // 43: google.ads.googleads.v15.services.InsightsAudience.country_locations:type_name -> google.ads.googleads.v15.common.LocationInfo
	31, // 44: google.ads.googleads.v15.services.InsightsAudience.sub_country_locations:type_name -> google.ads.googleads.v15.common.LocationInfo
	30, // 45: google.ads.googleads.v15.services.InsightsAudience.gender:type_name -> google.ads.googleads.v15.common.GenderInfo
	29, // 46: google.ads.googleads.v15.services.InsightsAudience.age_ranges:type_name -> google.ads.googleads.v15.common.AgeRangeInfo
	34, // 47: google.ads.googleads.v15.services.InsightsAudience.parental_status:type_name -> google.ads.googleads.v15.common.ParentalStatusInfo
	35, // 48: google.ads.googleads.v15.services.InsightsAudience.income_ranges:type_name -> google.ads.googleads.v15.common.IncomeRangeInfo
	15, // 49: google.ads.googleads.v15.services.InsightsAudience.dynamic_lineups:type_name -> google.ads.googleads.v15.services.AudienceInsightsDynamicLineup
	22, // 50: google.ads.googleads.v15.services.InsightsAudience.topic_audience_combinations:type_name -> google.ads.googleads.v15.services.InsightsAudienceAttributeGroup
	11, // 51: google.ads.googleads.v15.services.InsightsAudienceAttributeGroup.attributes:type_name -> google.ads.googleads.v15.services.AudienceInsightsAttribute
	28, // 52: google.ads.googleads.v15.services.AudienceCompositionSection.dimension:type_name -> google.ads.googleads.v15.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	26, // 53: google.ads.googleads.v15.services.AudienceCompositionSection.top_attributes:type_name -> google.ads.googleads.v15.services.AudienceCompositionAttribute
	24, // 54: google.ads.googleads.v15.services.AudienceCompositionSection.clustered_attributes:type_name -> google.ads.googleads.v15.services.AudienceCompositionAttributeCluster
	25, // 55: google.ads.googleads.v15.services.AudienceCompositionAttributeCluster.cluster_metrics:type_name -> google.ads.googleads.v15.services.AudienceCompositionMetrics
	26, // 56: google.ads.googleads.v15.services.AudienceCompositionAttributeCluster.attributes:type_name -> google.ads.googleads.v15.services.AudienceCompositionAttribute
	17, // 57: google.ads.googleads.v15.services.AudienceCompositionAttribute.attribute_metadata:type_name -> google.ads.googleads.v15.services.AudienceInsightsAttributeMetadata
	25, // 58: google.ads.googleads.v15.services.AudienceCompositionAttribute.metrics:type_name -> google.ads.googleads.v15.services.AudienceCompositionMetrics
	36, // 59: google.ads.googleads.v15.services.DynamicLineupAttributeMetadata.SampleChannel.youtube_channel:type_name -> google.ads.googleads.v15.common.YouTubeChannelInfo
	18, // 60: google.ads.googleads.v15.services.DynamicLineupAttributeMetadata.SampleChannel.youtube_channel_metadata:type_name -> google.ads.googleads.v15.services.YouTubeChannelAttributeMetadata
	0,  // 61: google.ads.googleads.v15.services.AudienceInsightsService.GenerateInsightsFinderReport:input_type -> google.ads.googleads.v15.services.GenerateInsightsFinderReportRequest
	7,  // 62: google.ads.googleads.v15.services.AudienceInsightsService.ListAudienceInsightsAttributes:input_type -> google.ads.googleads.v15.services.ListAudienceInsightsAttributesRequest
	9,  // 63: google.ads.googleads.v15.services.AudienceInsightsService.ListInsightsEligibleDates:input_type -> google.ads.googleads.v15.services.ListInsightsEligibleDatesRequest
	2,  // 64: google.ads.googleads.v15.services.AudienceInsightsService.GenerateAudienceCompositionInsights:input_type -> google.ads.googleads.v15.services.GenerateAudienceCompositionInsightsRequest
	4,  // 65: google.ads.googleads.v15.services.AudienceInsightsService.GenerateSuggestedTargetingInsights:input_type -> google.ads.googleads.v15.services.GenerateSuggestedTargetingInsightsRequest
	1,  // 66: google.ads.googleads.v15.services.AudienceInsightsService.GenerateInsightsFinderReport:output_type -> google.ads.googleads.v15.services.GenerateInsightsFinderReportResponse
	8,  // 67: google.ads.googleads.v15.services.AudienceInsightsService.ListAudienceInsightsAttributes:output_type -> google.ads.googleads.v15.services.ListAudienceInsightsAttributesResponse
	10, // 68: google.ads.googleads.v15.services.AudienceInsightsService.ListInsightsEligibleDates:output_type -> google.ads.googleads.v15.services.ListInsightsEligibleDatesResponse
	3,  // 69: google.ads.googleads.v15.services.AudienceInsightsService.GenerateAudienceCompositionInsights:output_type -> google.ads.googleads.v15.services.GenerateAudienceCompositionInsightsResponse
	5,  // 70: google.ads.googleads.v15.services.AudienceInsightsService.GenerateSuggestedTargetingInsights:output_type -> google.ads.googleads.v15.services.GenerateSuggestedTargetingInsightsResponse
	66, // [66:71] is the sub-list for method output_type
	61, // [61:66] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v15_services_audience_insights_service_proto_init() }
func file_google_ads_googleads_v15_services_audience_insights_service_proto_init() {
	if File_google_ads_googleads_v15_services_audience_insights_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateInsightsFinderReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateInsightsFinderReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAudienceCompositionInsightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAudienceCompositionInsightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSuggestedTargetingInsightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSuggestedTargetingInsightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetingSuggestionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAudienceInsightsAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAudienceInsightsAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInsightsEligibleDatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInsightsEligibleDatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsDynamicLineup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInsightsAudience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsAttributeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YouTubeChannelAttributeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicLineupAttributeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationAttributeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsightsAudience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsightsAudienceAttributeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceCompositionSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceCompositionAttributeCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceCompositionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceCompositionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicLineupAttributeMetadata_SampleChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*AudienceInsightsAttribute_AgeRange)(nil),
		(*AudienceInsightsAttribute_Gender)(nil),
		(*AudienceInsightsAttribute_Location)(nil),
		(*AudienceInsightsAttribute_UserInterest)(nil),
		(*AudienceInsightsAttribute_Entity)(nil),
		(*AudienceInsightsAttribute_Category)(nil),
		(*AudienceInsightsAttribute_DynamicLineup)(nil),
		(*AudienceInsightsAttribute_ParentalStatus)(nil),
		(*AudienceInsightsAttribute_IncomeRange)(nil),
		(*AudienceInsightsAttribute_YoutubeChannel)(nil),
	}
	file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*AudienceInsightsTopic_Entity)(nil),
		(*AudienceInsightsTopic_Category)(nil),
	}
	file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*AudienceInsightsAttributeMetadata_YoutubeChannelMetadata)(nil),
		(*AudienceInsightsAttributeMetadata_DynamicAttributeMetadata)(nil),
		(*AudienceInsightsAttributeMetadata_LocationAttributeMetadata)(nil),
	}
	file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_ads_googleads_v15_services_audience_insights_service_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v15_services_audience_insights_service_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v15_services_audience_insights_service_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v15_services_audience_insights_service_proto = out.File
	file_google_ads_googleads_v15_services_audience_insights_service_proto_rawDesc = nil
	file_google_ads_googleads_v15_services_audience_insights_service_proto_goTypes = nil
	file_google_ads_googleads_v15_services_audience_insights_service_proto_depIdxs = nil
}
