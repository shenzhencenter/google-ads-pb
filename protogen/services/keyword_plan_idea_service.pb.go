// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.1
// source: google/ads/googleads/v15/services/keyword_plan_idea_service.proto

package services

import (
	common "github.com/Optable/google-ads-pb/protogen/common"
	enums "github.com/Optable/google-ads-pb/protogen/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [KeywordPlanIdeaService.GenerateKeywordIdeas][google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordIdeas].
type GenerateKeywordIdeasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the customer with the recommendation.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// The resource name of the language to target.
	// Each keyword belongs to some set of languages; a keyword is included if
	// language is one of its languages.
	// If not set, all keywords will be included.
	Language *string `protobuf:"bytes,14,opt,name=language,proto3,oneof" json:"language,omitempty"`
	// The resource names of the location to target. Maximum is 10.
	// An empty list MAY be used to specify all targeting geos.
	GeoTargetConstants []string `protobuf:"bytes,15,rep,name=geo_target_constants,json=geoTargetConstants,proto3" json:"geo_target_constants,omitempty"`
	// If true, adult keywords will be included in response.
	// The default value is false.
	IncludeAdultKeywords bool `protobuf:"varint,10,opt,name=include_adult_keywords,json=includeAdultKeywords,proto3" json:"include_adult_keywords,omitempty"`
	// Token of the page to retrieve. If not specified, the first
	// page of results will be returned. To request next page of results use the
	// value obtained from `next_page_token` in the previous response.
	// The request fields must match across pages.
	PageToken string `protobuf:"bytes,12,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Number of results to retrieve in a single page.
	// A maximum of 10,000 results may be returned, if the page_size
	// exceeds this, it is ignored.
	// If unspecified, at most 10,000 results will be returned.
	// The server may decide to further limit the number of returned resources.
	// If the response contains fewer than 10,000 results it may not be assumed
	// as last page of results.
	PageSize int32 `protobuf:"varint,13,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Targeting network.
	// If not set, Google Search And Partners Network will be used.
	KeywordPlanNetwork enums.KeywordPlanNetworkEnum_KeywordPlanNetwork `protobuf:"varint,9,opt,name=keyword_plan_network,json=keywordPlanNetwork,proto3,enum=google.ads.googleads.v15.enums.KeywordPlanNetworkEnum_KeywordPlanNetwork" json:"keyword_plan_network,omitempty"`
	// The keyword annotations to include in response.
	KeywordAnnotation []enums.KeywordPlanKeywordAnnotationEnum_KeywordPlanKeywordAnnotation `protobuf:"varint,17,rep,packed,name=keyword_annotation,json=keywordAnnotation,proto3,enum=google.ads.googleads.v15.enums.KeywordPlanKeywordAnnotationEnum_KeywordPlanKeywordAnnotation" json:"keyword_annotation,omitempty"`
	// The aggregate fields to include in response.
	AggregateMetrics *common.KeywordPlanAggregateMetrics `protobuf:"bytes,16,opt,name=aggregate_metrics,json=aggregateMetrics,proto3" json:"aggregate_metrics,omitempty"`
	// The options for historical metrics data.
	HistoricalMetricsOptions *common.HistoricalMetricsOptions `protobuf:"bytes,18,opt,name=historical_metrics_options,json=historicalMetricsOptions,proto3" json:"historical_metrics_options,omitempty"`
	// The type of seed to generate keyword ideas.
	//
	// Types that are assignable to Seed:
	//
	//	*GenerateKeywordIdeasRequest_KeywordAndUrlSeed
	//	*GenerateKeywordIdeasRequest_KeywordSeed
	//	*GenerateKeywordIdeasRequest_UrlSeed
	//	*GenerateKeywordIdeasRequest_SiteSeed
	Seed isGenerateKeywordIdeasRequest_Seed `protobuf_oneof:"seed"`
}

func (x *GenerateKeywordIdeasRequest) Reset() {
	*x = GenerateKeywordIdeasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeywordIdeasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeywordIdeasRequest) ProtoMessage() {}

func (x *GenerateKeywordIdeasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeywordIdeasRequest.ProtoReflect.Descriptor instead.
func (*GenerateKeywordIdeasRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateKeywordIdeasRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateKeywordIdeasRequest) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *GenerateKeywordIdeasRequest) GetGeoTargetConstants() []string {
	if x != nil {
		return x.GeoTargetConstants
	}
	return nil
}

func (x *GenerateKeywordIdeasRequest) GetIncludeAdultKeywords() bool {
	if x != nil {
		return x.IncludeAdultKeywords
	}
	return false
}

func (x *GenerateKeywordIdeasRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GenerateKeywordIdeasRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GenerateKeywordIdeasRequest) GetKeywordPlanNetwork() enums.KeywordPlanNetworkEnum_KeywordPlanNetwork {
	if x != nil {
		return x.KeywordPlanNetwork
	}
	return enums.KeywordPlanNetworkEnum_KeywordPlanNetwork(0)
}

func (x *GenerateKeywordIdeasRequest) GetKeywordAnnotation() []enums.KeywordPlanKeywordAnnotationEnum_KeywordPlanKeywordAnnotation {
	if x != nil {
		return x.KeywordAnnotation
	}
	return nil
}

func (x *GenerateKeywordIdeasRequest) GetAggregateMetrics() *common.KeywordPlanAggregateMetrics {
	if x != nil {
		return x.AggregateMetrics
	}
	return nil
}

func (x *GenerateKeywordIdeasRequest) GetHistoricalMetricsOptions() *common.HistoricalMetricsOptions {
	if x != nil {
		return x.HistoricalMetricsOptions
	}
	return nil
}

func (m *GenerateKeywordIdeasRequest) GetSeed() isGenerateKeywordIdeasRequest_Seed {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (x *GenerateKeywordIdeasRequest) GetKeywordAndUrlSeed() *KeywordAndUrlSeed {
	if x, ok := x.GetSeed().(*GenerateKeywordIdeasRequest_KeywordAndUrlSeed); ok {
		return x.KeywordAndUrlSeed
	}
	return nil
}

func (x *GenerateKeywordIdeasRequest) GetKeywordSeed() *KeywordSeed {
	if x, ok := x.GetSeed().(*GenerateKeywordIdeasRequest_KeywordSeed); ok {
		return x.KeywordSeed
	}
	return nil
}

func (x *GenerateKeywordIdeasRequest) GetUrlSeed() *UrlSeed {
	if x, ok := x.GetSeed().(*GenerateKeywordIdeasRequest_UrlSeed); ok {
		return x.UrlSeed
	}
	return nil
}

func (x *GenerateKeywordIdeasRequest) GetSiteSeed() *SiteSeed {
	if x, ok := x.GetSeed().(*GenerateKeywordIdeasRequest_SiteSeed); ok {
		return x.SiteSeed
	}
	return nil
}

type isGenerateKeywordIdeasRequest_Seed interface {
	isGenerateKeywordIdeasRequest_Seed()
}

type GenerateKeywordIdeasRequest_KeywordAndUrlSeed struct {
	// A Keyword and a specific Url to generate ideas from
	// for example, cars, www.example.com/cars.
	KeywordAndUrlSeed *KeywordAndUrlSeed `protobuf:"bytes,2,opt,name=keyword_and_url_seed,json=keywordAndUrlSeed,proto3,oneof"`
}

type GenerateKeywordIdeasRequest_KeywordSeed struct {
	// A Keyword or phrase to generate ideas from, for example, cars.
	KeywordSeed *KeywordSeed `protobuf:"bytes,3,opt,name=keyword_seed,json=keywordSeed,proto3,oneof"`
}

type GenerateKeywordIdeasRequest_UrlSeed struct {
	// A specific url to generate ideas from, for example, www.example.com/cars.
	UrlSeed *UrlSeed `protobuf:"bytes,5,opt,name=url_seed,json=urlSeed,proto3,oneof"`
}

type GenerateKeywordIdeasRequest_SiteSeed struct {
	// The site to generate ideas from, for example, www.example.com.
	SiteSeed *SiteSeed `protobuf:"bytes,11,opt,name=site_seed,json=siteSeed,proto3,oneof"`
}

func (*GenerateKeywordIdeasRequest_KeywordAndUrlSeed) isGenerateKeywordIdeasRequest_Seed() {}

func (*GenerateKeywordIdeasRequest_KeywordSeed) isGenerateKeywordIdeasRequest_Seed() {}

func (*GenerateKeywordIdeasRequest_UrlSeed) isGenerateKeywordIdeasRequest_Seed() {}

func (*GenerateKeywordIdeasRequest_SiteSeed) isGenerateKeywordIdeasRequest_Seed() {}

// Keyword And Url Seed
type KeywordAndUrlSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL to crawl in order to generate keyword ideas.
	Url *string `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	// Requires at least one keyword.
	Keywords []string `protobuf:"bytes,4,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *KeywordAndUrlSeed) Reset() {
	*x = KeywordAndUrlSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordAndUrlSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordAndUrlSeed) ProtoMessage() {}

func (x *KeywordAndUrlSeed) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordAndUrlSeed.ProtoReflect.Descriptor instead.
func (*KeywordAndUrlSeed) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{1}
}

func (x *KeywordAndUrlSeed) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *KeywordAndUrlSeed) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

// Keyword Seed
type KeywordSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requires at least one keyword.
	Keywords []string `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *KeywordSeed) Reset() {
	*x = KeywordSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordSeed) ProtoMessage() {}

func (x *KeywordSeed) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordSeed.ProtoReflect.Descriptor instead.
func (*KeywordSeed) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{2}
}

func (x *KeywordSeed) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

// Site Seed
type SiteSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The domain name of the site. If the customer requesting the ideas doesn't
	// own the site provided only public information is returned.
	Site *string `protobuf:"bytes,2,opt,name=site,proto3,oneof" json:"site,omitempty"`
}

func (x *SiteSeed) Reset() {
	*x = SiteSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteSeed) ProtoMessage() {}

func (x *SiteSeed) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteSeed.ProtoReflect.Descriptor instead.
func (*SiteSeed) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{3}
}

func (x *SiteSeed) GetSite() string {
	if x != nil && x.Site != nil {
		return *x.Site
	}
	return ""
}

// Url Seed
type UrlSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL to crawl in order to generate keyword ideas.
	Url *string `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *UrlSeed) Reset() {
	*x = UrlSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlSeed) ProtoMessage() {}

func (x *UrlSeed) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlSeed.ProtoReflect.Descriptor instead.
func (*UrlSeed) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{4}
}

func (x *UrlSeed) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

// Response message for
// [KeywordPlanIdeaService.GenerateKeywordIdeas][google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordIdeas].
type GenerateKeywordIdeaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Results of generating keyword ideas.
	Results []*GenerateKeywordIdeaResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// The aggregate metrics for all keyword ideas.
	AggregateMetricResults *common.KeywordPlanAggregateMetricResults `protobuf:"bytes,4,opt,name=aggregate_metric_results,json=aggregateMetricResults,proto3" json:"aggregate_metric_results,omitempty"`
	// Pagination token used to retrieve the next page of results.
	// Pass the content of this string as the `page_token` attribute of
	// the next request.
	// `next_page_token` is not returned for the last page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of results available.
	TotalSize int64 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *GenerateKeywordIdeaResponse) Reset() {
	*x = GenerateKeywordIdeaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeywordIdeaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeywordIdeaResponse) ProtoMessage() {}

func (x *GenerateKeywordIdeaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeywordIdeaResponse.ProtoReflect.Descriptor instead.
func (*GenerateKeywordIdeaResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateKeywordIdeaResponse) GetResults() []*GenerateKeywordIdeaResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GenerateKeywordIdeaResponse) GetAggregateMetricResults() *common.KeywordPlanAggregateMetricResults {
	if x != nil {
		return x.AggregateMetricResults
	}
	return nil
}

func (x *GenerateKeywordIdeaResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GenerateKeywordIdeaResponse) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// The result of generating keyword ideas.
type GenerateKeywordIdeaResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text of the keyword idea.
	// As in Keyword Plan historical metrics, this text may not be an actual
	// keyword, but the canonical form of multiple keywords.
	// See KeywordPlanKeywordHistoricalMetrics message in KeywordPlanService.
	Text *string `protobuf:"bytes,5,opt,name=text,proto3,oneof" json:"text,omitempty"`
	// The historical metrics for the keyword.
	KeywordIdeaMetrics *common.KeywordPlanHistoricalMetrics `protobuf:"bytes,3,opt,name=keyword_idea_metrics,json=keywordIdeaMetrics,proto3" json:"keyword_idea_metrics,omitempty"`
	// The annotations for the keyword.
	// The annotation data is only provided if requested.
	KeywordAnnotations *common.KeywordAnnotations `protobuf:"bytes,6,opt,name=keyword_annotations,json=keywordAnnotations,proto3" json:"keyword_annotations,omitempty"`
	// The list of close variants from the requested keywords that
	// are combined into this GenerateKeywordIdeaResult. See
	// https://support.google.com/google-ads/answer/9342105 for the
	// definition of "close variants".
	CloseVariants []string `protobuf:"bytes,7,rep,name=close_variants,json=closeVariants,proto3" json:"close_variants,omitempty"`
}

func (x *GenerateKeywordIdeaResult) Reset() {
	*x = GenerateKeywordIdeaResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeywordIdeaResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeywordIdeaResult) ProtoMessage() {}

func (x *GenerateKeywordIdeaResult) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeywordIdeaResult.ProtoReflect.Descriptor instead.
func (*GenerateKeywordIdeaResult) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{6}
}

func (x *GenerateKeywordIdeaResult) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *GenerateKeywordIdeaResult) GetKeywordIdeaMetrics() *common.KeywordPlanHistoricalMetrics {
	if x != nil {
		return x.KeywordIdeaMetrics
	}
	return nil
}

func (x *GenerateKeywordIdeaResult) GetKeywordAnnotations() *common.KeywordAnnotations {
	if x != nil {
		return x.KeywordAnnotations
	}
	return nil
}

func (x *GenerateKeywordIdeaResult) GetCloseVariants() []string {
	if x != nil {
		return x.CloseVariants
	}
	return nil
}

// Request message for
// [KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics][google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics].
type GenerateKeywordHistoricalMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the customer with the recommendation.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// A list of keywords to get historical metrics.
	// Not all inputs will be returned as a result of near-exact deduplication.
	// For example, if stats for "car" and "cars" are requested, only "car" will
	// be returned.
	// A maximum of 10,000 keywords can be used.
	Keywords []string `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// The resource name of the language to target.
	// Each keyword belongs to some set of languages; a keyword is included if
	// language is one of its languages.
	// If not set, all keywords will be included.
	Language *string `protobuf:"bytes,4,opt,name=language,proto3,oneof" json:"language,omitempty"`
	// If true, adult keywords will be included in response.
	// The default value is false.
	IncludeAdultKeywords bool `protobuf:"varint,5,opt,name=include_adult_keywords,json=includeAdultKeywords,proto3" json:"include_adult_keywords,omitempty"`
	// The resource names of the location to target. Maximum is 10.
	// An empty list MAY be used to specify all targeting geos.
	GeoTargetConstants []string `protobuf:"bytes,6,rep,name=geo_target_constants,json=geoTargetConstants,proto3" json:"geo_target_constants,omitempty"`
	// Targeting network.
	// If not set, Google Search And Partners Network will be used.
	KeywordPlanNetwork enums.KeywordPlanNetworkEnum_KeywordPlanNetwork `protobuf:"varint,7,opt,name=keyword_plan_network,json=keywordPlanNetwork,proto3,enum=google.ads.googleads.v15.enums.KeywordPlanNetworkEnum_KeywordPlanNetwork" json:"keyword_plan_network,omitempty"`
	// The aggregate fields to include in response.
	AggregateMetrics *common.KeywordPlanAggregateMetrics `protobuf:"bytes,8,opt,name=aggregate_metrics,json=aggregateMetrics,proto3" json:"aggregate_metrics,omitempty"`
	// The options for historical metrics data.
	HistoricalMetricsOptions *common.HistoricalMetricsOptions `protobuf:"bytes,3,opt,name=historical_metrics_options,json=historicalMetricsOptions,proto3" json:"historical_metrics_options,omitempty"`
}

func (x *GenerateKeywordHistoricalMetricsRequest) Reset() {
	*x = GenerateKeywordHistoricalMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeywordHistoricalMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeywordHistoricalMetricsRequest) ProtoMessage() {}

func (x *GenerateKeywordHistoricalMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeywordHistoricalMetricsRequest.ProtoReflect.Descriptor instead.
func (*GenerateKeywordHistoricalMetricsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{7}
}

func (x *GenerateKeywordHistoricalMetricsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateKeywordHistoricalMetricsRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *GenerateKeywordHistoricalMetricsRequest) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *GenerateKeywordHistoricalMetricsRequest) GetIncludeAdultKeywords() bool {
	if x != nil {
		return x.IncludeAdultKeywords
	}
	return false
}

func (x *GenerateKeywordHistoricalMetricsRequest) GetGeoTargetConstants() []string {
	if x != nil {
		return x.GeoTargetConstants
	}
	return nil
}

func (x *GenerateKeywordHistoricalMetricsRequest) GetKeywordPlanNetwork() enums.KeywordPlanNetworkEnum_KeywordPlanNetwork {
	if x != nil {
		return x.KeywordPlanNetwork
	}
	return enums.KeywordPlanNetworkEnum_KeywordPlanNetwork(0)
}

func (x *GenerateKeywordHistoricalMetricsRequest) GetAggregateMetrics() *common.KeywordPlanAggregateMetrics {
	if x != nil {
		return x.AggregateMetrics
	}
	return nil
}

func (x *GenerateKeywordHistoricalMetricsRequest) GetHistoricalMetricsOptions() *common.HistoricalMetricsOptions {
	if x != nil {
		return x.HistoricalMetricsOptions
	}
	return nil
}

// Response message for
// [KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics][google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics].
type GenerateKeywordHistoricalMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of keywords and their historical metrics.
	Results []*GenerateKeywordHistoricalMetricsResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// The aggregate metrics for all keywords.
	AggregateMetricResults *common.KeywordPlanAggregateMetricResults `protobuf:"bytes,2,opt,name=aggregate_metric_results,json=aggregateMetricResults,proto3" json:"aggregate_metric_results,omitempty"`
}

func (x *GenerateKeywordHistoricalMetricsResponse) Reset() {
	*x = GenerateKeywordHistoricalMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeywordHistoricalMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeywordHistoricalMetricsResponse) ProtoMessage() {}

func (x *GenerateKeywordHistoricalMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeywordHistoricalMetricsResponse.ProtoReflect.Descriptor instead.
func (*GenerateKeywordHistoricalMetricsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{8}
}

func (x *GenerateKeywordHistoricalMetricsResponse) GetResults() []*GenerateKeywordHistoricalMetricsResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GenerateKeywordHistoricalMetricsResponse) GetAggregateMetricResults() *common.KeywordPlanAggregateMetricResults {
	if x != nil {
		return x.AggregateMetricResults
	}
	return nil
}

// The result of generating keyword historical metrics.
type GenerateKeywordHistoricalMetricsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text of the query associated with one or more keywords.
	// Note that we de-dupe your keywords list, eliminating close variants
	// before returning the keywords as text. For example, if your request
	// originally contained the keywords "car" and "cars", the returned search
	// query will only contain "cars". The list of de-duped queries will be
	// included in close_variants field.
	Text *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	// The list of close variants from the requested keywords whose stats
	// are combined into this GenerateKeywordHistoricalMetricsResult.
	CloseVariants []string `protobuf:"bytes,3,rep,name=close_variants,json=closeVariants,proto3" json:"close_variants,omitempty"`
	// The historical metrics for text and its close variants
	KeywordMetrics *common.KeywordPlanHistoricalMetrics `protobuf:"bytes,2,opt,name=keyword_metrics,json=keywordMetrics,proto3" json:"keyword_metrics,omitempty"`
}

func (x *GenerateKeywordHistoricalMetricsResult) Reset() {
	*x = GenerateKeywordHistoricalMetricsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeywordHistoricalMetricsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeywordHistoricalMetricsResult) ProtoMessage() {}

func (x *GenerateKeywordHistoricalMetricsResult) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeywordHistoricalMetricsResult.ProtoReflect.Descriptor instead.
func (*GenerateKeywordHistoricalMetricsResult) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateKeywordHistoricalMetricsResult) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *GenerateKeywordHistoricalMetricsResult) GetCloseVariants() []string {
	if x != nil {
		return x.CloseVariants
	}
	return nil
}

func (x *GenerateKeywordHistoricalMetricsResult) GetKeywordMetrics() *common.KeywordPlanHistoricalMetrics {
	if x != nil {
		return x.KeywordMetrics
	}
	return nil
}

// Request message for
// [KeywordPlanIdeaService.GenerateAdGroupThemes][google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateAdGroupThemes].
type GenerateAdGroupThemesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. A list of keywords to group into the provided AdGroups.
	Keywords []string `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// Required. A list of resource names of AdGroups to group keywords into.
	//
	//	Resource name format: `customers/{customer_id}/adGroups/{ad_group_id}`
	AdGroups []string `protobuf:"bytes,3,rep,name=ad_groups,json=adGroups,proto3" json:"ad_groups,omitempty"`
}

func (x *GenerateAdGroupThemesRequest) Reset() {
	*x = GenerateAdGroupThemesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAdGroupThemesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAdGroupThemesRequest) ProtoMessage() {}

func (x *GenerateAdGroupThemesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAdGroupThemesRequest.ProtoReflect.Descriptor instead.
func (*GenerateAdGroupThemesRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateAdGroupThemesRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateAdGroupThemesRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *GenerateAdGroupThemesRequest) GetAdGroups() []string {
	if x != nil {
		return x.AdGroups
	}
	return nil
}

// Response message for
// [KeywordPlanIdeaService.GenerateAdGroupThemes][google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateAdGroupThemes].
type GenerateAdGroupThemesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of suggested AdGroup/keyword pairings.
	AdGroupKeywordSuggestions []*AdGroupKeywordSuggestion `protobuf:"bytes,1,rep,name=ad_group_keyword_suggestions,json=adGroupKeywordSuggestions,proto3" json:"ad_group_keyword_suggestions,omitempty"`
	// A list of provided AdGroups that could not be used as suggestions.
	UnusableAdGroups []*UnusableAdGroup `protobuf:"bytes,2,rep,name=unusable_ad_groups,json=unusableAdGroups,proto3" json:"unusable_ad_groups,omitempty"`
}

func (x *GenerateAdGroupThemesResponse) Reset() {
	*x = GenerateAdGroupThemesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAdGroupThemesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAdGroupThemesResponse) ProtoMessage() {}

func (x *GenerateAdGroupThemesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAdGroupThemesResponse.ProtoReflect.Descriptor instead.
func (*GenerateAdGroupThemesResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateAdGroupThemesResponse) GetAdGroupKeywordSuggestions() []*AdGroupKeywordSuggestion {
	if x != nil {
		return x.AdGroupKeywordSuggestions
	}
	return nil
}

func (x *GenerateAdGroupThemesResponse) GetUnusableAdGroups() []*UnusableAdGroup {
	if x != nil {
		return x.UnusableAdGroups
	}
	return nil
}

// The suggested text and AdGroup/Campaign pairing for a given keyword.
type AdGroupKeywordSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original keyword text.
	KeywordText string `protobuf:"bytes,1,opt,name=keyword_text,json=keywordText,proto3" json:"keyword_text,omitempty"`
	// The normalized version of keyword_text for BROAD/EXACT/PHRASE suggestions.
	SuggestedKeywordText string `protobuf:"bytes,2,opt,name=suggested_keyword_text,json=suggestedKeywordText,proto3" json:"suggested_keyword_text,omitempty"`
	// The suggested keyword match type.
	SuggestedMatchType enums.KeywordMatchTypeEnum_KeywordMatchType `protobuf:"varint,3,opt,name=suggested_match_type,json=suggestedMatchType,proto3,enum=google.ads.googleads.v15.enums.KeywordMatchTypeEnum_KeywordMatchType" json:"suggested_match_type,omitempty"`
	// The suggested AdGroup for the keyword.
	// Resource name format: `customers/{customer_id}/adGroups/{ad_group_id}`
	SuggestedAdGroup string `protobuf:"bytes,4,opt,name=suggested_ad_group,json=suggestedAdGroup,proto3" json:"suggested_ad_group,omitempty"`
	// The suggested Campaign for the keyword.
	// Resource name format: `customers/{customer_id}/campaigns/{campaign_id}`
	SuggestedCampaign string `protobuf:"bytes,5,opt,name=suggested_campaign,json=suggestedCampaign,proto3" json:"suggested_campaign,omitempty"`
}

func (x *AdGroupKeywordSuggestion) Reset() {
	*x = AdGroupKeywordSuggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdGroupKeywordSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdGroupKeywordSuggestion) ProtoMessage() {}

func (x *AdGroupKeywordSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdGroupKeywordSuggestion.ProtoReflect.Descriptor instead.
func (*AdGroupKeywordSuggestion) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{12}
}

func (x *AdGroupKeywordSuggestion) GetKeywordText() string {
	if x != nil {
		return x.KeywordText
	}
	return ""
}

func (x *AdGroupKeywordSuggestion) GetSuggestedKeywordText() string {
	if x != nil {
		return x.SuggestedKeywordText
	}
	return ""
}

func (x *AdGroupKeywordSuggestion) GetSuggestedMatchType() enums.KeywordMatchTypeEnum_KeywordMatchType {
	if x != nil {
		return x.SuggestedMatchType
	}
	return enums.KeywordMatchTypeEnum_KeywordMatchType(0)
}

func (x *AdGroupKeywordSuggestion) GetSuggestedAdGroup() string {
	if x != nil {
		return x.SuggestedAdGroup
	}
	return ""
}

func (x *AdGroupKeywordSuggestion) GetSuggestedCampaign() string {
	if x != nil {
		return x.SuggestedCampaign
	}
	return ""
}

// An AdGroup/Campaign pair that could not be used as a suggestion for keywords.
//
// # AdGroups may not be usable if the AdGroup
//
// * belongs to a Campaign that is not ENABLED or PAUSED
// * is itself not ENABLED
type UnusableAdGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The AdGroup resource name.
	// Resource name format: `customers/{customer_id}/adGroups/{ad_group_id}`
	AdGroup string `protobuf:"bytes,1,opt,name=ad_group,json=adGroup,proto3" json:"ad_group,omitempty"`
	// The Campaign resource name.
	// Resource name format: `customers/{customer_id}/campaigns/{campaign_id}`
	Campaign string `protobuf:"bytes,2,opt,name=campaign,proto3" json:"campaign,omitempty"`
}

func (x *UnusableAdGroup) Reset() {
	*x = UnusableAdGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnusableAdGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnusableAdGroup) ProtoMessage() {}

func (x *UnusableAdGroup) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnusableAdGroup.ProtoReflect.Descriptor instead.
func (*UnusableAdGroup) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{13}
}

func (x *UnusableAdGroup) GetAdGroup() string {
	if x != nil {
		return x.AdGroup
	}
	return ""
}

func (x *UnusableAdGroup) GetCampaign() string {
	if x != nil {
		return x.Campaign
	}
	return ""
}

// Request message for [KeywordPlanIdeaService.GenerateKeywordForecastMetrics].
type GenerateKeywordForecastMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// The currency used for exchange rate conversion.
	// By default, the account currency of the customer is used.
	// Set this field only if the currency is different from the account currency.
	// The list of valid currency codes can be found at
	// https://developers.google.com/google-ads/api/data/codes-formats#currency-codes.
	CurrencyCode *string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3,oneof" json:"currency_code,omitempty"`
	// The date range for the forecast. The start date must be in the future and
	// end date must be within 1 year from today. The reference timezone used is
	// the one of the Google Ads account belonging to the customer. If not set, a
	// default date range from next Sunday to the following Saturday will be used.
	ForecastPeriod *common.DateRange `protobuf:"bytes,3,opt,name=forecast_period,json=forecastPeriod,proto3" json:"forecast_period,omitempty"`
	// Required. The campaign used in the forecast.
	Campaign *CampaignToForecast `protobuf:"bytes,4,opt,name=campaign,proto3" json:"campaign,omitempty"`
}

func (x *GenerateKeywordForecastMetricsRequest) Reset() {
	*x = GenerateKeywordForecastMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeywordForecastMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeywordForecastMetricsRequest) ProtoMessage() {}

func (x *GenerateKeywordForecastMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeywordForecastMetricsRequest.ProtoReflect.Descriptor instead.
func (*GenerateKeywordForecastMetricsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateKeywordForecastMetricsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateKeywordForecastMetricsRequest) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *GenerateKeywordForecastMetricsRequest) GetForecastPeriod() *common.DateRange {
	if x != nil {
		return x.ForecastPeriod
	}
	return nil
}

func (x *GenerateKeywordForecastMetricsRequest) GetCampaign() *CampaignToForecast {
	if x != nil {
		return x.Campaign
	}
	return nil
}

// A campaign to do a keyword campaign forecast.
type CampaignToForecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of resource names of languages to be targeted. The resource name
	// is of the format "languageConstants/{criterion_id}". See
	// https://developers.google.com/google-ads/api/data/codes-formats#languages
	// for the list of language criterion codes.
	LanguageConstants []string `protobuf:"bytes,1,rep,name=language_constants,json=languageConstants,proto3" json:"language_constants,omitempty"`
	// Locations to be targeted. Locations must be unique.
	GeoModifiers []*CriterionBidModifier `protobuf:"bytes,2,rep,name=geo_modifiers,json=geoModifiers,proto3" json:"geo_modifiers,omitempty"`
	// Required. The network used for targeting.
	KeywordPlanNetwork enums.KeywordPlanNetworkEnum_KeywordPlanNetwork `protobuf:"varint,3,opt,name=keyword_plan_network,json=keywordPlanNetwork,proto3,enum=google.ads.googleads.v15.enums.KeywordPlanNetworkEnum_KeywordPlanNetwork" json:"keyword_plan_network,omitempty"`
	// The list of negative keywords to be used in the campaign when doing the
	// forecast.
	NegativeKeywords []*common.KeywordInfo `protobuf:"bytes,4,rep,name=negative_keywords,json=negativeKeywords,proto3" json:"negative_keywords,omitempty"`
	// Required. The bidding strategy for the campaign.
	BiddingStrategy *CampaignToForecast_CampaignBiddingStrategy `protobuf:"bytes,5,opt,name=bidding_strategy,json=biddingStrategy,proto3" json:"bidding_strategy,omitempty"`
	// The expected conversion rate (number of conversions divided by number of
	// total clicks) as defined by the user. This value is expressed as a decimal
	// value, so an expected conversion rate of 2% should be entered as 0.02. If
	// left empty, an estimated conversion rate will be used.
	ConversionRate *float64 `protobuf:"fixed64,6,opt,name=conversion_rate,json=conversionRate,proto3,oneof" json:"conversion_rate,omitempty"`
	// The ad groups in the new campaign to forecast.
	AdGroups []*ForecastAdGroup `protobuf:"bytes,7,rep,name=ad_groups,json=adGroups,proto3" json:"ad_groups,omitempty"`
}

func (x *CampaignToForecast) Reset() {
	*x = CampaignToForecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignToForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignToForecast) ProtoMessage() {}

func (x *CampaignToForecast) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignToForecast.ProtoReflect.Descriptor instead.
func (*CampaignToForecast) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{15}
}

func (x *CampaignToForecast) GetLanguageConstants() []string {
	if x != nil {
		return x.LanguageConstants
	}
	return nil
}

func (x *CampaignToForecast) GetGeoModifiers() []*CriterionBidModifier {
	if x != nil {
		return x.GeoModifiers
	}
	return nil
}

func (x *CampaignToForecast) GetKeywordPlanNetwork() enums.KeywordPlanNetworkEnum_KeywordPlanNetwork {
	if x != nil {
		return x.KeywordPlanNetwork
	}
	return enums.KeywordPlanNetworkEnum_KeywordPlanNetwork(0)
}

func (x *CampaignToForecast) GetNegativeKeywords() []*common.KeywordInfo {
	if x != nil {
		return x.NegativeKeywords
	}
	return nil
}

func (x *CampaignToForecast) GetBiddingStrategy() *CampaignToForecast_CampaignBiddingStrategy {
	if x != nil {
		return x.BiddingStrategy
	}
	return nil
}

func (x *CampaignToForecast) GetConversionRate() float64 {
	if x != nil && x.ConversionRate != nil {
		return *x.ConversionRate
	}
	return 0
}

func (x *CampaignToForecast) GetAdGroups() []*ForecastAdGroup {
	if x != nil {
		return x.AdGroups
	}
	return nil
}

// An ad group that is part of a campaign to be forecasted.
type ForecastAdGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The max cpc to use for the ad group when generating forecasted traffic.
	// This value will override the max cpc value set in the bidding strategy.
	// Only specify this field for bidding strategies that max cpc values.
	MaxCpcBidMicros *int64 `protobuf:"varint,1,opt,name=max_cpc_bid_micros,json=maxCpcBidMicros,proto3,oneof" json:"max_cpc_bid_micros,omitempty"`
	// Required. The list of biddable keywords to be used in the ad group when
	// doing the forecast. Requires at least one keyword.
	BiddableKeywords []*BiddableKeyword `protobuf:"bytes,2,rep,name=biddable_keywords,json=biddableKeywords,proto3" json:"biddable_keywords,omitempty"`
	// The details of the keyword. You should specify both the keyword text and
	// match type.
	NegativeKeywords []*common.KeywordInfo `protobuf:"bytes,3,rep,name=negative_keywords,json=negativeKeywords,proto3" json:"negative_keywords,omitempty"`
}

func (x *ForecastAdGroup) Reset() {
	*x = ForecastAdGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastAdGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastAdGroup) ProtoMessage() {}

func (x *ForecastAdGroup) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastAdGroup.ProtoReflect.Descriptor instead.
func (*ForecastAdGroup) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{16}
}

func (x *ForecastAdGroup) GetMaxCpcBidMicros() int64 {
	if x != nil && x.MaxCpcBidMicros != nil {
		return *x.MaxCpcBidMicros
	}
	return 0
}

func (x *ForecastAdGroup) GetBiddableKeywords() []*BiddableKeyword {
	if x != nil {
		return x.BiddableKeywords
	}
	return nil
}

func (x *ForecastAdGroup) GetNegativeKeywords() []*common.KeywordInfo {
	if x != nil {
		return x.NegativeKeywords
	}
	return nil
}

// A biddable keyword part of an ad group.
type BiddableKeyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Keyword. Must have text and match type.
	Keyword *common.KeywordInfo `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// A max cpc bid in micros that overrides the ad group level max cpc bid in
	// forecast simulation. This value will override the max cpc value set in the
	// bidding strategy and ad group. Only specify this field for bidding
	// strategies that support max cpc values.
	MaxCpcBidMicros *int64 `protobuf:"varint,2,opt,name=max_cpc_bid_micros,json=maxCpcBidMicros,proto3,oneof" json:"max_cpc_bid_micros,omitempty"`
}

func (x *BiddableKeyword) Reset() {
	*x = BiddableKeyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiddableKeyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiddableKeyword) ProtoMessage() {}

func (x *BiddableKeyword) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiddableKeyword.ProtoReflect.Descriptor instead.
func (*BiddableKeyword) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{17}
}

func (x *BiddableKeyword) GetKeyword() *common.KeywordInfo {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *BiddableKeyword) GetMaxCpcBidMicros() int64 {
	if x != nil && x.MaxCpcBidMicros != nil {
		return *x.MaxCpcBidMicros
	}
	return 0
}

// Location Criterion bid modifier.
type CriterionBidModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the geo location to target. The resource name is of
	// the format "geoTargetConstants/{criterion_id}".
	GeoTargetConstant string `protobuf:"bytes,1,opt,name=geo_target_constant,json=geoTargetConstant,proto3" json:"geo_target_constant,omitempty"`
	// The associated multiplier for the criterion_id. If set, this value cannot
	// be 0.
	BidModifier *float64 `protobuf:"fixed64,2,opt,name=bid_modifier,json=bidModifier,proto3,oneof" json:"bid_modifier,omitempty"`
}

func (x *CriterionBidModifier) Reset() {
	*x = CriterionBidModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriterionBidModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriterionBidModifier) ProtoMessage() {}

func (x *CriterionBidModifier) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriterionBidModifier.ProtoReflect.Descriptor instead.
func (*CriterionBidModifier) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{18}
}

func (x *CriterionBidModifier) GetGeoTargetConstant() string {
	if x != nil {
		return x.GeoTargetConstant
	}
	return ""
}

func (x *CriterionBidModifier) GetBidModifier() float64 {
	if x != nil && x.BidModifier != nil {
		return *x.BidModifier
	}
	return 0
}

// Manual CPC Bidding Strategy.
type ManualCpcBiddingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Campaign level budget in micros. If set, a minimum value
	// is enforced for the local currency used in the campaign. An error
	// will occur showing the minimum value if this field is set too low.
	DailyBudgetMicros *int64 `protobuf:"varint,1,opt,name=daily_budget_micros,json=dailyBudgetMicros,proto3,oneof" json:"daily_budget_micros,omitempty"`
	// Required. A bid in micros to be applied to ad groups within the campaign
	// for a manual CPC bidding strategy.
	MaxCpcBidMicros int64 `protobuf:"varint,2,opt,name=max_cpc_bid_micros,json=maxCpcBidMicros,proto3" json:"max_cpc_bid_micros,omitempty"`
}

func (x *ManualCpcBiddingStrategy) Reset() {
	*x = ManualCpcBiddingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualCpcBiddingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualCpcBiddingStrategy) ProtoMessage() {}

func (x *ManualCpcBiddingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualCpcBiddingStrategy.ProtoReflect.Descriptor instead.
func (*ManualCpcBiddingStrategy) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{19}
}

func (x *ManualCpcBiddingStrategy) GetDailyBudgetMicros() int64 {
	if x != nil && x.DailyBudgetMicros != nil {
		return *x.DailyBudgetMicros
	}
	return 0
}

func (x *ManualCpcBiddingStrategy) GetMaxCpcBidMicros() int64 {
	if x != nil {
		return x.MaxCpcBidMicros
	}
	return 0
}

// Maximize Clicks Bidding Strategy.
type MaximizeClicksBiddingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The daily target spend in micros to be used for estimation. A
	// minimum value is enforced for the local currency used in the campaign. An
	// error will occur showing the minimum value if this field is set too low.
	DailyTargetSpendMicros int64 `protobuf:"varint,1,opt,name=daily_target_spend_micros,json=dailyTargetSpendMicros,proto3" json:"daily_target_spend_micros,omitempty"`
	// Ceiling on max CPC bids in micros.
	MaxCpcBidCeilingMicros *int64 `protobuf:"varint,2,opt,name=max_cpc_bid_ceiling_micros,json=maxCpcBidCeilingMicros,proto3,oneof" json:"max_cpc_bid_ceiling_micros,omitempty"`
}

func (x *MaximizeClicksBiddingStrategy) Reset() {
	*x = MaximizeClicksBiddingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaximizeClicksBiddingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximizeClicksBiddingStrategy) ProtoMessage() {}

func (x *MaximizeClicksBiddingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximizeClicksBiddingStrategy.ProtoReflect.Descriptor instead.
func (*MaximizeClicksBiddingStrategy) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{20}
}

func (x *MaximizeClicksBiddingStrategy) GetDailyTargetSpendMicros() int64 {
	if x != nil {
		return x.DailyTargetSpendMicros
	}
	return 0
}

func (x *MaximizeClicksBiddingStrategy) GetMaxCpcBidCeilingMicros() int64 {
	if x != nil && x.MaxCpcBidCeilingMicros != nil {
		return *x.MaxCpcBidCeilingMicros
	}
	return 0
}

// Maximize Conversions Bidding Strategy.
type MaximizeConversionsBiddingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The daily target spend in micros to be used for estimation. This
	// value must be greater than zero.
	DailyTargetSpendMicros int64 `protobuf:"varint,1,opt,name=daily_target_spend_micros,json=dailyTargetSpendMicros,proto3" json:"daily_target_spend_micros,omitempty"`
}

func (x *MaximizeConversionsBiddingStrategy) Reset() {
	*x = MaximizeConversionsBiddingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaximizeConversionsBiddingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximizeConversionsBiddingStrategy) ProtoMessage() {}

func (x *MaximizeConversionsBiddingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximizeConversionsBiddingStrategy.ProtoReflect.Descriptor instead.
func (*MaximizeConversionsBiddingStrategy) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{21}
}

func (x *MaximizeConversionsBiddingStrategy) GetDailyTargetSpendMicros() int64 {
	if x != nil {
		return x.DailyTargetSpendMicros
	}
	return 0
}

// Response message for [KeywordPlanIdeaService.GenerateKeywordForecastMetrics].
type GenerateKeywordForecastMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Results of the campaign forecast.
	CampaignForecastMetrics *KeywordForecastMetrics `protobuf:"bytes,1,opt,name=campaign_forecast_metrics,json=campaignForecastMetrics,proto3,oneof" json:"campaign_forecast_metrics,omitempty"`
}

func (x *GenerateKeywordForecastMetricsResponse) Reset() {
	*x = GenerateKeywordForecastMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeywordForecastMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeywordForecastMetricsResponse) ProtoMessage() {}

func (x *GenerateKeywordForecastMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeywordForecastMetricsResponse.ProtoReflect.Descriptor instead.
func (*GenerateKeywordForecastMetricsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{22}
}

func (x *GenerateKeywordForecastMetricsResponse) GetCampaignForecastMetrics() *KeywordForecastMetrics {
	if x != nil {
		return x.CampaignForecastMetrics
	}
	return nil
}

// The forecast metrics for the planless keyword campaign.
type KeywordForecastMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of impressions.
	Impressions *float64 `protobuf:"fixed64,1,opt,name=impressions,proto3,oneof" json:"impressions,omitempty"`
	// The average click through rate. Available only if impressions > 0.
	ClickThroughRate *float64 `protobuf:"fixed64,2,opt,name=click_through_rate,json=clickThroughRate,proto3,oneof" json:"click_through_rate,omitempty"`
	// The average cpc. Available only if clicks > 0.
	AverageCpcMicros *int64 `protobuf:"varint,3,opt,name=average_cpc_micros,json=averageCpcMicros,proto3,oneof" json:"average_cpc_micros,omitempty"`
	// The total number of clicks.
	Clicks *float64 `protobuf:"fixed64,4,opt,name=clicks,proto3,oneof" json:"clicks,omitempty"`
	// The total cost.
	CostMicros *int64 `protobuf:"varint,5,opt,name=cost_micros,json=costMicros,proto3,oneof" json:"cost_micros,omitempty"`
	// Forecasted number of conversions: clicks * conversion_rate.
	Conversions *float64 `protobuf:"fixed64,6,opt,name=conversions,proto3,oneof" json:"conversions,omitempty"`
	// Forecasted conversion rate.
	ConversionRate *float64 `protobuf:"fixed64,7,opt,name=conversion_rate,json=conversionRate,proto3,oneof" json:"conversion_rate,omitempty"`
	// Average cost per acquisition calculated as cost_micros / conversions.
	AverageCpaMicros *int64 `protobuf:"varint,8,opt,name=average_cpa_micros,json=averageCpaMicros,proto3,oneof" json:"average_cpa_micros,omitempty"`
}

func (x *KeywordForecastMetrics) Reset() {
	*x = KeywordForecastMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordForecastMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordForecastMetrics) ProtoMessage() {}

func (x *KeywordForecastMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordForecastMetrics.ProtoReflect.Descriptor instead.
func (*KeywordForecastMetrics) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{23}
}

func (x *KeywordForecastMetrics) GetImpressions() float64 {
	if x != nil && x.Impressions != nil {
		return *x.Impressions
	}
	return 0
}

func (x *KeywordForecastMetrics) GetClickThroughRate() float64 {
	if x != nil && x.ClickThroughRate != nil {
		return *x.ClickThroughRate
	}
	return 0
}

func (x *KeywordForecastMetrics) GetAverageCpcMicros() int64 {
	if x != nil && x.AverageCpcMicros != nil {
		return *x.AverageCpcMicros
	}
	return 0
}

func (x *KeywordForecastMetrics) GetClicks() float64 {
	if x != nil && x.Clicks != nil {
		return *x.Clicks
	}
	return 0
}

func (x *KeywordForecastMetrics) GetCostMicros() int64 {
	if x != nil && x.CostMicros != nil {
		return *x.CostMicros
	}
	return 0
}

func (x *KeywordForecastMetrics) GetConversions() float64 {
	if x != nil && x.Conversions != nil {
		return *x.Conversions
	}
	return 0
}

func (x *KeywordForecastMetrics) GetConversionRate() float64 {
	if x != nil && x.ConversionRate != nil {
		return *x.ConversionRate
	}
	return 0
}

func (x *KeywordForecastMetrics) GetAverageCpaMicros() int64 {
	if x != nil && x.AverageCpaMicros != nil {
		return *x.AverageCpaMicros
	}
	return 0
}

// Supported bidding strategies for new campaign forecasts.
type CampaignToForecast_CampaignBiddingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bidding strategies.
	//
	// Types that are assignable to BiddingStrategy:
	//
	//	*CampaignToForecast_CampaignBiddingStrategy_ManualCpcBiddingStrategy
	//	*CampaignToForecast_CampaignBiddingStrategy_MaximizeClicksBiddingStrategy
	//	*CampaignToForecast_CampaignBiddingStrategy_MaximizeConversionsBiddingStrategy
	BiddingStrategy isCampaignToForecast_CampaignBiddingStrategy_BiddingStrategy `protobuf_oneof:"bidding_strategy"`
}

func (x *CampaignToForecast_CampaignBiddingStrategy) Reset() {
	*x = CampaignToForecast_CampaignBiddingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignToForecast_CampaignBiddingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignToForecast_CampaignBiddingStrategy) ProtoMessage() {}

func (x *CampaignToForecast_CampaignBiddingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignToForecast_CampaignBiddingStrategy.ProtoReflect.Descriptor instead.
func (*CampaignToForecast_CampaignBiddingStrategy) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP(), []int{15, 0}
}

func (m *CampaignToForecast_CampaignBiddingStrategy) GetBiddingStrategy() isCampaignToForecast_CampaignBiddingStrategy_BiddingStrategy {
	if m != nil {
		return m.BiddingStrategy
	}
	return nil
}

func (x *CampaignToForecast_CampaignBiddingStrategy) GetManualCpcBiddingStrategy() *ManualCpcBiddingStrategy {
	if x, ok := x.GetBiddingStrategy().(*CampaignToForecast_CampaignBiddingStrategy_ManualCpcBiddingStrategy); ok {
		return x.ManualCpcBiddingStrategy
	}
	return nil
}

func (x *CampaignToForecast_CampaignBiddingStrategy) GetMaximizeClicksBiddingStrategy() *MaximizeClicksBiddingStrategy {
	if x, ok := x.GetBiddingStrategy().(*CampaignToForecast_CampaignBiddingStrategy_MaximizeClicksBiddingStrategy); ok {
		return x.MaximizeClicksBiddingStrategy
	}
	return nil
}

func (x *CampaignToForecast_CampaignBiddingStrategy) GetMaximizeConversionsBiddingStrategy() *MaximizeConversionsBiddingStrategy {
	if x, ok := x.GetBiddingStrategy().(*CampaignToForecast_CampaignBiddingStrategy_MaximizeConversionsBiddingStrategy); ok {
		return x.MaximizeConversionsBiddingStrategy
	}
	return nil
}

type isCampaignToForecast_CampaignBiddingStrategy_BiddingStrategy interface {
	isCampaignToForecast_CampaignBiddingStrategy_BiddingStrategy()
}

type CampaignToForecast_CampaignBiddingStrategy_ManualCpcBiddingStrategy struct {
	// Use manual CPC bidding strategy for forecasting.
	ManualCpcBiddingStrategy *ManualCpcBiddingStrategy `protobuf:"bytes,1,opt,name=manual_cpc_bidding_strategy,json=manualCpcBiddingStrategy,proto3,oneof"`
}

type CampaignToForecast_CampaignBiddingStrategy_MaximizeClicksBiddingStrategy struct {
	// Use maximize clicks bidding strategy for forecasting.
	MaximizeClicksBiddingStrategy *MaximizeClicksBiddingStrategy `protobuf:"bytes,2,opt,name=maximize_clicks_bidding_strategy,json=maximizeClicksBiddingStrategy,proto3,oneof"`
}

type CampaignToForecast_CampaignBiddingStrategy_MaximizeConversionsBiddingStrategy struct {
	// Use maximize conversions bidding strategy for forecasting.
	MaximizeConversionsBiddingStrategy *MaximizeConversionsBiddingStrategy `protobuf:"bytes,3,opt,name=maximize_conversions_bidding_strategy,json=maximizeConversionsBiddingStrategy,proto3,oneof"`
}

func (*CampaignToForecast_CampaignBiddingStrategy_ManualCpcBiddingStrategy) isCampaignToForecast_CampaignBiddingStrategy_BiddingStrategy() {
}

func (*CampaignToForecast_CampaignBiddingStrategy_MaximizeClicksBiddingStrategy) isCampaignToForecast_CampaignBiddingStrategy_BiddingStrategy() {
}

func (*CampaignToForecast_CampaignBiddingStrategy_MaximizeConversionsBiddingStrategy) isCampaignToForecast_CampaignBiddingStrategy_BiddingStrategy() {
}

var File_google_ads_googleads_v15_services_keyword_plan_idea_service_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDesc = []byte{
	0x0a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x65, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdb, 0x08, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x65, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x67, 0x65, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x64, 0x75,
	0x6c, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x12, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x5d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x10, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x77, 0x0a,
	0x1a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x18, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x41, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x53, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x53, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x72, 0x6c, 0x53, 0x65,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x53, 0x65, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x53, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x69, 0x74, 0x65, 0x53, 0x65, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x4e,
	0x0a, 0x11, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x29,
	0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x08, 0x53, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x53, 0x65,
	0x65, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72,
	0x6c, 0x22, 0xba, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x7c, 0x0a, 0x18, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbb,
	0x02, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x65, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x65, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x61, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x64, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0xdd, 0x04, 0x0a,
	0x27, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41,
	0x64, 0x75, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x67, 0x65, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x67, 0x65, 0x6f, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x7b,
	0x0a, 0x14, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x69, 0x0a, 0x11, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x77, 0x0a, 0x1a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x02, 0x0a,
	0x28, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x7c,
	0x0a, 0x18, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd9, 0x01, 0x0a,
	0x26, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x0e, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x20, 0x0a, 0x09, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1c, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x60, 0x0a, 0x12, 0x75, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x55, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x10, 0x75, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x77, 0x0a, 0x14, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x22, 0x48, 0x0a, 0x0f, 0x55, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0xb1, 0x02, 0x0a, 0x25, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xea,
	0x08, 0x0a, 0x12, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x67, 0x65, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x59, 0x0a, 0x11, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x7d, 0x0a, 0x10, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f,
	0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x09, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0xd6,
	0x03, 0x0a, 0x17, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x7c, 0x0a, 0x1b, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x63, 0x42, 0x69, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x18,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x63, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x20, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x62, 0x69, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x25, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x69,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52,
	0x22, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x0f,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x30, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x43, 0x70, 0x63, 0x42, 0x69, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x64, 0x0a, 0x11, 0x62, 0x69, 0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x42, 0x69, 0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x62, 0x69, 0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x62,
	0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x42, 0x69,
	0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4b, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x63,
	0x42, 0x69, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x22, 0x7f, 0x0a, 0x14, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67,
	0x65, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x65, 0x6f, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x62,
	0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43,
	0x70, 0x63, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x33, 0x0a, 0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70,
	0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x63, 0x42,
	0x69, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x1d, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x3e, 0x0a, 0x19, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x12, 0x3f, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x62, 0x69,
	0x64, 0x5f, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x63,
	0x42, 0x69, 0x64, 0x43, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x63, 0x5f,
	0x62, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x22, 0x64, 0x0a, 0x22, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3e, 0x0a, 0x19, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x16, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x19, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x17, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x84, 0x04,
	0x0a, 0x16, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x10, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x52, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x70,
	0x63, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x70, 0x63, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x70, 0x61, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x10, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x70, 0x61, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x70, 0x61, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x32, 0xa2, 0x08, 0x0a, 0x16, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x65, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xd6, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x61, 0x73, 0x12, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38,
	0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x61, 0x73, 0x12, 0x87, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x01,
	0x2a, 0x22, 0x3f, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x35,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0xff, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x3a, 0x01, 0x2a, 0x22, 0x3d, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x1a, 0x45, 0xca, 0x41, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2,
	0x41, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x61, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x87, 0x02, 0x0a, 0x25, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x42, 0x1b, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x65, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x49, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xa2, 0x02, 0x03,
	0x47, 0x41, 0x41, 0xaa, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31, 0x35, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xca, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56,
	0x31, 0x35, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xea, 0x02, 0x25, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x35, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescData = file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDesc
)

func file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescData)
	})
	return file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDescData
}

var file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_goTypes = []interface{}{
	(*GenerateKeywordIdeasRequest)(nil),                                      // 0: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest
	(*KeywordAndUrlSeed)(nil),                                                // 1: google.ads.googleads.v15.services.KeywordAndUrlSeed
	(*KeywordSeed)(nil),                                                      // 2: google.ads.googleads.v15.services.KeywordSeed
	(*SiteSeed)(nil),                                                         // 3: google.ads.googleads.v15.services.SiteSeed
	(*UrlSeed)(nil),                                                          // 4: google.ads.googleads.v15.services.UrlSeed
	(*GenerateKeywordIdeaResponse)(nil),                                      // 5: google.ads.googleads.v15.services.GenerateKeywordIdeaResponse
	(*GenerateKeywordIdeaResult)(nil),                                        // 6: google.ads.googleads.v15.services.GenerateKeywordIdeaResult
	(*GenerateKeywordHistoricalMetricsRequest)(nil),                          // 7: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsRequest
	(*GenerateKeywordHistoricalMetricsResponse)(nil),                         // 8: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsResponse
	(*GenerateKeywordHistoricalMetricsResult)(nil),                           // 9: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsResult
	(*GenerateAdGroupThemesRequest)(nil),                                     // 10: google.ads.googleads.v15.services.GenerateAdGroupThemesRequest
	(*GenerateAdGroupThemesResponse)(nil),                                    // 11: google.ads.googleads.v15.services.GenerateAdGroupThemesResponse
	(*AdGroupKeywordSuggestion)(nil),                                         // 12: google.ads.googleads.v15.services.AdGroupKeywordSuggestion
	(*UnusableAdGroup)(nil),                                                  // 13: google.ads.googleads.v15.services.UnusableAdGroup
	(*GenerateKeywordForecastMetricsRequest)(nil),                            // 14: google.ads.googleads.v15.services.GenerateKeywordForecastMetricsRequest
	(*CampaignToForecast)(nil),                                               // 15: google.ads.googleads.v15.services.CampaignToForecast
	(*ForecastAdGroup)(nil),                                                  // 16: google.ads.googleads.v15.services.ForecastAdGroup
	(*BiddableKeyword)(nil),                                                  // 17: google.ads.googleads.v15.services.BiddableKeyword
	(*CriterionBidModifier)(nil),                                             // 18: google.ads.googleads.v15.services.CriterionBidModifier
	(*ManualCpcBiddingStrategy)(nil),                                         // 19: google.ads.googleads.v15.services.ManualCpcBiddingStrategy
	(*MaximizeClicksBiddingStrategy)(nil),                                    // 20: google.ads.googleads.v15.services.MaximizeClicksBiddingStrategy
	(*MaximizeConversionsBiddingStrategy)(nil),                               // 21: google.ads.googleads.v15.services.MaximizeConversionsBiddingStrategy
	(*GenerateKeywordForecastMetricsResponse)(nil),                           // 22: google.ads.googleads.v15.services.GenerateKeywordForecastMetricsResponse
	(*KeywordForecastMetrics)(nil),                                           // 23: google.ads.googleads.v15.services.KeywordForecastMetrics
	(*CampaignToForecast_CampaignBiddingStrategy)(nil),                       // 24: google.ads.googleads.v15.services.CampaignToForecast.CampaignBiddingStrategy
	(enums.KeywordPlanNetworkEnum_KeywordPlanNetwork)(0),                     // 25: google.ads.googleads.v15.enums.KeywordPlanNetworkEnum.KeywordPlanNetwork
	(enums.KeywordPlanKeywordAnnotationEnum_KeywordPlanKeywordAnnotation)(0), // 26: google.ads.googleads.v15.enums.KeywordPlanKeywordAnnotationEnum.KeywordPlanKeywordAnnotation
	(*common.KeywordPlanAggregateMetrics)(nil),                               // 27: google.ads.googleads.v15.common.KeywordPlanAggregateMetrics
	(*common.HistoricalMetricsOptions)(nil),                                  // 28: google.ads.googleads.v15.common.HistoricalMetricsOptions
	(*common.KeywordPlanAggregateMetricResults)(nil),                         // 29: google.ads.googleads.v15.common.KeywordPlanAggregateMetricResults
	(*common.KeywordPlanHistoricalMetrics)(nil),                              // 30: google.ads.googleads.v15.common.KeywordPlanHistoricalMetrics
	(*common.KeywordAnnotations)(nil),                                        // 31: google.ads.googleads.v15.common.KeywordAnnotations
	(enums.KeywordMatchTypeEnum_KeywordMatchType)(0),                         // 32: google.ads.googleads.v15.enums.KeywordMatchTypeEnum.KeywordMatchType
	(*common.DateRange)(nil),                                                 // 33: google.ads.googleads.v15.common.DateRange
	(*common.KeywordInfo)(nil),                                               // 34: google.ads.googleads.v15.common.KeywordInfo
}
var file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_depIdxs = []int32{
	25, // 0: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest.keyword_plan_network:type_name -> google.ads.googleads.v15.enums.KeywordPlanNetworkEnum.KeywordPlanNetwork
	26, // 1: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest.keyword_annotation:type_name -> google.ads.googleads.v15.enums.KeywordPlanKeywordAnnotationEnum.KeywordPlanKeywordAnnotation
	27, // 2: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest.aggregate_metrics:type_name -> google.ads.googleads.v15.common.KeywordPlanAggregateMetrics
	28, // 3: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest.historical_metrics_options:type_name -> google.ads.googleads.v15.common.HistoricalMetricsOptions
	1,  // 4: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest.keyword_and_url_seed:type_name -> google.ads.googleads.v15.services.KeywordAndUrlSeed
	2,  // 5: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest.keyword_seed:type_name -> google.ads.googleads.v15.services.KeywordSeed
	4,  // 6: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest.url_seed:type_name -> google.ads.googleads.v15.services.UrlSeed
	3,  // 7: google.ads.googleads.v15.services.GenerateKeywordIdeasRequest.site_seed:type_name -> google.ads.googleads.v15.services.SiteSeed
	6,  // 8: google.ads.googleads.v15.services.GenerateKeywordIdeaResponse.results:type_name -> google.ads.googleads.v15.services.GenerateKeywordIdeaResult
	29, // 9: google.ads.googleads.v15.services.GenerateKeywordIdeaResponse.aggregate_metric_results:type_name -> google.ads.googleads.v15.common.KeywordPlanAggregateMetricResults
	30, // 10: google.ads.googleads.v15.services.GenerateKeywordIdeaResult.keyword_idea_metrics:type_name -> google.ads.googleads.v15.common.KeywordPlanHistoricalMetrics
	31, // 11: google.ads.googleads.v15.services.GenerateKeywordIdeaResult.keyword_annotations:type_name -> google.ads.googleads.v15.common.KeywordAnnotations
	25, // 12: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsRequest.keyword_plan_network:type_name -> google.ads.googleads.v15.enums.KeywordPlanNetworkEnum.KeywordPlanNetwork
	27, // 13: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsRequest.aggregate_metrics:type_name -> google.ads.googleads.v15.common.KeywordPlanAggregateMetrics
	28, // 14: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsRequest.historical_metrics_options:type_name -> google.ads.googleads.v15.common.HistoricalMetricsOptions
	9,  // 15: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsResponse.results:type_name -> google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsResult
	29, // 16: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsResponse.aggregate_metric_results:type_name -> google.ads.googleads.v15.common.KeywordPlanAggregateMetricResults
	30, // 17: google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsResult.keyword_metrics:type_name -> google.ads.googleads.v15.common.KeywordPlanHistoricalMetrics
	12, // 18: google.ads.googleads.v15.services.GenerateAdGroupThemesResponse.ad_group_keyword_suggestions:type_name -> google.ads.googleads.v15.services.AdGroupKeywordSuggestion
	13, // 19: google.ads.googleads.v15.services.GenerateAdGroupThemesResponse.unusable_ad_groups:type_name -> google.ads.googleads.v15.services.UnusableAdGroup
	32, // 20: google.ads.googleads.v15.services.AdGroupKeywordSuggestion.suggested_match_type:type_name -> google.ads.googleads.v15.enums.KeywordMatchTypeEnum.KeywordMatchType
	33, // 21: google.ads.googleads.v15.services.GenerateKeywordForecastMetricsRequest.forecast_period:type_name -> google.ads.googleads.v15.common.DateRange
	15, // 22: google.ads.googleads.v15.services.GenerateKeywordForecastMetricsRequest.campaign:type_name -> google.ads.googleads.v15.services.CampaignToForecast
	18, // 23: google.ads.googleads.v15.services.CampaignToForecast.geo_modifiers:type_name -> google.ads.googleads.v15.services.CriterionBidModifier
	25, // 24: google.ads.googleads.v15.services.CampaignToForecast.keyword_plan_network:type_name -> google.ads.googleads.v15.enums.KeywordPlanNetworkEnum.KeywordPlanNetwork
	34, // 25: google.ads.googleads.v15.services.CampaignToForecast.negative_keywords:type_name -> google.ads.googleads.v15.common.KeywordInfo
	24, // 26: google.ads.googleads.v15.services.CampaignToForecast.bidding_strategy:type_name -> google.ads.googleads.v15.services.CampaignToForecast.CampaignBiddingStrategy
	16, // 27: google.ads.googleads.v15.services.CampaignToForecast.ad_groups:type_name -> google.ads.googleads.v15.services.ForecastAdGroup
	17, // 28: google.ads.googleads.v15.services.ForecastAdGroup.biddable_keywords:type_name -> google.ads.googleads.v15.services.BiddableKeyword
	34, // 29: google.ads.googleads.v15.services.ForecastAdGroup.negative_keywords:type_name -> google.ads.googleads.v15.common.KeywordInfo
	34, // 30: google.ads.googleads.v15.services.BiddableKeyword.keyword:type_name -> google.ads.googleads.v15.common.KeywordInfo
	23, // 31: google.ads.googleads.v15.services.GenerateKeywordForecastMetricsResponse.campaign_forecast_metrics:type_name -> google.ads.googleads.v15.services.KeywordForecastMetrics
	19, // 32: google.ads.googleads.v15.services.CampaignToForecast.CampaignBiddingStrategy.manual_cpc_bidding_strategy:type_name -> google.ads.googleads.v15.services.ManualCpcBiddingStrategy
	20, // 33: google.ads.googleads.v15.services.CampaignToForecast.CampaignBiddingStrategy.maximize_clicks_bidding_strategy:type_name -> google.ads.googleads.v15.services.MaximizeClicksBiddingStrategy
	21, // 34: google.ads.googleads.v15.services.CampaignToForecast.CampaignBiddingStrategy.maximize_conversions_bidding_strategy:type_name -> google.ads.googleads.v15.services.MaximizeConversionsBiddingStrategy
	0,  // 35: google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordIdeas:input_type -> google.ads.googleads.v15.services.GenerateKeywordIdeasRequest
	7,  // 36: google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics:input_type -> google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsRequest
	10, // 37: google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateAdGroupThemes:input_type -> google.ads.googleads.v15.services.GenerateAdGroupThemesRequest
	14, // 38: google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordForecastMetrics:input_type -> google.ads.googleads.v15.services.GenerateKeywordForecastMetricsRequest
	5,  // 39: google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordIdeas:output_type -> google.ads.googleads.v15.services.GenerateKeywordIdeaResponse
	8,  // 40: google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics:output_type -> google.ads.googleads.v15.services.GenerateKeywordHistoricalMetricsResponse
	11, // 41: google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateAdGroupThemes:output_type -> google.ads.googleads.v15.services.GenerateAdGroupThemesResponse
	22, // 42: google.ads.googleads.v15.services.KeywordPlanIdeaService.GenerateKeywordForecastMetrics:output_type -> google.ads.googleads.v15.services.GenerateKeywordForecastMetricsResponse
	39, // [39:43] is the sub-list for method output_type
	35, // [35:39] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_init() }
func file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_init() {
	if File_google_ads_googleads_v15_services_keyword_plan_idea_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeywordIdeasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordAndUrlSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeywordIdeaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeywordIdeaResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeywordHistoricalMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeywordHistoricalMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeywordHistoricalMetricsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAdGroupThemesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAdGroupThemesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdGroupKeywordSuggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnusableAdGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeywordForecastMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignToForecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastAdGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiddableKeyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriterionBidModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualCpcBiddingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaximizeClicksBiddingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaximizeConversionsBiddingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeywordForecastMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordForecastMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignToForecast_CampaignBiddingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GenerateKeywordIdeasRequest_KeywordAndUrlSeed)(nil),
		(*GenerateKeywordIdeasRequest_KeywordSeed)(nil),
		(*GenerateKeywordIdeasRequest_UrlSeed)(nil),
		(*GenerateKeywordIdeasRequest_SiteSeed)(nil),
	}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*CampaignToForecast_CampaignBiddingStrategy_ManualCpcBiddingStrategy)(nil),
		(*CampaignToForecast_CampaignBiddingStrategy_MaximizeClicksBiddingStrategy)(nil),
		(*CampaignToForecast_CampaignBiddingStrategy_MaximizeConversionsBiddingStrategy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v15_services_keyword_plan_idea_service_proto = out.File
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_rawDesc = nil
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_goTypes = nil
	file_google_ads_googleads_v15_services_keyword_plan_idea_service_proto_depIdxs = nil
}
