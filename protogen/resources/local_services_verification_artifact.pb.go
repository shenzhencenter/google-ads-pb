// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.1
// source: google/ads/googleads/v15/resources/local_services_verification_artifact.proto

package resources

import (
	common "github.com/Optable/google-ads-pb/protogen/common"
	enums "github.com/Optable/google-ads-pb/protogen/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A local services verification resource.
type LocalServicesVerificationArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. The resource name of the Local Services Verification.
	// Local Services Verification resource names have the form:
	//
	// `customers/{customer_id}/localServicesVerificationArtifacts/{verification_artifact_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. The ID of the verification artifact.
	Id *int64 `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Output only. The timestamp when this verification artifact was created.
	// The format is "YYYY-MM-DD HH:MM:SS" in the Google Ads account's timezone.
	// Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
	CreationDateTime string `protobuf:"bytes,3,opt,name=creation_date_time,json=creationDateTime,proto3" json:"creation_date_time,omitempty"`
	// Output only. The status of the verification artifact.
	Status enums.LocalServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatus `protobuf:"varint,4,opt,name=status,proto3,enum=google.ads.googleads.v15.enums.LocalServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatus" json:"status,omitempty"`
	// Output only. The type of the verification artifact.
	ArtifactType enums.LocalServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactType `protobuf:"varint,5,opt,name=artifact_type,json=artifactType,proto3,enum=google.ads.googleads.v15.enums.LocalServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactType" json:"artifact_type,omitempty"`
	// The types of verification info.
	//
	// Types that are assignable to ArtifactData:
	//
	//	*LocalServicesVerificationArtifact_BackgroundCheckVerificationArtifact
	//	*LocalServicesVerificationArtifact_InsuranceVerificationArtifact
	//	*LocalServicesVerificationArtifact_LicenseVerificationArtifact
	ArtifactData isLocalServicesVerificationArtifact_ArtifactData `protobuf_oneof:"artifact_data"`
}

func (x *LocalServicesVerificationArtifact) Reset() {
	*x = LocalServicesVerificationArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalServicesVerificationArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalServicesVerificationArtifact) ProtoMessage() {}

func (x *LocalServicesVerificationArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalServicesVerificationArtifact.ProtoReflect.Descriptor instead.
func (*LocalServicesVerificationArtifact) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescGZIP(), []int{0}
}

func (x *LocalServicesVerificationArtifact) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *LocalServicesVerificationArtifact) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LocalServicesVerificationArtifact) GetCreationDateTime() string {
	if x != nil {
		return x.CreationDateTime
	}
	return ""
}

func (x *LocalServicesVerificationArtifact) GetStatus() enums.LocalServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatus {
	if x != nil {
		return x.Status
	}
	return enums.LocalServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatus(0)
}

func (x *LocalServicesVerificationArtifact) GetArtifactType() enums.LocalServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactType {
	if x != nil {
		return x.ArtifactType
	}
	return enums.LocalServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactType(0)
}

func (m *LocalServicesVerificationArtifact) GetArtifactData() isLocalServicesVerificationArtifact_ArtifactData {
	if m != nil {
		return m.ArtifactData
	}
	return nil
}

func (x *LocalServicesVerificationArtifact) GetBackgroundCheckVerificationArtifact() *BackgroundCheckVerificationArtifact {
	if x, ok := x.GetArtifactData().(*LocalServicesVerificationArtifact_BackgroundCheckVerificationArtifact); ok {
		return x.BackgroundCheckVerificationArtifact
	}
	return nil
}

func (x *LocalServicesVerificationArtifact) GetInsuranceVerificationArtifact() *InsuranceVerificationArtifact {
	if x, ok := x.GetArtifactData().(*LocalServicesVerificationArtifact_InsuranceVerificationArtifact); ok {
		return x.InsuranceVerificationArtifact
	}
	return nil
}

func (x *LocalServicesVerificationArtifact) GetLicenseVerificationArtifact() *LicenseVerificationArtifact {
	if x, ok := x.GetArtifactData().(*LocalServicesVerificationArtifact_LicenseVerificationArtifact); ok {
		return x.LicenseVerificationArtifact
	}
	return nil
}

type isLocalServicesVerificationArtifact_ArtifactData interface {
	isLocalServicesVerificationArtifact_ArtifactData()
}

type LocalServicesVerificationArtifact_BackgroundCheckVerificationArtifact struct {
	// Output only. A background check verification artifact.
	BackgroundCheckVerificationArtifact *BackgroundCheckVerificationArtifact `protobuf:"bytes,6,opt,name=background_check_verification_artifact,json=backgroundCheckVerificationArtifact,proto3,oneof"`
}

type LocalServicesVerificationArtifact_InsuranceVerificationArtifact struct {
	// Output only. An insurance verification artifact.
	InsuranceVerificationArtifact *InsuranceVerificationArtifact `protobuf:"bytes,7,opt,name=insurance_verification_artifact,json=insuranceVerificationArtifact,proto3,oneof"`
}

type LocalServicesVerificationArtifact_LicenseVerificationArtifact struct {
	// Output only. A license verification artifact.
	LicenseVerificationArtifact *LicenseVerificationArtifact `protobuf:"bytes,8,opt,name=license_verification_artifact,json=licenseVerificationArtifact,proto3,oneof"`
}

func (*LocalServicesVerificationArtifact_BackgroundCheckVerificationArtifact) isLocalServicesVerificationArtifact_ArtifactData() {
}

func (*LocalServicesVerificationArtifact_InsuranceVerificationArtifact) isLocalServicesVerificationArtifact_ArtifactData() {
}

func (*LocalServicesVerificationArtifact_LicenseVerificationArtifact) isLocalServicesVerificationArtifact_ArtifactData() {
}

// A proto holding information specific to local services background check.
type BackgroundCheckVerificationArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. URL to access background case.
	CaseUrl *string `protobuf:"bytes,1,opt,name=case_url,json=caseUrl,proto3,oneof" json:"case_url,omitempty"`
	// Output only. The timestamp when this background check case result was
	// adjudicated. The format is "YYYY-MM-DD HH:MM:SS" in the Google Ads
	// account's timezone. Examples: "2018-03-05 09:15:00" or "2018-02-01
	// 14:34:30"
	FinalAdjudicationDateTime *string `protobuf:"bytes,2,opt,name=final_adjudication_date_time,json=finalAdjudicationDateTime,proto3,oneof" json:"final_adjudication_date_time,omitempty"`
}

func (x *BackgroundCheckVerificationArtifact) Reset() {
	*x = BackgroundCheckVerificationArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCheckVerificationArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCheckVerificationArtifact) ProtoMessage() {}

func (x *BackgroundCheckVerificationArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCheckVerificationArtifact.ProtoReflect.Descriptor instead.
func (*BackgroundCheckVerificationArtifact) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescGZIP(), []int{1}
}

func (x *BackgroundCheckVerificationArtifact) GetCaseUrl() string {
	if x != nil && x.CaseUrl != nil {
		return *x.CaseUrl
	}
	return ""
}

func (x *BackgroundCheckVerificationArtifact) GetFinalAdjudicationDateTime() string {
	if x != nil && x.FinalAdjudicationDateTime != nil {
		return *x.FinalAdjudicationDateTime
	}
	return ""
}

// A proto holding information specific to a local services insurance.
type InsuranceVerificationArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Insurance amount. This is measured in "micros" of the currency
	// mentioned in the insurance document.
	AmountMicros *int64 `protobuf:"varint,1,opt,name=amount_micros,json=amountMicros,proto3,oneof" json:"amount_micros,omitempty"`
	// Output only. Insurance document's rejection reason.
	RejectionReason *enums.LocalServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReason `protobuf:"varint,2,opt,name=rejection_reason,json=rejectionReason,proto3,enum=google.ads.googleads.v15.enums.LocalServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReason,oneof" json:"rejection_reason,omitempty"`
	// Output only. The readonly field containing the information for an uploaded
	// insurance document.
	InsuranceDocumentReadonly *common.LocalServicesDocumentReadOnly `protobuf:"bytes,3,opt,name=insurance_document_readonly,json=insuranceDocumentReadonly,proto3,oneof" json:"insurance_document_readonly,omitempty"`
}

func (x *InsuranceVerificationArtifact) Reset() {
	*x = InsuranceVerificationArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsuranceVerificationArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsuranceVerificationArtifact) ProtoMessage() {}

func (x *InsuranceVerificationArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsuranceVerificationArtifact.ProtoReflect.Descriptor instead.
func (*InsuranceVerificationArtifact) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescGZIP(), []int{2}
}

func (x *InsuranceVerificationArtifact) GetAmountMicros() int64 {
	if x != nil && x.AmountMicros != nil {
		return *x.AmountMicros
	}
	return 0
}

func (x *InsuranceVerificationArtifact) GetRejectionReason() enums.LocalServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReason {
	if x != nil && x.RejectionReason != nil {
		return *x.RejectionReason
	}
	return enums.LocalServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReason(0)
}

func (x *InsuranceVerificationArtifact) GetInsuranceDocumentReadonly() *common.LocalServicesDocumentReadOnly {
	if x != nil {
		return x.InsuranceDocumentReadonly
	}
	return nil
}

// A proto holding information specific to a local services license.
type LicenseVerificationArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. License type / name.
	LicenseType *string `protobuf:"bytes,1,opt,name=license_type,json=licenseType,proto3,oneof" json:"license_type,omitempty"`
	// Output only. License number.
	LicenseNumber *string `protobuf:"bytes,2,opt,name=license_number,json=licenseNumber,proto3,oneof" json:"license_number,omitempty"`
	// Output only. First name of the licensee.
	LicenseeFirstName *string `protobuf:"bytes,3,opt,name=licensee_first_name,json=licenseeFirstName,proto3,oneof" json:"licensee_first_name,omitempty"`
	// Output only. Last name of the licensee.
	LicenseeLastName *string `protobuf:"bytes,4,opt,name=licensee_last_name,json=licenseeLastName,proto3,oneof" json:"licensee_last_name,omitempty"`
	// Output only. License rejection reason.
	RejectionReason *enums.LocalServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReason `protobuf:"varint,5,opt,name=rejection_reason,json=rejectionReason,proto3,enum=google.ads.googleads.v15.enums.LocalServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReason,oneof" json:"rejection_reason,omitempty"`
	// Output only. The readonly field containing the information for an uploaded
	// license document.
	LicenseDocumentReadonly *common.LocalServicesDocumentReadOnly `protobuf:"bytes,6,opt,name=license_document_readonly,json=licenseDocumentReadonly,proto3,oneof" json:"license_document_readonly,omitempty"`
}

func (x *LicenseVerificationArtifact) Reset() {
	*x = LicenseVerificationArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseVerificationArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseVerificationArtifact) ProtoMessage() {}

func (x *LicenseVerificationArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseVerificationArtifact.ProtoReflect.Descriptor instead.
func (*LicenseVerificationArtifact) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescGZIP(), []int{3}
}

func (x *LicenseVerificationArtifact) GetLicenseType() string {
	if x != nil && x.LicenseType != nil {
		return *x.LicenseType
	}
	return ""
}

func (x *LicenseVerificationArtifact) GetLicenseNumber() string {
	if x != nil && x.LicenseNumber != nil {
		return *x.LicenseNumber
	}
	return ""
}

func (x *LicenseVerificationArtifact) GetLicenseeFirstName() string {
	if x != nil && x.LicenseeFirstName != nil {
		return *x.LicenseeFirstName
	}
	return ""
}

func (x *LicenseVerificationArtifact) GetLicenseeLastName() string {
	if x != nil && x.LicenseeLastName != nil {
		return *x.LicenseeLastName
	}
	return ""
}

func (x *LicenseVerificationArtifact) GetRejectionReason() enums.LocalServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReason {
	if x != nil && x.RejectionReason != nil {
		return *x.RejectionReason
	}
	return enums.LocalServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReason(0)
}

func (x *LicenseVerificationArtifact) GetLicenseDocumentReadonly() *common.LocalServicesDocumentReadOnly {
	if x != nil {
		return x.LicenseDocumentReadonly
	}
	return nil
}

var File_google_ads_googleads_v15_resources_local_services_verification_artifact_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDesc = []byte{
	0x0a, 0x4d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x1a, 0x34, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x50, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x09, 0x0a, 0x21, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x67, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x42, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x3c, 0x0a, 0x3a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x90, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0xa3, 0x01, 0x0a, 0x26, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48,
	0x00, 0x52, 0x23, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x1f, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x1d, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x1b, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x9b, 0x01, 0xea, 0x41, 0x97, 0x01, 0x0a, 0x3a, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x59, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x6c, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x42, 0x0f, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xc3, 0x01, 0x0a,
	0x23, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1c, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x6a,
	0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xc7, 0x03, 0x0a, 0x1d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x00, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x1b, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x9d, 0x05, 0x0a,
	0x1b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x0c,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x13, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x11,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x03, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0xa0, 0x01, 0x0a,
	0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x84, 0x01, 0x0a, 0x19, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x05, 0x52, 0x17, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x98, 0x02, 0x0a,
	0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x26, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x4b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x3b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xa2, 0x02,
	0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64,
	0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31, 0x35, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xca, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73,
	0x5c, 0x56, 0x31, 0x35, 0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xea, 0x02,
	0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x35, 0x3a, 0x3a, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescData = file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDesc
)

func file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescData)
	})
	return file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDescData
}

var file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_goTypes = []interface{}{
	(*LocalServicesVerificationArtifact)(nil),                                                      // 0: google.ads.googleads.v15.resources.LocalServicesVerificationArtifact
	(*BackgroundCheckVerificationArtifact)(nil),                                                    // 1: google.ads.googleads.v15.resources.BackgroundCheckVerificationArtifact
	(*InsuranceVerificationArtifact)(nil),                                                          // 2: google.ads.googleads.v15.resources.InsuranceVerificationArtifact
	(*LicenseVerificationArtifact)(nil),                                                            // 3: google.ads.googleads.v15.resources.LicenseVerificationArtifact
	(enums.LocalServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatus)(0), // 4: google.ads.googleads.v15.enums.LocalServicesVerificationArtifactStatusEnum.LocalServicesVerificationArtifactStatus
	(enums.LocalServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactType)(0),     // 5: google.ads.googleads.v15.enums.LocalServicesVerificationArtifactTypeEnum.LocalServicesVerificationArtifactType
	(enums.LocalServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReason)(0),     // 6: google.ads.googleads.v15.enums.LocalServicesInsuranceRejectionReasonEnum.LocalServicesInsuranceRejectionReason
	(*common.LocalServicesDocumentReadOnly)(nil),                                                   // 7: google.ads.googleads.v15.common.LocalServicesDocumentReadOnly
	(enums.LocalServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReason)(0),         // 8: google.ads.googleads.v15.enums.LocalServicesLicenseRejectionReasonEnum.LocalServicesLicenseRejectionReason
}
var file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_depIdxs = []int32{
	4, // 0: google.ads.googleads.v15.resources.LocalServicesVerificationArtifact.status:type_name -> google.ads.googleads.v15.enums.LocalServicesVerificationArtifactStatusEnum.LocalServicesVerificationArtifactStatus
	5, // 1: google.ads.googleads.v15.resources.LocalServicesVerificationArtifact.artifact_type:type_name -> google.ads.googleads.v15.enums.LocalServicesVerificationArtifactTypeEnum.LocalServicesVerificationArtifactType
	1, // 2: google.ads.googleads.v15.resources.LocalServicesVerificationArtifact.background_check_verification_artifact:type_name -> google.ads.googleads.v15.resources.BackgroundCheckVerificationArtifact
	2, // 3: google.ads.googleads.v15.resources.LocalServicesVerificationArtifact.insurance_verification_artifact:type_name -> google.ads.googleads.v15.resources.InsuranceVerificationArtifact
	3, // 4: google.ads.googleads.v15.resources.LocalServicesVerificationArtifact.license_verification_artifact:type_name -> google.ads.googleads.v15.resources.LicenseVerificationArtifact
	6, // 5: google.ads.googleads.v15.resources.InsuranceVerificationArtifact.rejection_reason:type_name -> google.ads.googleads.v15.enums.LocalServicesInsuranceRejectionReasonEnum.LocalServicesInsuranceRejectionReason
	7, // 6: google.ads.googleads.v15.resources.InsuranceVerificationArtifact.insurance_document_readonly:type_name -> google.ads.googleads.v15.common.LocalServicesDocumentReadOnly
	8, // 7: google.ads.googleads.v15.resources.LicenseVerificationArtifact.rejection_reason:type_name -> google.ads.googleads.v15.enums.LocalServicesLicenseRejectionReasonEnum.LocalServicesLicenseRejectionReason
	7, // 8: google.ads.googleads.v15.resources.LicenseVerificationArtifact.license_document_readonly:type_name -> google.ads.googleads.v15.common.LocalServicesDocumentReadOnly
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() {
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_init()
}
func file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_init() {
	if File_google_ads_googleads_v15_resources_local_services_verification_artifact_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalServicesVerificationArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundCheckVerificationArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsuranceVerificationArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseVerificationArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LocalServicesVerificationArtifact_BackgroundCheckVerificationArtifact)(nil),
		(*LocalServicesVerificationArtifact_InsuranceVerificationArtifact)(nil),
		(*LocalServicesVerificationArtifact_LicenseVerificationArtifact)(nil),
	}
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v15_resources_local_services_verification_artifact_proto = out.File
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_rawDesc = nil
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_goTypes = nil
	file_google_ads_googleads_v15_resources_local_services_verification_artifact_proto_depIdxs = nil
}
