// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.1
// source: google/ads/googleads/v15/resources/offline_conversion_upload_client_summary.proto

package resources

import (
	enums "github.com/Optable/google-ads-pb/protogen/enums"
	errors "github.com/Optable/google-ads-pb/protogen/errors"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Offline conversion upload client summary.
type OfflineConversionUploadClientSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource name of the offline conversion upload client
	// summary. Offline conversion upload client summary resource names have the
	// form:
	//
	// `customers/{customer_id}/offlineConversionUploadClientSummaries/{client}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. Client type of the upload event.
	Client enums.OfflineEventUploadClientEnum_OfflineEventUploadClient `protobuf:"varint,2,opt,name=client,proto3,enum=google.ads.googleads.v15.enums.OfflineEventUploadClientEnum_OfflineEventUploadClient" json:"client,omitempty"`
	// Output only. Overall status for offline conversion client summary. Status
	// is generated
	//
	//	from most recent calendar day with upload stats
	Status enums.OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus `protobuf:"varint,3,opt,name=status,proto3,enum=google.ads.googleads.v15.enums.OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus" json:"status,omitempty"`
	// Output only. Total count of uploaded events.
	TotalEventCount int64 `protobuf:"varint,4,opt,name=total_event_count,json=totalEventCount,proto3" json:"total_event_count,omitempty"`
	// Output only. Total count of successful uploaded events.
	SuccessfulEventCount int64 `protobuf:"varint,5,opt,name=successful_event_count,json=successfulEventCount,proto3" json:"successful_event_count,omitempty"`
	// Output only. Successful rate.
	SuccessRate float64 `protobuf:"fixed64,6,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`
	// Output only. Date for the latest upload batch. The format is "yyyy-mm-dd
	// hh:mm:ss", and it's in the time zone of the Google Ads account.
	LastUploadDateTime string `protobuf:"bytes,7,opt,name=last_upload_date_time,json=lastUploadDateTime,proto3" json:"last_upload_date_time,omitempty"`
	// Output only. Summary of history stats by last N days.
	DailySummaries []*OfflineConversionSummary `protobuf:"bytes,8,rep,name=daily_summaries,json=dailySummaries,proto3" json:"daily_summaries,omitempty"`
	// Output only. Summary of history stats by last N jobs.
	JobSummaries []*OfflineConversionSummary `protobuf:"bytes,9,rep,name=job_summaries,json=jobSummaries,proto3" json:"job_summaries,omitempty"`
	// Output only. Details for each error code. Alerts are generated from most
	// recent calendar day with upload stats.
	Alerts []*OfflineConversionAlert `protobuf:"bytes,10,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *OfflineConversionUploadClientSummary) Reset() {
	*x = OfflineConversionUploadClientSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineConversionUploadClientSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineConversionUploadClientSummary) ProtoMessage() {}

func (x *OfflineConversionUploadClientSummary) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineConversionUploadClientSummary.ProtoReflect.Descriptor instead.
func (*OfflineConversionUploadClientSummary) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescGZIP(), []int{0}
}

func (x *OfflineConversionUploadClientSummary) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *OfflineConversionUploadClientSummary) GetClient() enums.OfflineEventUploadClientEnum_OfflineEventUploadClient {
	if x != nil {
		return x.Client
	}
	return enums.OfflineEventUploadClientEnum_OfflineEventUploadClient(0)
}

func (x *OfflineConversionUploadClientSummary) GetStatus() enums.OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus {
	if x != nil {
		return x.Status
	}
	return enums.OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus(0)
}

func (x *OfflineConversionUploadClientSummary) GetTotalEventCount() int64 {
	if x != nil {
		return x.TotalEventCount
	}
	return 0
}

func (x *OfflineConversionUploadClientSummary) GetSuccessfulEventCount() int64 {
	if x != nil {
		return x.SuccessfulEventCount
	}
	return 0
}

func (x *OfflineConversionUploadClientSummary) GetSuccessRate() float64 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *OfflineConversionUploadClientSummary) GetLastUploadDateTime() string {
	if x != nil {
		return x.LastUploadDateTime
	}
	return ""
}

func (x *OfflineConversionUploadClientSummary) GetDailySummaries() []*OfflineConversionSummary {
	if x != nil {
		return x.DailySummaries
	}
	return nil
}

func (x *OfflineConversionUploadClientSummary) GetJobSummaries() []*OfflineConversionSummary {
	if x != nil {
		return x.JobSummaries
	}
	return nil
}

func (x *OfflineConversionUploadClientSummary) GetAlerts() []*OfflineConversionAlert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

// Historical upload summary, grouped by upload date or job.
type OfflineConversionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Total count of successful event.
	SuccessfulCount int64 `protobuf:"varint,3,opt,name=successful_count,json=successfulCount,proto3" json:"successful_count,omitempty"`
	// Output only. Total count of failed event.
	FailedCount int64 `protobuf:"varint,4,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	// Dimension key for summary.
	//
	// Types that are assignable to DimensionKey:
	//
	//	*OfflineConversionSummary_JobId
	//	*OfflineConversionSummary_UploadDate
	DimensionKey isOfflineConversionSummary_DimensionKey `protobuf_oneof:"dimension_key"`
}

func (x *OfflineConversionSummary) Reset() {
	*x = OfflineConversionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineConversionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineConversionSummary) ProtoMessage() {}

func (x *OfflineConversionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineConversionSummary.ProtoReflect.Descriptor instead.
func (*OfflineConversionSummary) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescGZIP(), []int{1}
}

func (x *OfflineConversionSummary) GetSuccessfulCount() int64 {
	if x != nil {
		return x.SuccessfulCount
	}
	return 0
}

func (x *OfflineConversionSummary) GetFailedCount() int64 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (m *OfflineConversionSummary) GetDimensionKey() isOfflineConversionSummary_DimensionKey {
	if m != nil {
		return m.DimensionKey
	}
	return nil
}

func (x *OfflineConversionSummary) GetJobId() int64 {
	if x, ok := x.GetDimensionKey().(*OfflineConversionSummary_JobId); ok {
		return x.JobId
	}
	return 0
}

func (x *OfflineConversionSummary) GetUploadDate() string {
	if x, ok := x.GetDimensionKey().(*OfflineConversionSummary_UploadDate); ok {
		return x.UploadDate
	}
	return ""
}

type isOfflineConversionSummary_DimensionKey interface {
	isOfflineConversionSummary_DimensionKey()
}

type OfflineConversionSummary_JobId struct {
	// Output only. Dimension key for last N jobs.
	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3,oneof"`
}

type OfflineConversionSummary_UploadDate struct {
	// Output only. Dimension key for last N days.
	UploadDate string `protobuf:"bytes,2,opt,name=upload_date,json=uploadDate,proto3,oneof"`
}

func (*OfflineConversionSummary_JobId) isOfflineConversionSummary_DimensionKey() {}

func (*OfflineConversionSummary_UploadDate) isOfflineConversionSummary_DimensionKey() {}

// Alert for offline conversion client summary.
type OfflineConversionAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Error for offline conversion client alert.
	Error *OfflineConversionError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. Percentage of the error, the range of this field should be
	// [0, 1.0].
	ErrorPercentage float64 `protobuf:"fixed64,2,opt,name=error_percentage,json=errorPercentage,proto3" json:"error_percentage,omitempty"`
}

func (x *OfflineConversionAlert) Reset() {
	*x = OfflineConversionAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineConversionAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineConversionAlert) ProtoMessage() {}

func (x *OfflineConversionAlert) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineConversionAlert.ProtoReflect.Descriptor instead.
func (*OfflineConversionAlert) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescGZIP(), []int{2}
}

func (x *OfflineConversionAlert) GetError() *OfflineConversionError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *OfflineConversionAlert) GetErrorPercentage() float64 {
	if x != nil {
		return x.ErrorPercentage
	}
	return 0
}

// Possible errors for offline conversion client summary.
type OfflineConversionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error with description.
	//
	// Types that are assignable to ErrorCode:
	//
	//	*OfflineConversionError_CollectionSizeError
	//	*OfflineConversionError_ConversionAdjustmentUploadError
	//	*OfflineConversionError_ConversionUploadError
	//	*OfflineConversionError_DateError
	//	*OfflineConversionError_DistinctError
	//	*OfflineConversionError_FieldError
	//	*OfflineConversionError_MutateError
	//	*OfflineConversionError_NotAllowlistedError
	//	*OfflineConversionError_StringFormatError
	//	*OfflineConversionError_StringLengthError
	ErrorCode isOfflineConversionError_ErrorCode `protobuf_oneof:"error_code"`
}

func (x *OfflineConversionError) Reset() {
	*x = OfflineConversionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineConversionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineConversionError) ProtoMessage() {}

func (x *OfflineConversionError) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineConversionError.ProtoReflect.Descriptor instead.
func (*OfflineConversionError) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescGZIP(), []int{3}
}

func (m *OfflineConversionError) GetErrorCode() isOfflineConversionError_ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return nil
}

func (x *OfflineConversionError) GetCollectionSizeError() errors.CollectionSizeErrorEnum_CollectionSizeError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_CollectionSizeError); ok {
		return x.CollectionSizeError
	}
	return errors.CollectionSizeErrorEnum_CollectionSizeError(0)
}

func (x *OfflineConversionError) GetConversionAdjustmentUploadError() errors.ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_ConversionAdjustmentUploadError); ok {
		return x.ConversionAdjustmentUploadError
	}
	return errors.ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError(0)
}

func (x *OfflineConversionError) GetConversionUploadError() errors.ConversionUploadErrorEnum_ConversionUploadError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_ConversionUploadError); ok {
		return x.ConversionUploadError
	}
	return errors.ConversionUploadErrorEnum_ConversionUploadError(0)
}

func (x *OfflineConversionError) GetDateError() errors.DateErrorEnum_DateError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_DateError); ok {
		return x.DateError
	}
	return errors.DateErrorEnum_DateError(0)
}

func (x *OfflineConversionError) GetDistinctError() errors.DistinctErrorEnum_DistinctError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_DistinctError); ok {
		return x.DistinctError
	}
	return errors.DistinctErrorEnum_DistinctError(0)
}

func (x *OfflineConversionError) GetFieldError() errors.FieldErrorEnum_FieldError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_FieldError); ok {
		return x.FieldError
	}
	return errors.FieldErrorEnum_FieldError(0)
}

func (x *OfflineConversionError) GetMutateError() errors.MutateErrorEnum_MutateError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_MutateError); ok {
		return x.MutateError
	}
	return errors.MutateErrorEnum_MutateError(0)
}

func (x *OfflineConversionError) GetNotAllowlistedError() errors.NotAllowlistedErrorEnum_NotAllowlistedError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_NotAllowlistedError); ok {
		return x.NotAllowlistedError
	}
	return errors.NotAllowlistedErrorEnum_NotAllowlistedError(0)
}

func (x *OfflineConversionError) GetStringFormatError() errors.StringFormatErrorEnum_StringFormatError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_StringFormatError); ok {
		return x.StringFormatError
	}
	return errors.StringFormatErrorEnum_StringFormatError(0)
}

func (x *OfflineConversionError) GetStringLengthError() errors.StringLengthErrorEnum_StringLengthError {
	if x, ok := x.GetErrorCode().(*OfflineConversionError_StringLengthError); ok {
		return x.StringLengthError
	}
	return errors.StringLengthErrorEnum_StringLengthError(0)
}

type isOfflineConversionError_ErrorCode interface {
	isOfflineConversionError_ErrorCode()
}

type OfflineConversionError_CollectionSizeError struct {
	// Output only. Collection size error.
	CollectionSizeError errors.CollectionSizeErrorEnum_CollectionSizeError `protobuf:"varint,1,opt,name=collection_size_error,json=collectionSizeError,proto3,enum=google.ads.googleads.v15.errors.CollectionSizeErrorEnum_CollectionSizeError,oneof"`
}

type OfflineConversionError_ConversionAdjustmentUploadError struct {
	// Output only. Conversion adjustment upload error.
	ConversionAdjustmentUploadError errors.ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError `protobuf:"varint,2,opt,name=conversion_adjustment_upload_error,json=conversionAdjustmentUploadError,proto3,enum=google.ads.googleads.v15.errors.ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError,oneof"`
}

type OfflineConversionError_ConversionUploadError struct {
	// Output only. Conversion upload error.
	ConversionUploadError errors.ConversionUploadErrorEnum_ConversionUploadError `protobuf:"varint,3,opt,name=conversion_upload_error,json=conversionUploadError,proto3,enum=google.ads.googleads.v15.errors.ConversionUploadErrorEnum_ConversionUploadError,oneof"`
}

type OfflineConversionError_DateError struct {
	// Output only. Date error.
	DateError errors.DateErrorEnum_DateError `protobuf:"varint,4,opt,name=date_error,json=dateError,proto3,enum=google.ads.googleads.v15.errors.DateErrorEnum_DateError,oneof"`
}

type OfflineConversionError_DistinctError struct {
	// Output only. Distinct error.
	DistinctError errors.DistinctErrorEnum_DistinctError `protobuf:"varint,5,opt,name=distinct_error,json=distinctError,proto3,enum=google.ads.googleads.v15.errors.DistinctErrorEnum_DistinctError,oneof"`
}

type OfflineConversionError_FieldError struct {
	// Output only. Field error.
	FieldError errors.FieldErrorEnum_FieldError `protobuf:"varint,6,opt,name=field_error,json=fieldError,proto3,enum=google.ads.googleads.v15.errors.FieldErrorEnum_FieldError,oneof"`
}

type OfflineConversionError_MutateError struct {
	// Output only. Mutate error.
	MutateError errors.MutateErrorEnum_MutateError `protobuf:"varint,7,opt,name=mutate_error,json=mutateError,proto3,enum=google.ads.googleads.v15.errors.MutateErrorEnum_MutateError,oneof"`
}

type OfflineConversionError_NotAllowlistedError struct {
	// Output only. Not allowlisted error.
	NotAllowlistedError errors.NotAllowlistedErrorEnum_NotAllowlistedError `protobuf:"varint,8,opt,name=not_allowlisted_error,json=notAllowlistedError,proto3,enum=google.ads.googleads.v15.errors.NotAllowlistedErrorEnum_NotAllowlistedError,oneof"`
}

type OfflineConversionError_StringFormatError struct {
	// Output only. String format error.
	StringFormatError errors.StringFormatErrorEnum_StringFormatError `protobuf:"varint,9,opt,name=string_format_error,json=stringFormatError,proto3,enum=google.ads.googleads.v15.errors.StringFormatErrorEnum_StringFormatError,oneof"`
}

type OfflineConversionError_StringLengthError struct {
	// Output only. String length error.
	StringLengthError errors.StringLengthErrorEnum_StringLengthError `protobuf:"varint,10,opt,name=string_length_error,json=stringLengthError,proto3,enum=google.ads.googleads.v15.errors.StringLengthErrorEnum_StringLengthError,oneof"`
}

func (*OfflineConversionError_CollectionSizeError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_ConversionAdjustmentUploadError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_ConversionUploadError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_DateError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_DistinctError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_FieldError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_MutateError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_NotAllowlistedError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_StringFormatError) isOfflineConversionError_ErrorCode() {}

func (*OfflineConversionError_StringLengthError) isOfflineConversionError_ErrorCode() {}

var File_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDesc = []byte{
	0x0a, 0x51, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x4e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x35, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64,
	0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x95, 0x08, 0x0a, 0x24, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x45, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x3f, 0x0a, 0x3d, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x16, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a,
	0x0a, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x3a, 0x8c, 0x01, 0xea, 0x41,
	0x88, 0x01, 0x0a, 0x3d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x47, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x7d, 0x22, 0xc9, 0x01, 0x0a, 0x18, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x16, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x55, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x0a, 0x0a, 0x16, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xb8, 0x01,
	0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x8f, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6e, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x66,
	0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x6f, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x7f, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x7f, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x9b, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x29, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x35, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x22, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x64, 0x73, 0x2e, 0x56, 0x31, 0x35, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0xca, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x35, 0x5c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0xea, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a,
	0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x35, 0x3a, 0x3a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescData = file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDesc
)

func file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescData)
	})
	return file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDescData
}

var file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_goTypes = []interface{}{
	(*OfflineConversionUploadClientSummary)(nil),                                       // 0: google.ads.googleads.v15.resources.OfflineConversionUploadClientSummary
	(*OfflineConversionSummary)(nil),                                                   // 1: google.ads.googleads.v15.resources.OfflineConversionSummary
	(*OfflineConversionAlert)(nil),                                                     // 2: google.ads.googleads.v15.resources.OfflineConversionAlert
	(*OfflineConversionError)(nil),                                                     // 3: google.ads.googleads.v15.resources.OfflineConversionError
	(enums.OfflineEventUploadClientEnum_OfflineEventUploadClient)(0),                   // 4: google.ads.googleads.v15.enums.OfflineEventUploadClientEnum.OfflineEventUploadClient
	(enums.OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus)(0), // 5: google.ads.googleads.v15.enums.OfflineConversionDiagnosticStatusEnum.OfflineConversionDiagnosticStatus
	(errors.CollectionSizeErrorEnum_CollectionSizeError)(0),                            // 6: google.ads.googleads.v15.errors.CollectionSizeErrorEnum.CollectionSizeError
	(errors.ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError)(0),    // 7: google.ads.googleads.v15.errors.ConversionAdjustmentUploadErrorEnum.ConversionAdjustmentUploadError
	(errors.ConversionUploadErrorEnum_ConversionUploadError)(0),                        // 8: google.ads.googleads.v15.errors.ConversionUploadErrorEnum.ConversionUploadError
	(errors.DateErrorEnum_DateError)(0),                                                // 9: google.ads.googleads.v15.errors.DateErrorEnum.DateError
	(errors.DistinctErrorEnum_DistinctError)(0),                                        // 10: google.ads.googleads.v15.errors.DistinctErrorEnum.DistinctError
	(errors.FieldErrorEnum_FieldError)(0),                                              // 11: google.ads.googleads.v15.errors.FieldErrorEnum.FieldError
	(errors.MutateErrorEnum_MutateError)(0),                                            // 12: google.ads.googleads.v15.errors.MutateErrorEnum.MutateError
	(errors.NotAllowlistedErrorEnum_NotAllowlistedError)(0),                            // 13: google.ads.googleads.v15.errors.NotAllowlistedErrorEnum.NotAllowlistedError
	(errors.StringFormatErrorEnum_StringFormatError)(0),                                // 14: google.ads.googleads.v15.errors.StringFormatErrorEnum.StringFormatError
	(errors.StringLengthErrorEnum_StringLengthError)(0),                                // 15: google.ads.googleads.v15.errors.StringLengthErrorEnum.StringLengthError
}
var file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_depIdxs = []int32{
	4,  // 0: google.ads.googleads.v15.resources.OfflineConversionUploadClientSummary.client:type_name -> google.ads.googleads.v15.enums.OfflineEventUploadClientEnum.OfflineEventUploadClient
	5,  // 1: google.ads.googleads.v15.resources.OfflineConversionUploadClientSummary.status:type_name -> google.ads.googleads.v15.enums.OfflineConversionDiagnosticStatusEnum.OfflineConversionDiagnosticStatus
	1,  // 2: google.ads.googleads.v15.resources.OfflineConversionUploadClientSummary.daily_summaries:type_name -> google.ads.googleads.v15.resources.OfflineConversionSummary
	1,  // 3: google.ads.googleads.v15.resources.OfflineConversionUploadClientSummary.job_summaries:type_name -> google.ads.googleads.v15.resources.OfflineConversionSummary
	2,  // 4: google.ads.googleads.v15.resources.OfflineConversionUploadClientSummary.alerts:type_name -> google.ads.googleads.v15.resources.OfflineConversionAlert
	3,  // 5: google.ads.googleads.v15.resources.OfflineConversionAlert.error:type_name -> google.ads.googleads.v15.resources.OfflineConversionError
	6,  // 6: google.ads.googleads.v15.resources.OfflineConversionError.collection_size_error:type_name -> google.ads.googleads.v15.errors.CollectionSizeErrorEnum.CollectionSizeError
	7,  // 7: google.ads.googleads.v15.resources.OfflineConversionError.conversion_adjustment_upload_error:type_name -> google.ads.googleads.v15.errors.ConversionAdjustmentUploadErrorEnum.ConversionAdjustmentUploadError
	8,  // 8: google.ads.googleads.v15.resources.OfflineConversionError.conversion_upload_error:type_name -> google.ads.googleads.v15.errors.ConversionUploadErrorEnum.ConversionUploadError
	9,  // 9: google.ads.googleads.v15.resources.OfflineConversionError.date_error:type_name -> google.ads.googleads.v15.errors.DateErrorEnum.DateError
	10, // 10: google.ads.googleads.v15.resources.OfflineConversionError.distinct_error:type_name -> google.ads.googleads.v15.errors.DistinctErrorEnum.DistinctError
	11, // 11: google.ads.googleads.v15.resources.OfflineConversionError.field_error:type_name -> google.ads.googleads.v15.errors.FieldErrorEnum.FieldError
	12, // 12: google.ads.googleads.v15.resources.OfflineConversionError.mutate_error:type_name -> google.ads.googleads.v15.errors.MutateErrorEnum.MutateError
	13, // 13: google.ads.googleads.v15.resources.OfflineConversionError.not_allowlisted_error:type_name -> google.ads.googleads.v15.errors.NotAllowlistedErrorEnum.NotAllowlistedError
	14, // 14: google.ads.googleads.v15.resources.OfflineConversionError.string_format_error:type_name -> google.ads.googleads.v15.errors.StringFormatErrorEnum.StringFormatError
	15, // 15: google.ads.googleads.v15.resources.OfflineConversionError.string_length_error:type_name -> google.ads.googleads.v15.errors.StringLengthErrorEnum.StringLengthError
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() {
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_init()
}
func file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_init() {
	if File_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineConversionUploadClientSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineConversionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineConversionAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineConversionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*OfflineConversionSummary_JobId)(nil),
		(*OfflineConversionSummary_UploadDate)(nil),
	}
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OfflineConversionError_CollectionSizeError)(nil),
		(*OfflineConversionError_ConversionAdjustmentUploadError)(nil),
		(*OfflineConversionError_ConversionUploadError)(nil),
		(*OfflineConversionError_DateError)(nil),
		(*OfflineConversionError_DistinctError)(nil),
		(*OfflineConversionError_FieldError)(nil),
		(*OfflineConversionError_MutateError)(nil),
		(*OfflineConversionError_NotAllowlistedError)(nil),
		(*OfflineConversionError_StringFormatError)(nil),
		(*OfflineConversionError_StringLengthError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto = out.File
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_rawDesc = nil
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_goTypes = nil
	file_google_ads_googleads_v15_resources_offline_conversion_upload_client_summary_proto_depIdxs = nil
}
