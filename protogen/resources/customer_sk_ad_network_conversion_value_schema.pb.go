// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.1
// source: google/ads/googleads/v15/resources/customer_sk_ad_network_conversion_value_schema.proto

package resources

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A CustomerSkAdNetworkConversionValueSchema.
type CustomerSkAdNetworkConversionValueSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource name of the schema.
	// CustomerSkAdNetworkConversionValueSchema resource names have the form:
	// customers/{customer_id}/customerSkAdNetworkConversionValueSchemas/{account_link_id}
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. The schema for the specified resource.
	Schema *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *CustomerSkAdNetworkConversionValueSchema) Reset() {
	*x = CustomerSkAdNetworkConversionValueSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSkAdNetworkConversionValueSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSkAdNetworkConversionValueSchema) ProtoMessage() {}

func (x *CustomerSkAdNetworkConversionValueSchema) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSkAdNetworkConversionValueSchema.ProtoReflect.Descriptor instead.
func (*CustomerSkAdNetworkConversionValueSchema) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescGZIP(), []int{0}
}

func (x *CustomerSkAdNetworkConversionValueSchema) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *CustomerSkAdNetworkConversionValueSchema) GetSchema() *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

// The CustomerLink specific SkAdNetworkConversionValueSchema.
type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Output only. Apple App Store app ID.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Output only. A time window (measured in hours) post-install, after which
	// the App Attribution Partner or advertiser stops calling
	// [updateConversionValue]
	// (https://developer.apple.com/documentation/storekit/skadnetwork/3566697-updateconversionvalue).
	MeasurementWindowHours int32 `protobuf:"varint,2,opt,name=measurement_window_hours,json=measurementWindowHours,proto3" json:"measurement_window_hours,omitempty"`
	// Output only. Fine grained conversion value mappings.
	FineGrainedConversionValueMappings []*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings `protobuf:"bytes,3,rep,name=fine_grained_conversion_value_mappings,json=fineGrainedConversionValueMappings,proto3" json:"fine_grained_conversion_value_mappings,omitempty"`
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema) Reset() {
	*x = CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema) ProtoMessage() {}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema.ProtoReflect.Descriptor instead.
func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema) GetMeasurementWindowHours() int32 {
	if x != nil {
		return x.MeasurementWindowHours
	}
	return 0
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema) GetFineGrainedConversionValueMappings() []*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings {
	if x != nil {
		return x.FineGrainedConversionValueMappings
	}
	return nil
}

// Mappings for fine grained conversion value.
type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Fine grained conversion value. Valid values are in the
	// inclusive range [0,63].
	FineGrainedConversionValue int32 `protobuf:"varint,1,opt,name=fine_grained_conversion_value,json=fineGrainedConversionValue,proto3" json:"fine_grained_conversion_value,omitempty"`
	// Output only. Conversion events the fine grained conversion value maps
	// to.
	ConversionValueMapping *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping `protobuf:"bytes,2,opt,name=conversion_value_mapping,json=conversionValueMapping,proto3" json:"conversion_value_mapping,omitempty"`
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings) Reset() {
	*x = CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings) ProtoMessage() {
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings.ProtoReflect.Descriptor instead.
func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings) GetFineGrainedConversionValue() int32 {
	if x != nil {
		return x.FineGrainedConversionValue
	}
	return 0
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings) GetConversionValueMapping() *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping {
	if x != nil {
		return x.ConversionValueMapping
	}
	return nil
}

// Represents mapping from one conversion value to one or more conversion
// events.
type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The minimum of the time range in which a user was last
	// active during the measurement window.
	MinTimePostInstallHours int64 `protobuf:"varint,1,opt,name=min_time_post_install_hours,json=minTimePostInstallHours,proto3" json:"min_time_post_install_hours,omitempty"`
	// Output only. The maximum of the time range in which a user was last
	// active during the measurement window.
	MaxTimePostInstallHours int64 `protobuf:"varint,2,opt,name=max_time_post_install_hours,json=maxTimePostInstallHours,proto3" json:"max_time_post_install_hours,omitempty"`
	// Output only. The conversion value may be mapped to multiple events with
	// various attributes.
	MappedEvents []*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event `protobuf:"bytes,3,rep,name=mapped_events,json=mappedEvents,proto3" json:"mapped_events,omitempty"`
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping) Reset() {
	*x = CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping) ProtoMessage() {
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping.ProtoReflect.Descriptor instead.
func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping) GetMinTimePostInstallHours() int64 {
	if x != nil {
		return x.MinTimePostInstallHours
	}
	return 0
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping) GetMaxTimePostInstallHours() int64 {
	if x != nil {
		return x.MaxTimePostInstallHours
	}
	return 0
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping) GetMappedEvents() []*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event {
	if x != nil {
		return x.MappedEvents
	}
	return nil
}

// Defines a Google conversion event that the conversion value is mapped to.
type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Google event name represented by this conversion value.
	MappedEventName string `protobuf:"bytes,1,opt,name=mapped_event_name,json=mappedEventName,proto3" json:"mapped_event_name,omitempty"`
	// Output only. The reported currency for the event_revenue. ISO 4217
	// three-letter currency code, for example, "USD"
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// Either a range or specific value for event revenue.
	//
	// Types that are assignable to RevenueRate:
	//
	//	*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueRange
	//	*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueValue
	RevenueRate isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRate `protobuf_oneof:"revenue_rate"`
	// Either a range or specific value for event counter.
	//
	// Types that are assignable to EventRate:
	//
	//	*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange_
	//	*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventCounter
	EventRate isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRate `protobuf_oneof:"event_rate"`
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) Reset() {
	*x = CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) ProtoMessage() {
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event.ProtoReflect.Descriptor instead.
func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) GetMappedEventName() string {
	if x != nil {
		return x.MappedEventName
	}
	return ""
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (m *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) GetRevenueRate() isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRate {
	if m != nil {
		return m.RevenueRate
	}
	return nil
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) GetEventRevenueRange() *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange {
	if x, ok := x.GetRevenueRate().(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueRange); ok {
		return x.EventRevenueRange
	}
	return nil
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) GetEventRevenueValue() float64 {
	if x, ok := x.GetRevenueRate().(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueValue); ok {
		return x.EventRevenueValue
	}
	return 0
}

func (m *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) GetEventRate() isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRate {
	if m != nil {
		return m.EventRate
	}
	return nil
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) GetEventOccurrenceRange() *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange {
	if x, ok := x.GetEventRate().(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange_); ok {
		return x.EventOccurrenceRange
	}
	return nil
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event) GetEventCounter() int64 {
	if x, ok := x.GetEventRate().(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventCounter); ok {
		return x.EventCounter
	}
	return 0
}

type isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRate interface {
	isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRate()
}

type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueRange struct {
	// Output only. The event revenue range.
	EventRevenueRange *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange `protobuf:"bytes,3,opt,name=event_revenue_range,json=eventRevenueRange,proto3,oneof"`
}

type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueValue struct {
	// Output only. The specific event revenue value.
	EventRevenueValue float64 `protobuf:"fixed64,4,opt,name=event_revenue_value,json=eventRevenueValue,proto3,oneof"`
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueRange) isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRate() {
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueValue) isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRate() {
}

type isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRate interface {
	isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRate()
}

type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange_ struct {
	// Output only. The event counter range.
	EventOccurrenceRange *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange `protobuf:"bytes,5,opt,name=event_occurrence_range,json=eventOccurrenceRange,proto3,oneof"`
}

type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventCounter struct {
	// Output only. For specific event counter values.
	EventCounter int64 `protobuf:"varint,6,opt,name=event_counter,json=eventCounter,proto3,oneof"`
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange_) isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRate() {
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventCounter) isCustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRate() {
}

// Defines a range for revenue values.
type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. For revenue ranges, the minimum value in `currency_code`
	// for which this conversion value would be updated. A value of 0 will
	// be treated as unset.
	MinEventRevenue float64 `protobuf:"fixed64,3,opt,name=min_event_revenue,json=minEventRevenue,proto3" json:"min_event_revenue,omitempty"`
	// Output only. For revenue ranges, the maximum value in `currency_code`
	// for which this conversion value would be updated. A value of 0 will
	// be treated as unset.
	MaxEventRevenue float64 `protobuf:"fixed64,4,opt,name=max_event_revenue,json=maxEventRevenue,proto3" json:"max_event_revenue,omitempty"`
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange) Reset() {
	*x = CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange) ProtoMessage() {
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange.ProtoReflect.Descriptor instead.
func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange) GetMinEventRevenue() float64 {
	if x != nil {
		return x.MinEventRevenue
	}
	return 0
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange) GetMaxEventRevenue() float64 {
	if x != nil {
		return x.MaxEventRevenue
	}
	return 0
}

// Defines a range for event counter values.
type CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. For event counter ranges, the minimum of the defined
	// range. A value of 0 will be treated as unset.
	MinEventCount int64 `protobuf:"varint,1,opt,name=min_event_count,json=minEventCount,proto3" json:"min_event_count,omitempty"`
	// Output only. For event counter ranges, the maximum of the defined
	// range. A value of 0 will be treated as unset.
	MaxEventCount int64 `protobuf:"varint,2,opt,name=max_event_count,json=maxEventCount,proto3" json:"max_event_count,omitempty"`
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange) Reset() {
	*x = CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange) ProtoMessage() {
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange.ProtoReflect.Descriptor instead.
func (*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange) GetMinEventCount() int64 {
	if x != nil {
		return x.MinEventCount
	}
	return 0
}

func (x *CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange) GetMaxEventCount() int64 {
	if x != nil {
		return x.MaxEventCount
	}
	return 0
}

var File_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDesc = []byte{
	0x0a, 0x57, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x6b,
	0x5f, 0x61, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x11, 0x0a, 0x28, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x6e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xe0,
	0x41, 0x03, 0xfa, 0x41, 0x43, 0x0a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x1a, 0xb2, 0x0e, 0x0a, 0x20, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x03,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x16,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0xea, 0x01, 0x0a, 0x26, 0x66, 0x69, 0x6e, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x90, 0x01, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x22, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0xb3, 0x02, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x1d, 0x66, 0x69,
	0x6e, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1a, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xbe, 0x02, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17,
	0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xcb, 0x06, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0xb8, 0x01, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6b, 0x41, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x6b, 0x41,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x13, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x11,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0xc6, 0x01, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x48, 0x01, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x70, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x1a, 0x70, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x9c, 0x01, 0xea, 0x41, 0x98, 0x01, 0x0a,
	0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x53, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x9f, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x42, 0x2d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6b, 0x41, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x35, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31,
	0x35, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xca, 0x02, 0x22, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x64, 0x73, 0x5c, 0x56, 0x31, 0x35, 0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0xea, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x35, 0x3a, 0x3a,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescData = file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDesc
)

func file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescData)
	})
	return file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDescData
}

var file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_goTypes = []interface{}{
	(*CustomerSkAdNetworkConversionValueSchema)(nil),                                                                     // 0: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema
	(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema)(nil),                                    // 1: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema
	(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings)(nil), // 2: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.FineGrainedConversionValueMappings
	(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping)(nil),             // 3: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.ConversionValueMapping
	(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event)(nil),                              // 4: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.Event
	(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange)(nil),                 // 5: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.Event.RevenueRange
	(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange)(nil),         // 6: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.Event.EventOccurrenceRange
}
var file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_depIdxs = []int32{
	1, // 0: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.schema:type_name -> google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema
	2, // 1: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.fine_grained_conversion_value_mappings:type_name -> google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.FineGrainedConversionValueMappings
	3, // 2: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.FineGrainedConversionValueMappings.conversion_value_mapping:type_name -> google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.ConversionValueMapping
	4, // 3: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.ConversionValueMapping.mapped_events:type_name -> google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.Event
	5, // 4: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.Event.event_revenue_range:type_name -> google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.Event.RevenueRange
	6, // 5: google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.Event.event_occurrence_range:type_name -> google.ads.googleads.v15.resources.CustomerSkAdNetworkConversionValueSchema.SkAdNetworkConversionValueSchema.Event.EventOccurrenceRange
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() {
	file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_init()
}
func file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_init() {
	if File_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSkAdNetworkConversionValueSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_FineGrainedConversionValueMappings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_ConversionValueMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_RevenueRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueRange)(nil),
		(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventRevenueValue)(nil),
		(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventOccurrenceRange_)(nil),
		(*CustomerSkAdNetworkConversionValueSchema_SkAdNetworkConversionValueSchema_Event_EventCounter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto = out.File
	file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_rawDesc = nil
	file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_goTypes = nil
	file_google_ads_googleads_v15_resources_customer_sk_ad_network_conversion_value_schema_proto_depIdxs = nil
}
